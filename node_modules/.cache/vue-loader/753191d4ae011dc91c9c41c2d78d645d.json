{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/vis.vue?vue&type=template&id=91b57380&scoped=true&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/vis.vue","mtime":1612433829464},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}