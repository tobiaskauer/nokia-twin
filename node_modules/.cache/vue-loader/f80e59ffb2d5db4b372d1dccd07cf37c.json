{"remainingRequest":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokia-twin/twin-dashboard/src/components/metrics.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/src/components/metrics.vue","mtime":1594335255908},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnCgpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IHsKICAgIHNlbGVjdGVkOiBPYmplY3QKICB9LAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgIH0KICB9LAoKICBjb21wdXRlZDogewogICAgbWV0cmljcygpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm1ldHJpY3MKICAgIH0sCgogICAgYWN0aXZlKCkgewogICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZAogICAgfQogIH0sCgogIGNyZWF0ZWQgKCkgewogIH0sCgogIG1vdW50ZWQgKCkgewogIH0sCgogIG1ldGhvZHM6IHsKICAgIHNlbGVjdDogZnVuY3Rpb24oY29sLGl0ZW0pIHsKICAgICAgLypsZXQgY3VycmVudENvbCA9IHRoaXMuZmlsdGVyQ29sdW1ucy5maW5kKHg9PngubmFtZSA9PSBjb2wpCgogICAgICBpZihjdXJyZW50Q29sLnNlbGVjdGVkID09IGl0ZW0pIHsgLy9pZiBhbHJlYWR5IHNlbGVjdGVkCiAgICAgICAgdGhpcy4kc2V0KGN1cnJlbnRDb2wsICdzZWxlY3RlZCcsICIiKQogICAgICAgIC8vVE9ETyBERVNFTEVDVCBRVUVSWQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJHNldChjdXJyZW50Q29sLCAnc2VsZWN0ZWQnLCBpdGVtKSovCgogICAgICAgIC8vdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVRdWVyeScsIHtsaW5lOiB0aGlzLmxpbmUuaWRlbnRpZmllciwgcXVlcnk6IGl0ZW19KQogICAgICAgIHRoaXMuJGVtaXQoJ2NsaWNrZWQnLCB7bGluZTogZmFsc2UsIGNvbDogY29sLCBxdWVyeTogaXRlbX0pIC8vZmFsc2UgdG8gaW5kaWNhdGUgdGhhdCBhbGwgbGluZXMgYXJlIGFmZmVjdGVkCiAgICAgIC8vfQogICAgICAvL2NvbnNvbGUubG9nKGNvbCxpdGVtLGN1cnJlbnRDb2wpCiAgICAgIHRoaXMuJGZvcmNlVXBkYXRlKCkKICAgIH0KICB9Cn0K"},{"version":3,"sources":["metrics.vue"],"names":[],"mappings":";;;;;;;;;AASA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"metrics.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <ul class=\"metric\">\n    <li v-for=\"metric in metrics\" :key=\"metric.key\">\n      <span v-on:click=\"select('metric', metric)\">{{metric.display}}</span>\n    </li>\n  </ul>\n</template>\n\n<script>\n//import * as d3 from 'd3'\n\nexport default {\n  props: {\n    selected: Object\n  },\n\n  data() {\n    return {\n    }\n  },\n\n  computed: {\n    metrics() {\n      return this.$store.state.metrics\n    },\n\n    active() {\n      return this.selected\n    }\n  },\n\n  created () {\n  },\n\n  mounted () {\n  },\n\n  methods: {\n    select: function(col,item) {\n      /*let currentCol = this.filterColumns.find(x=>x.name == col)\n\n      if(currentCol.selected == item) { //if already selected\n        this.$set(currentCol, 'selected', \"\")\n        //TODO DESELECT QUERY\n      } else {\n        this.$set(currentCol, 'selected', item)*/\n\n        //this.$store.commit('updateQuery', {line: this.line.identifier, query: item})\n        this.$emit('clicked', {line: false, col: col, query: item}) //false to indicate that all lines are affected\n      //}\n      //console.log(col,item,currentCol)\n      this.$forceUpdate()\n    }\n  }\n}\n</script>\n\n<style scoped>\n</style>\n"]}]}