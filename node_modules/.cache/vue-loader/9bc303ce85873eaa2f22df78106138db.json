{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue","mtime":1605270860492},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBmaWx0ZXJSb3cgZnJvbSAnLi9maWx0ZXJSb3cudnVlJwppbXBvcnQgbWV0cmljcyBmcm9tICcuL21ldHJpY3MudnVlJwoKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiB7CiAgICBjb21wYW55OiBTdHJpbmcKICB9LAogIGNvbXB1dGVkOiB7CiAgICAvL2dldCBsaW5lcyAoaW5jbC4gY29sb3IsIGlkZW50aWZpZXIsIGZpbHRlcnMsIGFuZCBzZWxlY3Rpb25zKSBmcm9tIHN0b3JlCiAgICBsaW5lczogewogICAgICBjYWNoZTogZmFsc2UsCiAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUubGluZXMKICAgICAgfQogICAgfSwKICAgIGhhc01ldHJpY3M6IHsKICAgICAgY2FjaGU6IGZhbHNlLAogICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5tZXRyaWNzLmxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2UKICAgICAgfQogICAgfQogIH0sCgogIC8vaWYgdGhlcmUgYXJlIG5vIGxpbmVzIG9uIHN0b3JlIHdoZW4gcGFnZSBpcyBtb3VudGVkLCBhZGQgb25lIHRvIGFsd2F5cyBoYXZlIG9uZSBsaW5lIGF2YWlsYWJsZQogIHdhdGNoOiB7CiAgICBoYXNNZXRyaWNzOiBmdW5jdGlvbihuZXdCb29sKSB7CiAgICAgIGlmKG5ld0Jvb2wpIHsKICAgICAgICB0aGlzLmluaXRpYWxpemVGcm9tVVJMKHRoaXMuJHJvdXRlLnF1ZXJ5KQogICAgICB9CiAgICB9LAogICAgLy9zZXQgZmlsdGVycyBmcm9tIFVSTAogICAgLypsaW5lczogZnVuY3Rpb24obmV3TGluZXMpewogICAgICBpZihuZXdMaW5lcykgewogICAgICAgIC8vY29uc29sZS5sb2codGhpcy4kcmVmc1snZmlsdGVyUm93LScrbmV3TGluZXNbMF0uaWRlbnRpZmllcl0pCiAgICAgICAgdGhpcy5zZXRGaWx0ZXJzRnJvbVVSTCh0aGlzLiRyb3V0ZS5xdWVyeSkKICAgICAgfQogICAgfSovCiAgfSwKCiAgbW91bnRlZCgpIHsKCiAgfSwKCiAgbWV0aG9kczogewogICAgaW5pdGlhbGl6ZUZyb21VUkw6IGZ1bmN0aW9uKHBhcmFtKSB7CiAgICAgIGlmKHBhcmFtLmxpbmVzKSB7CiAgICAgICAgd2hpbGUgKHBhcmFtLmxpbmVzID4gMCl7CiAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnYWRkTGluZScpCiAgICAgICAgICBwYXJhbS5saW5lcy0tCiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhZGRMaW5lJykKICAgICAgfQoKCiAgICAgIGxldCBtZXRyaWMKICAgICAgLy8gaWYgYSBtZXRyaWMgaXMgc2V0IGluIHVybCBwYXJhbWV0ZXJzCiAgICAgIGlmKHBhcmFtLm1ldHJpYykgewogICAgICAgIC8vbG9vayBmb3IgdGhpcyBtZXRyaWMgaW4gY3VycmVudCBtZXRyaWMgc3RvcmFnZSwgaWYgeW91IGZpbmQgc3RoIHNldCBpdCwgb3RoZXJ3aXNlIHNldCB0aGUgZmlyc3Qgb25lCiAgICAgICAgbWV0cmljID0gdGhpcy4kc3RvcmUuc3RhdGUubWV0cmljcy5maW5kKGl0ZW0gPT4gaXRlbS5rZXkgPT0gIHBhcmFtLm1ldHJpYykgPyB0aGlzLiRzdG9yZS5zdGF0ZS5tZXRyaWNzLmZpbmQoaXRlbSA9PiBpdGVtLmtleSA9PSAgcGFyYW0ubWV0cmljKSA6IG1ldHJpYyA9IHRoaXMuJHN0b3JlLnN0YXRlLm1ldHJpY3NbMF0KICAgICAgfSBlbHNlIHsKICAgICAgICAvL2lmIG5vbmUgaXMgcGFzc2VkLCBqdXN0IHRha2UgdGhlIGZpcnN0IG9uZQogICAgICAgIG1ldHJpYyA9IHRoaXMuJHN0b3JlLnN0YXRlLm1ldHJpY3NbMF0KICAgICAgfQogICAgICAvL3NldCB0aGUgbWV0cmljCiAgICAgIHRoaXMuJHJlZnMubWV0cmljcy5zZWxlY3QobWV0cmljLmtleSkKICAgIH0sCgogICAgLy9wbGVhc2UgZG9udCBoYXRlIG1lLCBidXQgdGhpcyBnZXRzIHRyaWdnZXJlZCB0aHJlZSB0aW1lcyBhcyBvdGVuIGFzIG5lY2Vzc2FyeS4uLi4KICAgIHNldEZpbHRlcnNGcm9tVVJMOiBmdW5jdGlvbihwYXJhbSkgewoKICAgICAgLy9maW5kIGZpbHRlcnMKICAgICAgbGV0IGZpbHRlcnMgPSBbXQogICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5maWx0ZXJDb2x1bW5zLmZvckVhY2goZmlsdGVyQ29sdW1uID0+IHsKICAgICAgICAvL2NvbnNvbGUubG9nKGZpbHRlckNvbHVtbikgLy90aGlzIGlzIHRoZSBkaXNwbGF5IG5hbWUgb2YgdGhlIGNvbHVtbnMgKGUuZy4gIkxvY2F0aW9uIikKICAgICAgICBmaWx0ZXJDb2x1bW4uZGJfY29sdW1ucy5mb3JFYWNoKGNvbHVtbiA9PiB7CiAgICAgICAgICBpZihwYXJhbVtjb2x1bW5dKSB7CiAgICAgICAgICAgIC8veW91IGNhbiBoYXZlIGFzIG1hbnkgdmFsdWVzIGZvciBhIGdpdmVuIHBhcmFtZXRlciBhcyB5b3UgaGF2ZSBsaW5lcyAoZWcuIGZpbHRlcmluZyB0aHJlZSBsaW5lcyBieSB0aHJlZSBkaWZmZXJlbnQgY29tcGFuZXMuIGkgY29ycmVzcG9uZHMgdG8gdGhlIGxpbmUgY291bnQpCiAgICAgICAgICAgIHBhcmFtW2NvbHVtbl0uc3BsaXQoIiwiKS5mb3JFYWNoKCh2YWx1ZSxsaW5lQ291bnQpID0+IHsKICAgICAgICAgICAgICBmaWx0ZXJzW2xpbmVDb3VudF0gPSB7ZGlzcGxheTogZmlsdGVyQ29sdW1uLmRpc3BsYXksIGVsZW1lbnQ6IHtmaWx0ZXI6IGNvbHVtbiwga2V5OiB2YWx1ZX19CiAgICAgICAgICAgIH0pCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgfSkKCgoKICAgICAgLy9pdGVyYXRlIG92ZXIgZXhpc3RpbmcgbGluZXMgKGluIHNpZGViYXIpIGFuZCBhcHBseSBmaWx0ZXJzIGZyb20gVVJMCiAgICAgIHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0TGluZXMuZm9yRWFjaCgobGluZSxsaW5lQ291bnQpID0+IHsKICAgICAgICBpZih0aGlzLiRyZWZzWydmaWx0ZXJSb3ctJytsaW5lLmlkZW50aWZpZXJdKSB7CgogICAgICAgICAgbGV0IGZpbHRlciA9IGZpbHRlcnNbbGluZUNvdW50XQogICAgICAgICAgY29uc29sZS5sb2coZmlsdGVyKQogICAgICAgICAgdGhpcy4kcmVmc1snZmlsdGVyUm93LScrbGluZS5pZGVudGlmaWVyXVswXS5zZWxlY3QoZmlsdGVyLmRpc3BsYXksZmlsdGVyLmVsZW1lbnQsImluaXRpYWxpemUiKQogICAgICAgIH0KICAgICAgfSkKCgoKICAgIH0sCiAgICAvL2FkZCBuZXcgbGluZXMKICAgIGFkZExpbmU6IGZ1bmN0aW9uKCkgewogICAgICBsZXQgcHJldmlvdXNRdWVyeSA9IHRoaXMubGluZXNbdGhpcy5saW5lcy5sZW5ndGgtMV0gPT0gdW5kZWZpbmVkID8ge30gOiB0aGlzLmxpbmVzW3RoaXMubGluZXMubGVuZ3RoLTFdLnF1ZXJ5CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhZGRMaW5lJyxwcmV2aW91c1F1ZXJ5KQogICAgfSwKICB9LAoKICBjb21wb25lbnRzOiB7CiAgICBmaWx0ZXJSb3csIG1ldHJpY3MKICB9LAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgIH0KICB9LAoKICBjcmVhdGVkKCkgewoKICB9LAp9Cg=="},{"version":3,"sources":["sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA","file":"sidebar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"col-4 sidebar hidden-md-down\">\n    <h1>Twin DB</h1>\n    <metrics ref=\"metrics\" />\n    <ul>\n      <!-- display filterRow for every lines that is displayed -->\n      <filterRow\n        v-for=\"(line, index) in lines\"\n        :ref=\"'filterRow-'+line.identifier\"\n        :key=\"index\"\n        :line=\"line\"\n      />\n    </ul>\n    <div class=\"addLine\">\n      <button v-on:click=\"addLine\">Add Line</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport filterRow from './filterRow.vue'\nimport metrics from './metrics.vue'\n\nexport default {\n  props: {\n    company: String\n  },\n  computed: {\n    //get lines (incl. color, identifier, filters, and selections) from store\n    lines: {\n      cache: false,\n      get: function(){\n        return this.$store.state.lines\n      }\n    },\n    hasMetrics: {\n      cache: false,\n      get: function() {\n        return this.$store.state.metrics.length > 0 ? true : false\n      }\n    }\n  },\n\n  //if there are no lines on store when page is mounted, add one to always have one line available\n  watch: {\n    hasMetrics: function(newBool) {\n      if(newBool) {\n        this.initializeFromURL(this.$route.query)\n      }\n    },\n    //set filters from URL\n    /*lines: function(newLines){\n      if(newLines) {\n        //console.log(this.$refs['filterRow-'+newLines[0].identifier])\n        this.setFiltersFromURL(this.$route.query)\n      }\n    }*/\n  },\n\n  mounted() {\n\n  },\n\n  methods: {\n    initializeFromURL: function(param) {\n      if(param.lines) {\n        while (param.lines > 0){\n          this.$store.dispatch('addLine')\n          param.lines--\n        }\n      } else {\n        this.$store.dispatch('addLine')\n      }\n\n\n      let metric\n      // if a metric is set in url parameters\n      if(param.metric) {\n        //look for this metric in current metric storage, if you find sth set it, otherwise set the first one\n        metric = this.$store.state.metrics.find(item => item.key ==  param.metric) ? this.$store.state.metrics.find(item => item.key ==  param.metric) : metric = this.$store.state.metrics[0]\n      } else {\n        //if none is passed, just take the first one\n        metric = this.$store.state.metrics[0]\n      }\n      //set the metric\n      this.$refs.metrics.select(metric.key)\n    },\n\n    //please dont hate me, but this gets triggered three times as oten as necessary....\n    setFiltersFromURL: function(param) {\n\n      //find filters\n      let filters = []\n      this.$store.state.filterColumns.forEach(filterColumn => {\n        //console.log(filterColumn) //this is the display name of the columns (e.g. \"Location\")\n        filterColumn.db_columns.forEach(column => {\n          if(param[column]) {\n            //you can have as many values for a given parameter as you have lines (eg. filtering three lines by three different companes. i corresponds to the line count)\n            param[column].split(\",\").forEach((value,lineCount) => {\n              filters[lineCount] = {display: filterColumn.display, element: {filter: column, key: value}}\n            })\n          }\n        })\n      })\n\n\n\n      //iterate over existing lines (in sidebar) and apply filters from URL\n      this.$store.getters.getLines.forEach((line,lineCount) => {\n        if(this.$refs['filterRow-'+line.identifier]) {\n\n          let filter = filters[lineCount]\n          console.log(filter)\n          this.$refs['filterRow-'+line.identifier][0].select(filter.display,filter.element,\"initialize\")\n        }\n      })\n\n\n\n    },\n    //add new lines\n    addLine: function() {\n      let previousQuery = this.lines[this.lines.length-1] == undefined ? {} : this.lines[this.lines.length-1].query\n      this.$store.dispatch('addLine',previousQuery)\n    },\n  },\n\n  components: {\n    filterRow, metrics\n  },\n\n  data() {\n    return {\n    }\n  },\n\n  created() {\n\n  },\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n.sidebar {\n  background-color: #39393B;\n  color: white;\n  min-width: 300px;\n  padding: 0px !important;\n  min-height: 100%;\n}\n\nul {\n  margin: 0;\n  padding: 0\n}\n\n.addLine {\n  margin: 10px 30px;\n}\n.addLine button {\n  background: none;\n  border: 1px solid white;\n  border-radius: 5px;\n  padding: 10px;\n  color: white;\n  width: 100%;\n}\n\n.addLine button:hover {\n  font-weight: bold;\n}\n\n</style>\n"]}]}