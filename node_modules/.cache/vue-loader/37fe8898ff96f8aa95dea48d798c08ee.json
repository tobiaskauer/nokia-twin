{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/App.vue","mtime":1613992543449},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9S2FybGE6d2dodEA0MDA7NzAwJmRpc3BsYXk9c3dhcCcpOwoKLmNvbnRhaW5lci1mbHVpZCB7CiAgcGFkZGluZzogMCAhaW1wb3J0YW50Owp9CgpodG1sLCBib2R5IHsKICBmb250LWZhbWlseTogJ0thcmxhJywgc2Fucy1zZXJpZjsKICBoZWlnaHQ6IDEwMCU7Cn0KCiNhcHAgewogIGZvbnQtZmFtaWx5OiAnS2FybGEnLCBzYW5zLXNlcmlmOwp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div class=\"container-fluid d-flex\">\n    <div class=\"d-flex\">\n      <sidebar />\n      <vis />\n    </div>\n  </div>\n</template>\n\n<script>\nimport sidebar from './components/sidebar.vue'\nimport vis from './components/vis.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    sidebar,\n    vis\n  },\n\n  beforeCreate: function() {\n    //get granularity for data aggregation from URL (if non set or value is not an option, use monthly)\n    let granularity\n    switch(this.$route.query.granularity) {\n      case \"day\": granularity = \"%Y-%m-%d\"; break;\n      case \"week\": granularity = \"%Y-%V\"; break;\n      case \"month\": granularity = \"%Y-%m\"; break;\n      case \"year\": granularity = \"%Y\"; break;\n      default: granularity = \"%Y-%m\"; break;\n    }\n\n    this.$store.state.granularity = granularity\n\n    //set granularity in url in case its not set\n    if(!this.$route.query.granularity) {\n      let route = this.$route.query //get current url parameters as object\n      route.granularity = \"month\" //default\n      let routeString = Object.entries(route).map(e => encodeURIComponent(e[0]) + \"=\" + encodeURIComponent(e[1])).join(\"&\") //parse a string from that object\n      history.pushState({},null,this.$route.path + 'nokiatwin/#/?' + routeString) //write that to URL (CAUTION: vueX store and URL might be inconsistent)\n    }\n\n    //set default table (or take from url)\n    if(!this.$route.query.table) {\n      let route = this.$route.query //get current url parameters as object\n      route.table = \"example\" //default\n      let routeString = Object.entries(route).map(e => encodeURIComponent(e[0]) + \"=\" + encodeURIComponent(e[1])).join(\"&\") //parse a string from that object\n      history.pushState({},null,this.$route.path + 'nokiatwin/#/?' + routeString) //write that to URL (CAUTION: vueX store and URL might be inconsistent)\n      this.$store.commit('setTable','example') //load metrics and filters --> get errors and display them\n    } else {\n      this.$store.commit('setTable',this.$route.query.table) //load metrics and filters --> get errors and display them\n    }\n\n\n    this.$store.dispatch('getMetricsAndFilters') //load metrics and filters\n    this.$store.dispatch('getEvents') //load metrics and filters\n  },\n  methods: {\n\n  }\n}\n</script>\n\n<style>\n@import url('https://fonts.googleapis.com/css2?family=Karla:wght@400;700&display=swap');\n\n.container-fluid {\n  padding: 0 !important;\n}\n\nhtml, body {\n  font-family: 'Karla', sans-serif;\n  height: 100%;\n}\n\n#app {\n  font-family: 'Karla', sans-serif;\n}\n</style>\n"]}]}