{"remainingRequest":"/Users/sanja7s/7s/One7s/Dropbox/projects7s/HEALTH_APPLICATIONS/glassdoor/glassdoor-VIS/Nokia-Twin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sanja7s/7s/One7s/Dropbox/projects7s/HEALTH_APPLICATIONS/glassdoor/glassdoor-VIS/Nokia-Twin/src/components/sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sanja7s/7s/One7s/Dropbox/projects7s/HEALTH_APPLICATIONS/glassdoor/glassdoor-VIS/Nokia-Twin/src/components/sidebar.vue","mtime":1614939964146},{"path":"/Users/sanja7s/7s/One7s/Dropbox/projects7s/HEALTH_APPLICATIONS/glassdoor/glassdoor-VIS/Nokia-Twin/node_modules/cache-loader/dist/cjs.js","mtime":1614939958022},{"path":"/Users/sanja7s/7s/One7s/Dropbox/projects7s/HEALTH_APPLICATIONS/glassdoor/glassdoor-VIS/Nokia-Twin/node_modules/babel-loader/lib/index.js","mtime":1614939957453},{"path":"/Users/sanja7s/7s/One7s/Dropbox/projects7s/HEALTH_APPLICATIONS/glassdoor/glassdoor-VIS/Nokia-Twin/node_modules/cache-loader/dist/cjs.js","mtime":1614939958022},{"path":"/Users/sanja7s/7s/One7s/Dropbox/projects7s/HEALTH_APPLICATIONS/glassdoor/glassdoor-VIS/Nokia-Twin/node_modules/vue-loader/lib/index.js","mtime":1614939962338}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBmaWx0ZXJSb3cgZnJvbSAnLi9maWx0ZXJSb3cudnVlJwppbXBvcnQgbWV0cmljcyBmcm9tICcuL21ldHJpY3MudnVlJwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzZWxlY3RlZE1ldHJpYzogdW5kZWZpbmVkLAogICAgICBsaW5lczogdW5kZWZpbmVkLAogICAgfQogIH0sCgogIGNvbXB1dGVkOiB7CiAgICBtZXRyaWNzOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm1ldHJpY3MKICAgIH0sCgogICAgZmlsdGVyQ29sdW1uczogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiAgdGhpcy4kc3RvcmUuc3RhdGUuZmlsdGVyQ29sdW1ucwogICAgfSwKCiAgICBpbnRybzogZnVuY3Rpb24oKSB7CiAgICAgIGlmKCF0aGlzLiRzdG9yZS5zdGF0ZS50ZXh0LmludHJvKSByZXR1cm4gbnVsbAogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUudGV4dC5pbnRybwogICAgfSwKCiAgICB0aXRsZTogZnVuY3Rpb24oKSB7CiAgICAgIGlmKCF0aGlzLiRzdG9yZS5zdGF0ZS50ZXh0LnRpdGxlKSByZXR1cm4gIk9wZW4gSW5jIgogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUudGV4dC50aXRsZQogICAgfQogIH0sCgogIC8vaWYgdGhlcmUgYXJlIG5vIGxpbmVzIG9uIHN0b3JlIHdoZW4gcGFnZSBpcyBtb3VudGVkLCBhZGQgb25lIHRvIGFsd2F5cyBoYXZlIG9uZSBsaW5lIGF2YWlsYWJsZQogIHdhdGNoOiB7CiAgICBtZXRyaWNzOiBmdW5jdGlvbihuZXdNZXRyaWNzKSB7CiAgICAgIGlmKG5ld01ldHJpY3MubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMuc2V0TWV0cmljKCkKICAgICAgfQogICAgfSwKCiAgICBmaWx0ZXJDb2x1bW5zOiBmdW5jdGlvbihuZXdGaWx0ZXJDb2x1bW5zKXsKICAgICAgaWYobmV3RmlsdGVyQ29sdW1ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5zZXRMaW5lcygpOwogICAgICB9CiAgICB9CiAgfSwKCiAgbW91bnRlZCgpIHsKCiAgfSwKCiAgbWV0aG9kczogewogICAgc2V0TWV0cmljOiBmdW5jdGlvbigpIHsKCiAgICAgIC8vY2hlY2sgaWYgVVJMIGhhcyBhIG1ldHJpYyAoYW5kIHdoZXRoZXIgdGhhdCBtZXRyaWMgaXMgYWN0dWFsbHkgaW4gdGhlIGN1cnJlbnQgdGFibGUpCiAgICAgIGlmKHRoaXMuJHJvdXRlLnF1ZXJ5Lm1ldHJpYyAmJiB0aGlzLm1ldHJpY3MubWFwKGU9PmUua2V5KS5pbmRleE9mKHRoaXMuJHJvdXRlLnF1ZXJ5Lm1ldHJpYykgIT09IC0xKSB7CiAgICAgICAgLy9pZiBzbywgcGFzcyB0aGF0IG1ldHJpYyB0byB0aGUgY29tcG9uZW50IGFzIHByb3BlcnR5CiAgICAgICAgdGhpcy5zZWxlY3RlZE1ldHJpYyA9IHRoaXMuJHJvdXRlLnF1ZXJ5Lm1ldHJpYwoKICAgICAgfSBlbHNlIHsKICAgICAgICAvL2lmIG5vdCBwYXNzZWQgb3Igbm90IGZvdW5kLCBqdXN0IHRha2UgdGhlIGZpcnN0IGVsZW1lbnQKICAgICAgICB0aGlzLnNlbGVjdGVkTWV0cmljID0gdGhpcy5tZXRyaWNzWzBdLmtleQogICAgICB9CiAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnc2V0QWN0aXZlTWV0cmljJywgdGhpcy5tZXRyaWNzLmZpbmQobWV0cmljID0+IG1ldHJpYy5rZXkgPT0gdGhpcy5zZWxlY3RlZE1ldHJpYykpIC8vbWFrZSBhY3RpdmUgKHNvIHRoYXQgd2Ugbm93IHRoZSBzY2FsZSBhbmQgY2FuIGRpc3BsYXkgYXMgbGFiZWwgb24geWF4aXMpCiAgICB9LAoKICAgIHNldExpbmVzOiBmdW5jdGlvbigpIHsKCiAgICAgIC8vZm9yIGVhY2ggbGluZSB3ZSBuZWVkLCBzZXQgc29tZSBxdWVyaWVzCiAgICAgIGxldCBsaW5lc0NvdW50ID0gKHRoaXMuJHJvdXRlLnF1ZXJ5LmxpbmVzKSA/IHRoaXMuJHJvdXRlLnF1ZXJ5LmxpbmVzIDogMQogICAgICBmb3IobGV0IGk9MDtpPGxpbmVzQ291bnQ7aSsrKSB7CgoKICAgICAgICAvL3NlYXJjaCBmb3IgZmlsdGVycyBpbiB0aGUgdXJsIHRoYXQgbWF0Y2ggdGhlIG9uZXMgd2UgaGF2ZSBpbiB0aGUgZGF0YWJhc2UKICAgICAgICBsZXQgcXVlcnkgPSB7bWV0cmljOiB0aGlzLnNlbGVjdGVkTWV0cmljfQogICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLmZpbHRlckNvbHVtbnMuZm9yRWFjaChmaWx0ZXJDb2x1bW4gPT4gewogICAgICAgICAgZmlsdGVyQ29sdW1uLmRiX2NvbHVtbnMuZm9yRWFjaChjb2x1bW4gPT4gewogICAgICAgICAgICBpZih0aGlzLiRyb3V0ZS5xdWVyeVtjb2x1bW5dKSB7CiAgICAgICAgICAgICAgaWYodGhpcy4kcm91dGUucXVlcnlbY29sdW1uXS5zcGxpdCgiLCIpW2ldKSB7IC8vZG8gbm90IGNvbnNpZGVyIGVtcHR5IHZhbHVlcwogICAgICAgICAgICAgICAgcXVlcnlbY29sdW1uXSA9IHRoaXMuJHJvdXRlLnF1ZXJ5W2NvbHVtbl0uc3BsaXQoIiwiKVtpXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICB9KQogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhZGRMaW5lJyxxdWVyeSkKICAgICAgfQogICAgICB0aGlzLmxpbmVzID0gdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXRMaW5lczsKICAgIH0sCgogICAgLy9hZGQgbmV3IGxpbmVzCiAgICBhZGRMaW5lOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2FkZExpbmUnKQoKICAgICAgbGV0IHJvdXRlID0gdGhpcy4kcm91dGUucXVlcnkgLy9nZXQgY3VycmVudCB1cmwgcGFyYW1ldGVycyBhcyBvYmplY3QKICAgICAgcm91dGUubGluZXMgPSB0aGlzLmxpbmVzLmxlbmd0aAogICAgICBsZXQgcm91dGVTdHJpbmcgPSBPYmplY3QuZW50cmllcyhyb3V0ZSkubWFwKGUgPT4gZW5jb2RlVVJJQ29tcG9uZW50KGVbMF0pICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KGVbMV0pKS5qb2luKCImIikgLy9wYXJzZSBhIHN0cmluZyBmcm9tIHRoYXQgb2JqZWN0CiAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LG51bGwsdGhpcy4kcm91dGUucGF0aCArICdub2tpYXR3aW4vIy8/JyArIHJvdXRlU3RyaW5nKSAvL3dyaXRlIHRoYXQgdG8gVVJMIChDQVVUSU9OOiB2dWVYIHN0b3JlIGFuZCBVUkwgbWlnaHQgYmUgaW5jb25zaXN0ZW50KQogICAgfSwKICB9LAoKICBjb21wb25lbnRzOiB7CiAgICBmaWx0ZXJSb3csIG1ldHJpY3MKICB9LAoKICBjcmVhdGVkKCkgewoKICB9LAp9Cg=="},{"version":3,"sources":["sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA","file":"sidebar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"sidebar flex-fill\">\n    <h1>{{title}}</h1>\n    <p class=\"intro\" v-if=\"intro\" v-html=\"intro\" />\n    <metrics v-if=\"selectedMetric\" ref=\"metrics\" :selected=\"selectedMetric\"/>\n    <div class=\"flex-fill\" style=\"overflow: scroll\">\n      <div class=\"addLine\">\n        <button v-on:click=\"addLine\">Add Line</button>\n      </div>\n      <p style=\"padding: 0px 30px\">Select filter to change visualization:</p>\n      <ul>\n        <!-- display filterRow for every lines that is displayed -->\n        <filterRow\n          v-for=\"(line, index) in lines\"\n          :ref=\"'filterRow-'+line.identifier\"\n          :key=\"index\"\n          :line=\"line\"\n        />\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport filterRow from './filterRow.vue'\nimport metrics from './metrics.vue'\n\nexport default {\n  data() {\n    return {\n      selectedMetric: undefined,\n      lines: undefined,\n    }\n  },\n\n  computed: {\n    metrics: function() {\n      return this.$store.state.metrics\n    },\n\n    filterColumns: function() {\n      return  this.$store.state.filterColumns\n    },\n\n    intro: function() {\n      if(!this.$store.state.text.intro) return null\n      return this.$store.state.text.intro\n    },\n\n    title: function() {\n      if(!this.$store.state.text.title) return \"Open Inc\"\n      return this.$store.state.text.title\n    }\n  },\n\n  //if there are no lines on store when page is mounted, add one to always have one line available\n  watch: {\n    metrics: function(newMetrics) {\n      if(newMetrics.length > 0) {\n        this.setMetric()\n      }\n    },\n\n    filterColumns: function(newFilterColumns){\n      if(newFilterColumns.length > 0) {\n        this.setLines();\n      }\n    }\n  },\n\n  mounted() {\n\n  },\n\n  methods: {\n    setMetric: function() {\n\n      //check if URL has a metric (and whether that metric is actually in the current table)\n      if(this.$route.query.metric && this.metrics.map(e=>e.key).indexOf(this.$route.query.metric) !== -1) {\n        //if so, pass that metric to the component as property\n        this.selectedMetric = this.$route.query.metric\n\n      } else {\n        //if not passed or not found, just take the first element\n        this.selectedMetric = this.metrics[0].key\n      }\n      this.$store.commit('setActiveMetric', this.metrics.find(metric => metric.key == this.selectedMetric)) //make active (so that we now the scale and can display as label on yaxis)\n    },\n\n    setLines: function() {\n\n      //for each line we need, set some queries\n      let linesCount = (this.$route.query.lines) ? this.$route.query.lines : 1\n      for(let i=0;i<linesCount;i++) {\n\n\n        //search for filters in the url that match the ones we have in the database\n        let query = {metric: this.selectedMetric}\n        this.$store.state.filterColumns.forEach(filterColumn => {\n          filterColumn.db_columns.forEach(column => {\n            if(this.$route.query[column]) {\n              if(this.$route.query[column].split(\",\")[i]) { //do not consider empty values\n                query[column] = this.$route.query[column].split(\",\")[i]\n              }\n            }\n          })\n        })\n        this.$store.dispatch('addLine',query)\n      }\n      this.lines = this.$store.getters.getLines;\n    },\n\n    //add new lines\n    addLine: function() {\n      this.$store.dispatch('addLine')\n\n      let route = this.$route.query //get current url parameters as object\n      route.lines = this.lines.length\n      let routeString = Object.entries(route).map(e => encodeURIComponent(e[0]) + \"=\" + encodeURIComponent(e[1])).join(\"&\") //parse a string from that object\n      history.pushState({},null,this.$route.path + 'nokiatwin/#/?' + routeString) //write that to URL (CAUTION: vueX store and URL might be inconsistent)\n    },\n  },\n\n  components: {\n    filterRow, metrics\n  },\n\n  created() {\n\n  },\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n.sidebar {\n  background-color: #39393B;\n  color: white;\n  min-width: 350px;\n  padding: 0px !important;\n  //min-height: 100%;\n}\n\nul {\n  margin: 0;\n  padding: 0\n}\n\np.intro {\n  margin: 10px 30px;\n  font-size: .8em;\n  text-align: center;\n}\n\np.intro a {\n  color: white !important;\n  text-decoration: underline;\n}\n\n.addLine {\n  margin: 10px 30px;\n}\n.addLine button {\n  background: none;\n  border: 1px solid white;\n  border-radius: 5px;\n  padding: 10px;\n  color: white;\n  width: 100%;\n}\n\n.addLine button:hover {\n  font-weight: bold;\n}\n\n</style>\n"]}]}