{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue","mtime":1613128916562},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBmaWx0ZXJSb3cgZnJvbSAnLi9maWx0ZXJSb3cudnVlJwppbXBvcnQgbWV0cmljcyBmcm9tICcuL21ldHJpY3MudnVlJwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzZWxlY3RlZE1ldHJpYzogdW5kZWZpbmVkLAogICAgICBsaW5lczogdW5kZWZpbmVkLAogICAgICB0aXRsZTogJ0hlbGxvIFNhbmphJwogICAgfQogIH0sCgogIGNvbXB1dGVkOiB7CiAgICAvKi8vZ2V0IGxpbmVzIChpbmNsLiBjb2xvciwgaWRlbnRpZmllciwgZmlsdGVycywgYW5kIHNlbGVjdGlvbnMpIGZyb20gc3RvcmUKICAgIGxpbmVzOiB7CiAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUubGluZXMKICAgICAgfQogICAgfSwqLwoKICAgIG1ldHJpY3M6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUubWV0cmljcwogICAgfSwKCiAgICBmaWx0ZXJDb2x1bW5zOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuICB0aGlzLiRzdG9yZS5zdGF0ZS5maWx0ZXJDb2x1bW5zCiAgICB9CgoKICB9LAoKICAvL2lmIHRoZXJlIGFyZSBubyBsaW5lcyBvbiBzdG9yZSB3aGVuIHBhZ2UgaXMgbW91bnRlZCwgYWRkIG9uZSB0byBhbHdheXMgaGF2ZSBvbmUgbGluZSBhdmFpbGFibGUKICB3YXRjaDogewogICAgbWV0cmljczogZnVuY3Rpb24obmV3TWV0cmljcykgewogICAgICBpZihuZXdNZXRyaWNzLmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLnNldE1ldHJpYygpCiAgICAgIH0KICAgIH0sCgogICAgZmlsdGVyQ29sdW1uczogZnVuY3Rpb24obmV3RmlsdGVyQ29sdW1ucyl7CiAgICAgIGlmKG5ld0ZpbHRlckNvbHVtbnMubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMuc2V0TGluZXMoKTsKICAgICAgfQogICAgfQoKICAgIC8qLy9zZXQgZmlsdGVycyBmcm9tIFVSTAogICAgbGluZXM6IGZ1bmN0aW9uKG5ld0xpbmVzKXsKICAgICAgaWYobmV3TGluZXMpIHsKICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMuJHJlZnNbJ2ZpbHRlclJvdy0nK25ld0xpbmVzWzBdLmlkZW50aWZpZXJdKQogICAgICAgIHRoaXMuc2V0RmlsdGVyc0Zyb21VUkwodGhpcy4kcm91dGUucXVlcnkpCiAgICAgIH0KICAgIH0qLwogIH0sCgogIG1vdW50ZWQoKSB7CgogIH0sCgogIG1ldGhvZHM6IHsKICAgIHNldE1ldHJpYzogZnVuY3Rpb24oKSB7CgogICAgICAvL2NoZWNrIGlmIFVSTCBoYXMgYSBtZXRyaWMgKGFuZCB3aGV0aGVyIHRoYXQgbWV0cmljIGlzIGFjdHVhbGx5IGluIHRoZSBjdXJyZW50IHRhYmxlKQogICAgICBpZih0aGlzLiRyb3V0ZS5xdWVyeS5tZXRyaWMgJiYgdGhpcy5tZXRyaWNzLm1hcChlPT5lLmtleSkuaW5kZXhPZih0aGlzLiRyb3V0ZS5xdWVyeS5tZXRyaWMpICE9PSAtMSkgewogICAgICAgIC8vaWYgc28sIHBhc3MgdGhhdCBtZXRyaWMgdG8gdGhlIGNvbXBvbmVudCBhcyBwcm9wZXJ0eQogICAgICAgIHRoaXMuc2VsZWN0ZWRNZXRyaWMgPSB0aGlzLiRyb3V0ZS5xdWVyeS5tZXRyaWMKCiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy9pZiBub3QgcGFzc2VkIG9yIG5vdCBmb3VuZCwganVzdCB0YWtlIHRoZSBmaXJzdCBlbGVtZW50CiAgICAgICAgdGhpcy5zZWxlY3RlZE1ldHJpYyA9IHRoaXMubWV0cmljc1swXS5rZXkKICAgICAgfQogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3NldEFjdGl2ZU1ldHJpYycsIHRoaXMubWV0cmljcy5maW5kKG1ldHJpYyA9PiBtZXRyaWMua2V5ID09IHRoaXMuc2VsZWN0ZWRNZXRyaWMpKSAvL21ha2UgYWN0aXZlIChzbyB0aGF0IHdlIG5vdyB0aGUgc2NhbGUgYW5kIGNhbiBkaXNwbGF5IGFzIGxhYmVsIG9uIHlheGlzKQogICAgfSwKCiAgICBzZXRMaW5lczogZnVuY3Rpb24oKSB7CgogICAgICAvL2ZvciBlYWNoIGxpbmUgd2UgbmVlZCwgc2V0IHNvbWUgcXVlcmllcwogICAgICBsZXQgbGluZXNDb3VudCA9ICh0aGlzLiRyb3V0ZS5xdWVyeS5saW5lcykgPyB0aGlzLiRyb3V0ZS5xdWVyeS5saW5lcyA6IDEKICAgICAgZm9yKGxldCBpPTA7aTxsaW5lc0NvdW50O2krKykgewoKCiAgICAgICAgLy9zZWFyY2ggZm9yIGZpbHRlcnMgaW4gdGhlIHVybCB0aGF0IG1hdGNoIHRoZSBvbmVzIHdlIGhhdmUgaW4gdGhlIGRhdGFiYXNlCiAgICAgICAgbGV0IHF1ZXJ5ID0ge21ldHJpYzogdGhpcy5zZWxlY3RlZE1ldHJpY30KICAgICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5maWx0ZXJDb2x1bW5zLmZvckVhY2goZmlsdGVyQ29sdW1uID0+IHsKICAgICAgICAgIGZpbHRlckNvbHVtbi5kYl9jb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHsKICAgICAgICAgICAgaWYodGhpcy4kcm91dGUucXVlcnlbY29sdW1uXSkgewogICAgICAgICAgICAgIGlmKHRoaXMuJHJvdXRlLnF1ZXJ5W2NvbHVtbl0uc3BsaXQoIiwiKVtpXSkgeyAvL2RvIG5vdCBjb25zaWRlciBlbXB0eSB2YWx1ZXMKICAgICAgICAgICAgICAgIHF1ZXJ5W2NvbHVtbl0gPSB0aGlzLiRyb3V0ZS5xdWVyeVtjb2x1bW5dLnNwbGl0KCIsIilbaV0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgfSkKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnYWRkTGluZScscXVlcnkpCiAgICAgIH0KICAgICAgdGhpcy5saW5lcyA9IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0TGluZXM7CiAgICB9LAoKICAgIC8qaW5pdGlhbGl6ZUZyb21VUkw6IGZ1bmN0aW9uKHBhcmFtKSB7CiAgICAgIGlmKHBhcmFtLmxpbmVzKSB7CiAgICAgICAgd2hpbGUgKHBhcmFtLmxpbmVzID4gMCl7CiAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnYWRkTGluZScpCiAgICAgICAgICBwYXJhbS5saW5lcy0tCiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhZGRMaW5lJykKICAgICAgfQoKCiAgICAgIGxldCBtZXRyaWMKICAgICAgLy8gaWYgYSBtZXRyaWMgaXMgc2V0IGluIHVybCBwYXJhbWV0ZXJzCiAgICAgIGlmKHBhcmFtLm1ldHJpYykgewogICAgICAgIC8vbG9vayBmb3IgdGhpcyBtZXRyaWMgaW4gY3VycmVudCBtZXRyaWMgc3RvcmFnZSwgaWYgeW91IGZpbmQgc3RoIHNldCBpdCwgb3RoZXJ3aXNlIHNldCB0aGUgZmlyc3Qgb25lCiAgICAgICAgbWV0cmljID0gdGhpcy4kc3RvcmUuc3RhdGUubWV0cmljcy5maW5kKGl0ZW0gPT4gaXRlbS5rZXkgPT0gIHBhcmFtLm1ldHJpYykgPyB0aGlzLiRzdG9yZS5zdGF0ZS5tZXRyaWNzLmZpbmQoaXRlbSA9PiBpdGVtLmtleSA9PSAgcGFyYW0ubWV0cmljKSA6IG1ldHJpYyA9IHRoaXMuJHN0b3JlLnN0YXRlLm1ldHJpY3NbMF0KICAgICAgfSBlbHNlIHsKICAgICAgICAvL2lmIG5vbmUgaXMgcGFzc2VkLCBqdXN0IHRha2UgdGhlIGZpcnN0IG9uZQogICAgICAgIG1ldHJpYyA9IHRoaXMuJHN0b3JlLnN0YXRlLm1ldHJpY3NbMF0KICAgICAgfQogICAgICAvL3NldCB0aGUgbWV0cmljCiAgICAgIHRoaXMuJHJlZnMubWV0cmljcy5zZWxlY3QobWV0cmljKQogICAgfSwqLwoKICAgIC8vcGxlYXNlIGRvbnQgaGF0ZSBtZSwgYnV0IHRoaXMgZ2V0cyB0cmlnZ2VyZWQgdGhyZWUgdGltZXMgYXMgb3RlbiBhcyBuZWNlc3NhcnkuLi4uCiAgICAvKnNldEZpbHRlcnNGcm9tVVJMOiBmdW5jdGlvbihwYXJhbSkgewoKICAgICAgLy9maW5kIGZpbHRlcnMKICAgICAgbGV0IGZpbHRlcnMgPSBbXQogICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5maWx0ZXJDb2x1bW5zLmZvckVhY2goZmlsdGVyQ29sdW1uID0+IHsKICAgICAgICAvL2NvbnNvbGUubG9nKGZpbHRlckNvbHVtbikgLy90aGlzIGlzIHRoZSBkaXNwbGF5IG5hbWUgb2YgdGhlIGNvbHVtbnMgKGUuZy4gIkxvY2F0aW9uIikKICAgICAgICBmaWx0ZXJDb2x1bW4uZGJfY29sdW1ucy5mb3JFYWNoKGNvbHVtbiA9PiB7CiAgICAgICAgICBpZihwYXJhbVtjb2x1bW5dKSB7CiAgICAgICAgICAgIC8veW91IGNhbiBoYXZlIGFzIG1hbnkgdmFsdWVzIGZvciBhIGdpdmVuIHBhcmFtZXRlciBhcyB5b3UgaGF2ZSBsaW5lcyAoZWcuIGZpbHRlcmluZyB0aHJlZSBsaW5lcyBieSB0aHJlZSBkaWZmZXJlbnQgY29tcGFuZXMuIGkgY29ycmVzcG9uZHMgdG8gdGhlIGxpbmUgY291bnQpCiAgICAgICAgICAgIHBhcmFtW2NvbHVtbl0uc3BsaXQoIiwiKS5mb3JFYWNoKCh2YWx1ZSxsaW5lQ291bnQpID0+IHsKICAgICAgICAgICAgICBmaWx0ZXJzW2xpbmVDb3VudF0gPSB7ZGlzcGxheTogZmlsdGVyQ29sdW1uLmRpc3BsYXksIGVsZW1lbnQ6IHtmaWx0ZXI6IGNvbHVtbiwga2V5OiB2YWx1ZX19CiAgICAgICAgICAgIH0pCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgfSkKCgoKICAgICAgLy9pdGVyYXRlIG92ZXIgZXhpc3RpbmcgbGluZXMgKGluIHNpZGViYXIpIGFuZCBhcHBseSBmaWx0ZXJzIGZyb20gVVJMCiAgICAgIHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0TGluZXMuZm9yRWFjaCgobGluZSxsaW5lQ291bnQpID0+IHsKICAgICAgICBpZih0aGlzLiRyZWZzWydmaWx0ZXJSb3ctJytsaW5lLmlkZW50aWZpZXJdKSB7CgogICAgICAgICAgbGV0IGZpbHRlciA9IGZpbHRlcnNbbGluZUNvdW50XQogICAgICAgICAgY29uc29sZS5sb2coZmlsdGVyKQogICAgICAgICAgdGhpcy4kcmVmc1snZmlsdGVyUm93LScrbGluZS5pZGVudGlmaWVyXVswXS5zZWxlY3QoZmlsdGVyLmRpc3BsYXksZmlsdGVyLmVsZW1lbnQsImluaXRpYWxpemUiKQogICAgICAgIH0KICAgICAgfSkKCgoKICAgIH0sKi8KICAgIC8vYWRkIG5ldyBsaW5lcwogICAgYWRkTGluZTogZnVuY3Rpb24oKSB7CiAgICAgIC8vbGV0IHByZXZpb3VzUXVlcnkgPSB0aGlzLmxpbmVzW3RoaXMubGluZXMubGVuZ3RoLTFdID09IHVuZGVmaW5lZCA/IHt9IDogdGhpcy5saW5lc1t0aGlzLmxpbmVzLmxlbmd0aC0xXS5xdWVyeQogICAgICAvL2R1cGxpY2F0aW5nIHRoZSBwcmV2aW91cyBxdWVyeSB0byBhZGQgaXQgdG8gdGhlIG5leHQgdGVjaG5pY2FsbHkgd29ya3MsIGJ1dCB0aGUgdHdvIGluc3RhbmNlcyBzZWVtIGRlcGVuZGVudCBvbiBhbm90aGVyICh3aGljaCBpcyBub3QgZXhwZWN0ZWQgYmVoYXZpb3IpCiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhZGRMaW5lJykKCiAgICAgIGxldCByb3V0ZSA9IHRoaXMuJHJvdXRlLnF1ZXJ5IC8vZ2V0IGN1cnJlbnQgdXJsIHBhcmFtZXRlcnMgYXMgb2JqZWN0CiAgICAgIHJvdXRlLmxpbmVzID0gdGhpcy5saW5lcy5sZW5ndGgKICAgICAgbGV0IHJvdXRlU3RyaW5nID0gT2JqZWN0LmVudHJpZXMocm91dGUpLm1hcChlID0+IGVuY29kZVVSSUNvbXBvbmVudChlWzBdKSArICI9IiArIGVuY29kZVVSSUNvbXBvbmVudChlWzFdKSkuam9pbigiJiIpIC8vcGFyc2UgYSBzdHJpbmcgZnJvbSB0aGF0IG9iamVjdAogICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7fSxudWxsLHRoaXMuJHJvdXRlLnBhdGggKyAnbm9raWF0d2luLyMvPycgKyByb3V0ZVN0cmluZykgLy93cml0ZSB0aGF0IHRvIFVSTCAoQ0FVVElPTjogdnVlWCBzdG9yZSBhbmQgVVJMIG1pZ2h0IGJlIGluY29uc2lzdGVudCkKICAgIH0sCiAgfSwKCiAgY29tcG9uZW50czogewogICAgZmlsdGVyUm93LCBtZXRyaWNzCiAgfSwKCiAgY3JlYXRlZCgpIHsKCiAgfSwKfQo="},{"version":3,"sources":["sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA","file":"sidebar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"col-4 sidebar hidden-md-down\">\n    <h1>{{title}}</h1>\n    <metrics v-if=\"selectedMetric\" ref=\"metrics\" :selected=\"selectedMetric\"/>\n    <div class=\"addLine\">\n      <button v-on:click=\"addLine\">Add Line</button>\n    </div>\n    <p style=\"padding: 0px 30px\">Select filter to change visualization:</p>\n    <ul>\n      <!-- display filterRow for every lines that is displayed -->\n      <filterRow\n        v-for=\"(line, index) in lines\"\n        :ref=\"'filterRow-'+line.identifier\"\n        :key=\"index\"\n        :line=\"line\"\n      />\n    </ul>\n\n  </div>\n</template>\n\n<script>\nimport filterRow from './filterRow.vue'\nimport metrics from './metrics.vue'\n\nexport default {\n  data() {\n    return {\n      selectedMetric: undefined,\n      lines: undefined,\n      title: 'Hello Sanja'\n    }\n  },\n\n  computed: {\n    /*//get lines (incl. color, identifier, filters, and selections) from store\n    lines: {\n      get: function(){\n        return this.$store.state.lines\n      }\n    },*/\n\n    metrics: function() {\n      return this.$store.state.metrics\n    },\n\n    filterColumns: function() {\n      return  this.$store.state.filterColumns\n    }\n\n\n  },\n\n  //if there are no lines on store when page is mounted, add one to always have one line available\n  watch: {\n    metrics: function(newMetrics) {\n      if(newMetrics.length > 0) {\n        this.setMetric()\n      }\n    },\n\n    filterColumns: function(newFilterColumns){\n      if(newFilterColumns.length > 0) {\n        this.setLines();\n      }\n    }\n\n    /*//set filters from URL\n    lines: function(newLines){\n      if(newLines) {\n        //console.log(this.$refs['filterRow-'+newLines[0].identifier])\n        this.setFiltersFromURL(this.$route.query)\n      }\n    }*/\n  },\n\n  mounted() {\n\n  },\n\n  methods: {\n    setMetric: function() {\n\n      //check if URL has a metric (and whether that metric is actually in the current table)\n      if(this.$route.query.metric && this.metrics.map(e=>e.key).indexOf(this.$route.query.metric) !== -1) {\n        //if so, pass that metric to the component as property\n        this.selectedMetric = this.$route.query.metric\n\n      } else {\n        //if not passed or not found, just take the first element\n        this.selectedMetric = this.metrics[0].key\n      }\n      this.$store.commit('setActiveMetric', this.metrics.find(metric => metric.key == this.selectedMetric)) //make active (so that we now the scale and can display as label on yaxis)\n    },\n\n    setLines: function() {\n\n      //for each line we need, set some queries\n      let linesCount = (this.$route.query.lines) ? this.$route.query.lines : 1\n      for(let i=0;i<linesCount;i++) {\n\n\n        //search for filters in the url that match the ones we have in the database\n        let query = {metric: this.selectedMetric}\n        this.$store.state.filterColumns.forEach(filterColumn => {\n          filterColumn.db_columns.forEach(column => {\n            if(this.$route.query[column]) {\n              if(this.$route.query[column].split(\",\")[i]) { //do not consider empty values\n                query[column] = this.$route.query[column].split(\",\")[i]\n              }\n            }\n          })\n        })\n        this.$store.dispatch('addLine',query)\n      }\n      this.lines = this.$store.getters.getLines;\n    },\n\n    /*initializeFromURL: function(param) {\n      if(param.lines) {\n        while (param.lines > 0){\n          this.$store.dispatch('addLine')\n          param.lines--\n        }\n      } else {\n        this.$store.dispatch('addLine')\n      }\n\n\n      let metric\n      // if a metric is set in url parameters\n      if(param.metric) {\n        //look for this metric in current metric storage, if you find sth set it, otherwise set the first one\n        metric = this.$store.state.metrics.find(item => item.key ==  param.metric) ? this.$store.state.metrics.find(item => item.key ==  param.metric) : metric = this.$store.state.metrics[0]\n      } else {\n        //if none is passed, just take the first one\n        metric = this.$store.state.metrics[0]\n      }\n      //set the metric\n      this.$refs.metrics.select(metric)\n    },*/\n\n    //please dont hate me, but this gets triggered three times as oten as necessary....\n    /*setFiltersFromURL: function(param) {\n\n      //find filters\n      let filters = []\n      this.$store.state.filterColumns.forEach(filterColumn => {\n        //console.log(filterColumn) //this is the display name of the columns (e.g. \"Location\")\n        filterColumn.db_columns.forEach(column => {\n          if(param[column]) {\n            //you can have as many values for a given parameter as you have lines (eg. filtering three lines by three different companes. i corresponds to the line count)\n            param[column].split(\",\").forEach((value,lineCount) => {\n              filters[lineCount] = {display: filterColumn.display, element: {filter: column, key: value}}\n            })\n          }\n        })\n      })\n\n\n\n      //iterate over existing lines (in sidebar) and apply filters from URL\n      this.$store.getters.getLines.forEach((line,lineCount) => {\n        if(this.$refs['filterRow-'+line.identifier]) {\n\n          let filter = filters[lineCount]\n          console.log(filter)\n          this.$refs['filterRow-'+line.identifier][0].select(filter.display,filter.element,\"initialize\")\n        }\n      })\n\n\n\n    },*/\n    //add new lines\n    addLine: function() {\n      //let previousQuery = this.lines[this.lines.length-1] == undefined ? {} : this.lines[this.lines.length-1].query\n      //duplicating the previous query to add it to the next technically works, but the two instances seem dependent on another (which is not expected behavior)\n      this.$store.dispatch('addLine')\n\n      let route = this.$route.query //get current url parameters as object\n      route.lines = this.lines.length\n      let routeString = Object.entries(route).map(e => encodeURIComponent(e[0]) + \"=\" + encodeURIComponent(e[1])).join(\"&\") //parse a string from that object\n      history.pushState({},null,this.$route.path + 'nokiatwin/#/?' + routeString) //write that to URL (CAUTION: vueX store and URL might be inconsistent)\n    },\n  },\n\n  components: {\n    filterRow, metrics\n  },\n\n  created() {\n\n  },\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n.sidebar {\n  background-color: #39393B;\n  color: white;\n  min-width: 300px;\n  padding: 0px !important;\n  min-height: 100%;\n}\n\nul {\n  margin: 0;\n  padding: 0\n}\n\n.addLine {\n  margin: 10px 30px;\n}\n.addLine button {\n  background: none;\n  border: 1px solid white;\n  border-radius: 5px;\n  padding: 10px;\n  color: white;\n  width: 100%;\n}\n\n.addLine button:hover {\n  font-weight: bold;\n}\n\n</style>\n"]}]}