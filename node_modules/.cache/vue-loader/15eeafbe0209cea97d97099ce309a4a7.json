{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/metrics.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/metrics.vue","mtime":1607076642258},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnCgpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGFjdGl2ZTogbnVsbAogICAgfQogIH0sCgogIHByb3BzOiB7CiAgICBzZWxlY3RlZDogU3RyaW5nCiAgfSwKCgogIGNvbXB1dGVkOiB7CiAgICBtZXRyaWNzOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm1ldHJpY3M7CiAgICB9CiAgfSwKCiAgY3JlYXRlZCAoKSB7CiAgICB0aGlzLmFjdGl2ZSA9IHRoaXMuc2VsZWN0ZWQKICB9LAoKICBtb3VudGVkICgpIHsKICB9LAoKICBtZXRob2RzOiB7CiAgICAvL2VtaXQgc2VsZWN0ZWQgZWxlbWVudCB0byBzaWRlYmFyLCB3aGljaCB3aWxsIHVwZGF0ZSB0aGUgcXVlcnkKICAgIHNlbGVjdDogZnVuY3Rpb24oaXRlbSkgewogICAgICBpZihpdGVtLmtleSAhPSB0aGlzLmFjdGl2ZSl7CiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdzZXRBY3RpdmVNZXRyaWMnLCBpdGVtKSAvL3NldCBxdWVyeQogICAgICAgIHRoaXMuYWN0aXZlID0gaXRlbS5rZXkgLy9tYWtlIGVsZW1lbnQgYWN0aXZlCgogICAgICAgIGxldCByb3V0ZSA9IHRoaXMuJHJvdXRlLnF1ZXJ5IC8vZ2V0IGN1cnJlbnQgdXJsIHBhcmFtZXRlcnMgYXMgb2JqZWN0CiAgICAgICAgcm91dGUubWV0cmljID0gaXRlbS5rZXkgLy91cGRhdGUgd2hhdCB5b3UgY2hhbmdlZAogICAgICAgIGxldCByb3V0ZVN0cmluZyA9IE9iamVjdC5lbnRyaWVzKHJvdXRlKS5tYXAoZSA9PiBlbmNvZGVVUklDb21wb25lbnQoZVswXSkgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQoZVsxXSkpLmpvaW4oIiYiKSAvL3BhcnNlIGEgc3RyaW5nIGZyb20gdGhhdCBvYmplY3QKICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7fSxudWxsLHRoaXMuJHJvdXRlLnBhdGggKyAnbm9raWF0d2luLyMvPycgKyByb3V0ZVN0cmluZykgLy93cml0ZSB0aGF0IHRvIFVSTCAoQ0FVVElPTjogdnVlWCBzdG9yZSBhbmQgVVJMIG1pZ2h0IGJlIGluY29uc2lzdGVudCkKICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoIndyaXRlUXVlcnkiLCB7aWRlbnRpZmllcjogZmFsc2UsIHF1ZXJ5OiB7bWV0cmljOiBpdGVtLmtleX19KQogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdnZXREYXRhJywge2lkZW50aWZpZXI6IGZhbHNlfSkKCiAgICAgIH0KICAgIH0sCgogICAgLy9leHRhIGxvb3AgaW4gY2FzZSB3ZXJlIG5vdCB1c2luZyBhIGx1c3QgYnV0IHRoZSBzZWxlY3QgZmllbGQgKHdoaWNoIHBhc3NlcyB0b28gbXVjaCBzaGl0KQogICAgZmlsdGVyQnVsbHNoaXRGcm9tU2VsZWN0OiBmdW5jdGlvbihldmVudCkgewogICAgICBsZXQga2V5ID0gZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgIGxldCBpdGVtID0gdGhpcy5tZXRyaWNzLmZpbmQobWV0cmljID0+IG1ldHJpYy5rZXkgPT0ga2V5KQogICAgICB0aGlzLnNlbGVjdChpdGVtKQogICAgfQogIH0KfQo="},{"version":3,"sources":["metrics.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"metrics.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"metric\">\n  <template v-if=\"metrics.length < 10\">\n    <ul>\n      <li v-for=\"metric in metrics\" :key=\"metric.key\">\n        <span v-on:click=\"select(metric)\" :class=\"{active: metric.key == active}\">{{metric.display}}</span>\n      </li>\n    </ul>\n  </template>\n  <template v-else>\n    <select class=\"custom-select\" @change=\"filterBullshitFromSelect\">\n      <option disabled>Choose Metric</option>\n      <option v-for=\"metric in metrics\" v-bind:key=\"metric.key\" :value=\"metric.key\">{{metric.display}}</option>\n    </select>\n  </template>\n</div>\n</template>\n\n<script>\n//import * as d3 from 'd3'\n\nexport default {\n  data() {\n    return {\n      active: null\n    }\n  },\n\n  props: {\n    selected: String\n  },\n\n\n  computed: {\n    metrics: function() {\n      return this.$store.state.metrics;\n    }\n  },\n\n  created () {\n    this.active = this.selected\n  },\n\n  mounted () {\n  },\n\n  methods: {\n    //emit selected element to sidebar, which will update the query\n    select: function(item) {\n      if(item.key != this.active){\n        this.$store.commit('setActiveMetric', item) //set query\n        this.active = item.key //make element active\n\n        let route = this.$route.query //get current url parameters as object\n        route.metric = item.key //update what you changed\n        let routeString = Object.entries(route).map(e => encodeURIComponent(e[0]) + \"=\" + encodeURIComponent(e[1])).join(\"&\") //parse a string from that object\n        history.pushState({},null,this.$route.path + 'nokiatwin/#/?' + routeString) //write that to URL (CAUTION: vueX store and URL might be inconsistent)\n        this.$store.commit(\"writeQuery\", {identifier: false, query: {metric: item.key}})\n        this.$store.dispatch('getData', {identifier: false})\n\n      }\n    },\n\n    //exta loop in case were not using a lust but the select field (which passes too much shit)\n    filterBullshitFromSelect: function(event) {\n      let key = event.target.value\n      let item = this.metrics.find(metric => metric.key == key)\n      this.select(item)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.metric {\n  background-image: linear-gradient(135deg, #20C5A0 0%, #BD10E0 47%, #F5A623 100%);\n  padding: 30px;\n}\n\nul {\n  list-style: none;\n  font-size: 12px;\n  padding: 0px;\n}\nul li {\n  width: inline-block;\n  text-align: center;\n  margin: 0;\n  padding: 2px 0;\n}\n\nul li:hover {\n  font-weight: bold;\n  cursor: pointer;\n}\n\nspan {\n  padding: 4px 2px;\n  line-height: 150%;\n  border-radius: 4px;\n}\n.active {\n  background: white;\n  color: black;\n  font-weight: bold;\n}\n</style>\n"]}]}