{"remainingRequest":"/Users/tk/GitHub/nokia-twin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokia-twin/src/components/vis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokia-twin/src/components/vis.vue","mtime":1596111876222},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJwoKLy9pbXBvcnQgeyByZWdyZXNzaW9uTGluZWFyIH0gZnJvbSAnZDMtcmVncmVzc2lvbic7CgoKZXhwb3J0IGRlZmF1bHQgewogIGNvbXB1dGVkOiB7CiAgICBzdHlsZTogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgd2lkdGg6IDEwMDAsIC8vVE9ETzogc2V0IHRvIHdpbmRvdyB3aWR0aAogICAgICAgIGhlaWdodDogMzAwLAogICAgICAgIG1hcmdpbjogewogICAgICAgICAgdG9wOiAyNSwKICAgICAgICAgIHJpZ2h0OiAyNSwKICAgICAgICAgIGJvdHRvbTogMCAsCiAgICAgICAgICBsZWZ0OiA0MAogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICBjb250ZXh0OiB7IC8vZ2V0IGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gZnJvbSBzdG9yZQogICAgICBjYWNoZTogZmFsc2UsCiAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgbGV0IHBhcnNlVGltZSA9IGQzLnRpbWVQYXJzZSgiJVktJW0iKTsKICAgICAgICBsZXQgaXRlbXMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldENvbnRleHQubWFwKGl0ZW0gPT4gewogICAgICAgICAgaXRlbS54ID0gdGhpcy5zY2FsZXMueChwYXJzZVRpbWUoaXRlbS5kYXRlKSkgLy90cmFuc2xhdGUgZGF0ZSB0byBwb3NpdGlvbgogICAgICAgICAgcmV0dXJuIGl0ZW0KICAgICAgICB9KQogICAgICAgIHJldHVybiBpdGVtcwogICAgICB9CiAgICB9LAoKCiAgICBkYXRhOiB7IC8vZ2V0IGRhdGEgZnJvbSBzdG9yZSAodGhpcyBpcyB0aGUgY29tcHV0ZWQgcHJvcGVydHkgImRhdGEiLCBub3QgdnVlJ3MgZGF0YSBwcm9wZXJ0eSkKICAgICAgY2FjaGU6IGZhbHNlLAogICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldExpbmVzLm1hcChsaW5lID0+IHsKICAgICAgICAgIGxpbmUudG91Y2hlZCA9IDAgLy9hZGQgY291bnRlciBmb3IgcmVhY3Rpdml0eSB3aGVuIHVzaW5nIGJydXNoIGZ1bmN0aW9uCiAgICAgICAgICByZXR1cm4gbGluZQogICAgICAgIH0pCiAgICAgIH0KICAgIH0sCgogICAgZGF0YVN0YXRlOiBmdW5jdGlvbigpIHsgLy9jaGVjayBpZiBldmVyeSBsaW5lIHdlIHJlY2VpdmVkIGFsc28gaGFzIGRhdGEgdmFsdWVzIGJlZm9yZSB3ZSByZW5kZXIKICAgICAgbGV0IHN0YXRlID0gZmFsc2UgLy9hc3VtZSB0aGF0IGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAgIGxldCBoYXNEYXRhID0gdGhpcy5kYXRhLm1hcChsaW5lID0+IChsaW5lLnZhbHVlcykgPyB0cnVlIDogZmFsc2UpIC8vY2hlY2sgaWYgdmFsdWUgYXJyYXkgZXhpc3RzCiAgICAgIGlmKGhhc0RhdGEubGVuZ3RoID4gMCAmJiBoYXNEYXRhLmV2ZXJ5KGJvb2wgPT4gYm9vbCkpIHN0YXRlID0gdHJ1ZSAvL2NoZWNrIGlmIGFsbCBsaW5lcyBoYXZlIGRhdGEgKGFuZCBpZiB3ZSBoYXZlIGxpbmVzIGF0IGFsbCwgb3RoZXJ3aXNlIGNvbmRpdGlvbiBmb3IgZXZlcnkoKSB3b3VsZCBiZSB0cnVlKQogICAgICByZXR1cm4gc3RhdGUKICAgIH0sCgogICAgc2NhbGVzOiB7Ly9jb21wdXRlIHNjYWxlcwogICAgICBjYWNoZTogdHJ1ZSwKICAgICAgZ2V0KCkgewogICAgICAgIGxldCBwYXJzZVRpbWUgPSBkMy50aW1lUGFyc2UoIiVZLSVtIik7CiAgICAgICAgbGV0IHN0eWxlID0gdGhpcy5zdHlsZQoKICAgICAgICBjb25zdCB3aWR0aCA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoWzMsNl0pCiAgICAgICAgY29uc3QgeCA9IGQzLnNjYWxlVGltZSgpLnJhbmdlKFtzdHlsZS5tYXJnaW4ubGVmdCxzdHlsZS53aWR0aCAtIHN0eWxlLm1hcmdpbi5sZWZ0IC0gc3R5bGUubWFyZ2luLnJpZ2h0XSk7CiAgICAgICAgY29uc3QgeSA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoWwogICAgICAgICAgc3R5bGUuaGVpZ2h0IC0gc3R5bGUubWFyZ2luLnRvcCAtIHN0eWxlLm1hcmdpbi5ib3R0b20sCiAgICAgICAgICBzdHlsZS5tYXJnaW4uYm90dG9tCiAgICAgICAgXSk7CiAgICAgICAgY29uc3QgbWljcm9ZID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbNDUsNV0pOwogICAgICAgIGNvbnN0IG1pY3JvWCA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoW3N0eWxlLm1hcmdpbi5sZWZ0LHN0eWxlLndpZHRoIC0gc3R5bGUubWFyZ2luLmxlZnQgLSBzdHlsZS5tYXJnaW4ucmlnaHRdKTsKCiAgICAgICAgZDMuYXhpc0xlZnQoKS5zY2FsZSh4KTsKICAgICAgICBkMy5heGlzQm90dG9tKCkuc2NhbGUoeSk7CgogICAgICAgIGlmKHRoaXMuZGF0YVN0YXRlKSB7CiAgICAgICAgICBsZXQgYXJyID0gW10gLy9ub3QgZWxlZ2FudCwgYnV0IGVhc2llc3Qgd2F5IHRvIGZpbmQgZXh0cmVtZSB2YWx1ZXMgYWNyb3NzIGFsbCBsaW5lcwogICAgICAgICAgdGhpcy5kYXRhLmZvckVhY2gobGluZSA9PiB7CiAgICAgICAgICAgIGxpbmUudmFsdWVzLmZvckVhY2godmFsdWUgPT4gewogICAgICAgICAgICAgIGFyci5wdXNoKHZhbHVlKQogICAgICAgICAgICB9KQogICAgICAgICAgfSkKCiAgICAgICAgICBsZXQgZG9tYWluID0gKHRoaXMueERvbWFpbi5sZW5ndGggPiAwKSA/IHRoaXMueERvbWFpbiA6IGQzLmV4dGVudChhcnIsIGQgPT4gcGFyc2VUaW1lKGQuZCkpIC8vaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSwgZ2V0IGEgdGhlIHhEb21haW4gZnJvbSBkYXRhLCBvdGhlcndpc2UgaXQgaGFzIGJlZW4gc2V0IGJ5IHRoZSBicnVzaAoKICAgICAgICAgIHguZG9tYWluKGRvbWFpbik7CiAgICAgICAgICBtaWNyb1guZG9tYWluKGQzLmV4dGVudChhcnIsIGQgPT4gcGFyc2VUaW1lKGQuZCkpKTsgLy9kZWZpbml0ZWx5IHNldCB0aGlzIHRvIHRoZSBtYXhpbXVtIGRhdGEgZG9tYWluIHNvIHdlIGNhbiBwdXNoIGl0IHRvIHRoZSBsaW1pdAogICAgICAgICAgeS5kb21haW4oZDMuZXh0ZW50KGFyciwgZCA9PiArZC5yKSkubmljZSgpOwogICAgICAgICAgbWljcm9ZLmRvbWFpbihkMy5leHRlbnQoYXJyLCBkID0+ICtkLnIpKTsKICAgICAgICAgIHdpZHRoLmRvbWFpbihkMy5leHRlbnQoYXJyLCBkID0+ICtkLmMpKQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHsgeCwgeSwgbWljcm9YLCBtaWNyb1ksIHdpZHRoIH07CiAgICAgIH0KICAgIH0sCgogICAgZXh0cmVtZVZhbHVlczogZnVuY3Rpb24oKXsKICAgICAgbGV0IHBhcnNlVGltZSA9IGQzLnRpbWVQYXJzZSgiJVktJW0iKTsKICAgICAgbGV0IGRvbWFpbiA9IHRoaXMuc2NhbGVzLnguZG9tYWluKCkKCiAgICAgIHJldHVybiB0aGlzLmRhdGEubWFwKGxpbmUgPT4geyAvL2NyZWF0ZSBhcnJheSBmb3IgYWxsIGxpbmVzLiBsb29rIGluIGFsbCBsaW5lcy4uLgoKICAgICAgICAvL2xvb2sgZm9yIHZhbHVlcyB0aGF0IGFyZSB3aXRoaW4gdGhlIHZpc2libGUgYm91bmRhcmllcyBvZiB0aGUgeC1heGlzCiAgICAgICAgbGV0IHZpc2libGUgPSBsaW5lLnZhbHVlcy5maWx0ZXIodmFsdWUgPT4gewogICAgICAgICAgbGV0IGRhdGUgPSBwYXJzZVRpbWUodmFsdWUuZCkKICAgICAgICAgIHJldHVybiAoZGF0ZSA+IGRvbWFpblswXSAmJiBkYXRlIDwgZG9tYWluWzFdKSA/IHRydWUgOiBmYWxzZTsKICAgICAgICB9KQoKICAgICAgICAvL2Zvcm0gdGhvc2UsIGdldCB0d28gcGVha3MgYW5kIHR3byB2YWxsZXkgdmFsdWVzCiAgICAgICAgbGV0IHNvcnRlZCA9IHZpc2libGUuc29ydCgoYSxiKSA9PiBhLnIgLSBiLnIpCiAgICAgICAgbGV0IGV4dHJlbWUgPSBzb3J0ZWQuc2xpY2UoMCwyKS5jb25jYXQoc29ydGVkLnNsaWNlKHNvcnRlZC5sZW5ndGgtMixzb3J0ZWQubGVuZ3RoKSkKCiAgICAgICAgbGV0IGNpcmNsZXMgPSBleHRyZW1lLm1hcCh2YWx1ZSA9PiB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB4OiB0aGlzLnNjYWxlcy54KHBhcnNlVGltZSh2YWx1ZS5kKSksCiAgICAgICAgICAgIHk6IHRoaXMuc2NhbGVzLnkodmFsdWUucikKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIGxldCBvYmogPSB7CiAgICAgICAgICBjb2xvcjogbGluZS5jb2xvciwKICAgICAgICAgIGNpcmNsZXM6IGNpcmNsZXMKICAgICAgICB9CiAgICAgICAgY29uc29sZS5sb2cob2JqKQogICAgICAgIHJldHVybiBvYmoKICAgICAgfSkKICAgIH0sCgoKCiAgICBsaW5lczogewogICAgICBjYWNoZTogZmFsc2UsCiAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgbGV0IHBhcnNlVGltZSA9IGQzLnRpbWVQYXJzZSgiJVktJW0iKTsKICAgICAgICAgY29uc3QgcGF0aCA9IGQzLmFyZWEoKQogICAgICAgICAuY3VydmUoZDMuY3VydmVCYXNpcykKICAgICAgICAgLy8ueDAoZCA9PiB0aGlzLnNjYWxlcy54KHBhcnNlVGltZShkLmQpKS10aGlzLnNjYWxlcy53aWR0aChkLmMpIC8zKQogICAgICAgICAvLy54MShkID0+IHRoaXMuc2NhbGVzLngocGFyc2VUaW1lKGQuZCkpK3RoaXMuc2NhbGVzLndpZHRoKGQuYykgLzMpCiAgICAgICAgIC54KGQgPT4gdGhpcy5zY2FsZXMueChwYXJzZVRpbWUoZC5kKSkpCiAgICAgICAgIC55MChkID0+IHRoaXMuc2NhbGVzLnkoZC5yKS10aGlzLnNjYWxlcy53aWR0aChkLmMpKQogICAgICAgICAueTEoZCA9PiB0aGlzLnNjYWxlcy55KGQucikrdGhpcy5zY2FsZXMud2lkdGgoZC5jKSk7CgogICAgICAgICAvKmNvbnN0IHBhdGggPSBkMy5saW5lKCkKICAgICAgICAgLngoZCA9PiB0aGlzLnNjYWxlcy54KHBhcnNlVGltZShkLmQpKSkKICAgICAgICAgLnkoZCA9PiB0aGlzLnNjYWxlcy55KGQucikpOyovCgogICAgICAgICBjb25zdCBtaWNybyA9IGQzLmxpbmUoKQogICAgICAgICAuY3VydmUoZDMuY3VydmVCYXNpcykKICAgICAgICAgLngoZCA9PiB0aGlzLnNjYWxlcy5taWNyb1gocGFyc2VUaW1lKGQuZCkpKQogICAgICAgICAueShkID0+IHRoaXMuc2NhbGVzLm1pY3JvWShkLnIpKTsKCiAgICAgICAgIHJldHVybiB0aGlzLmRhdGEubWFwKGxpbmUgPT4gewogICAgICAgICAgIGlmKGxpbmUudmFsdWVzKSB7CiAgICAgICAgICAgICBsaW5lLnBhdGggPSBwYXRoKGxpbmUudmFsdWVzKQogICAgICAgICAgICAgbGluZS5taWNybyA9IG1pY3JvKGxpbmUudmFsdWVzKQogICAgICAgICAgIH0KICAgICAgICAgICAvL2lmKGxpbmUudmFsdWVzKSBsaW5lLnJlZ0xpbmUgPSByZWcobGluZS52YWx1ZXMpCiAgICAgICAgICAgcmV0dXJuIGxpbmUKICAgICAgICAgfSkKICAgICAgfQogICAgfSwKICB9LAoKCgogIGRpcmVjdGl2ZXM6IHsKICAgIGF4aXMoZWwsIGJpbmRpbmcpIHsvL2R5bmFtaWNhbGx5IGNhbGwgYW5kIHVwZGF0ZSBheGlzCgogICAgICAvL2xldCBwYXJzZVRpbWUgPSBkMy50aW1lUGFyc2UoIiVZLSVtIik7CiAgICAgIGNvbnN0IGF4aXMgPSBiaW5kaW5nLmFyZzsKICAgICAgY29uc3QgYXhpc01ldGhvZCA9IHsgeDogImF4aXNCb3R0b20iLCB5OiAiYXhpc0xlZnQiIH1bYXhpc107CiAgICAgIGNvbnN0IG1ldGhvZEFyZyA9IGJpbmRpbmcudmFsdWVbYXhpc107CiAgICAgIGQzLnNlbGVjdChlbCkudHJhbnNpdGlvbigpLmNhbGwoZDNbYXhpc01ldGhvZF0obWV0aG9kQXJnKS50aWNrcyg1KSk7CiAgICB9LAogIH0sCgogIHdhdGNoOiB7CiAgICBkYXRhU3RhdGU6IGZ1bmN0aW9uKG5ld1N0YXRlKSB7CgogICAgICBpZihuZXdTdGF0ZSkgdGhpcy5icnVzaCgpIC8vaW5pdGlhbGl6ZSBicnVzaCBhcyBzb29uIGFzIHlvdSBoYXZlIGRhdGEKICAgIH0KICB9LAoKCgogIG1vdW50ZWQgKCkgewogICAgLy9pZih0aGlzLmRhdGFTdGF0ZSkgdGhpcy5icnVzaCgpIC8vaW5pdGlhbGl6ZSBicnVzaCBpZiB5b3UgZ290IGRhdGEKICB9LAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc2hvd0NvbnRleHQ6IHRydWUsCiAgICAgIHhEb21haW46IFtdCiAgICB9CiAgfSwKCiAgbWV0aG9kczogewogICAgYnJ1c2g6IGZ1bmN0aW9uKCkgewogICAgICBjb25zdCBicnVzaCA9IGQzLmJydXNoWCgpCiAgICAgICAgLmV4dGVudCh0aGlzLnNjYWxlcy5taWNyb1gucmFuZ2UoKS5tYXAoKGUsaSkgPT4gW2UsaSo1MF0pKQogICAgICAgIC5vbigiZW5kIiwgdGhpcy51cGRhdGVYKQoKICAgICAgZDMuc2VsZWN0KCJnLmJydXNoIikKICAgICAgICAuY2FsbChicnVzaCkKICAgICAgICAuY2FsbChicnVzaC5tb3ZlLCB0aGlzLnNjYWxlcy54LnJhbmdlKCkpCgoKICAgIH0sCiAgICB1cGRhdGVYOiBmdW5jdGlvbigpIHsKICAgICAgLy9UT0RPIGRvbWFpbiBzZWVtcyB0byB3b3JrLCBidXQgdXNlcyBpbmV4aWNhYmx5IGhpZ2ggdmFsdWVzCiAgICAgIGxldCBkb21haW4gPSBkMy5ldmVudC5zZWxlY3Rpb24ubWFwKHZhbHVlID0+IHRoaXMuc2NhbGVzLm1pY3JvWC5pbnZlcnQodmFsdWUpKSAvL2dldCBuZXcgZG9tYWluIGJ5IGdldHRpbmcgZWRnZXMgb2Ygb3ZlcmxheSBhbmQgdHJhbnNsYXRlIHRoZW0gdG8gZGF0ZXMKICAgICAgZG9tYWluLmZvckVhY2goKHZhbHVlLGkpID0+IHsKICAgICAgICB2YWx1ZQogICAgICAgIHRoaXMuJHNldCh0aGlzLnhEb21haW4saSx2YWx1ZSkgLy9pdGVyYXRlIG92ZXIgdGhpcyBhcnJheSB0byB0cmlnZ2VyIHJlYWN0aXZpdHkKICAgICAgfSkKCiAgICAgIGQzLnNlbGVjdCgiLnhBeGVzIikudHJhbnNpdGlvbigpLmNhbGwoZDMuYXhpc0JvdHRvbSh0aGlzLnNjYWxlcy54KSkgLy91cGRhdGUgQXhpcwoKICAgIH0KICB9CgogIC8qcHJvcHM6IHsKICB9LAoKCgogIGNyZWF0ZWQgKCkgewogIH0sCgogIG1ldGhvZHM6IHsKICB9LCovCn0K"},{"version":3,"sources":["vis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA","file":"vis.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"col-9\">\n    <!--<div v-if=\"dataState\">\n      <div v-for=\"(line,index) in lines\" v-bind:key=\"index\">{{line.query}}</div>\n    </div>-->\n    <svg :width=\"style.width\" :height=\"style.height\" v-if=\"dataState\" class=\"lines\">\n      <g class=\"axes\">\n        <g v-axis:x=\"scales\" class=\"xAxes\" :transform=\"`translate(0,${style.height-style.margin.top-style.margin.bottom})`\"></g>\n        <g v-axis:y=\"scales\" class=\"yAxes\" :transform=\"`translate(${style.margin.left},0)`\"></g>\n      </g>\n      <g class=\"context\" v-if=\"showContext\">\n        <g v-for=\"(item, index) in context\" :key=\"`context-${index}`\" :transform=\"`translate(${item.x},0)`\">\n          <line x1=\"0\" x2=\"0\" :y1=\"style.margin.top\" :y2=\"style.height-style.margin.bottom-style.margin.top\" stroke=\"black\" stroke-dasharray=\"4\" />\n          <text x=\"10\" :y=\"style.margin.top+20\">{{item.text}}</text>\n        </g>\n      </g>\n      <g class=\"extremeValues\" v-if=\"dataState\">\n        <g v-for=\"(extremeLine, index) in extremeValues\" v-bind:key=\"'extreme-'+index\">\n          <circle v-for=\"(circle, index) in extremeLine.circles\" :key=\"'circle-'+index\" :cx=\"circle.x\" :cy=\"circle.y\" r=\"10\" fill=\"none\" :stroke=\"extremeLine.color\" stroke-width=\"1\" stroke-dasharray=\"4 1\"/>\n        </g>\n      </g>\n      <g class=\"legend\" :transform=\"`translate(${style.width-style.margin.right-50},${style.height-style.margin.bottom-50})`\">\n        <g>\n          <text text-anchor=\"end\">less confident</text>\n          <line x0=\"0\" x1=\"20\" y0=\"0\" y1=\"0\" transform=\"translate(2,-3)\" stroke=\"black\" stroke-width=\"2\"/>\n        </g>\n        <g transform=\"translate(0,10)\">\n          <text text-anchor=\"end\">more confident</text>\n          <line x0=\"0\" x1=\"20\" y0=\"0\" y1=\"0\" transform=\"translate(2,-3)\" stroke=\"black\" stroke-width=\"5\"/>\n        </g>\n\n      </g>\n      <g class=\"lines\" v-for=\"line in lines\" v-bind:key=\"line.identifier\" >\n        <path v-if=\"line.path\" :d=\"line.path\" :fill=\"line.color\" stroke=\"none\"/>\n        <!--<path v-if=\"line.path\" :d=\"line.path\" :stroke=\"line.color\" fill=\"none\"/>-->\n      </g>\n    </svg>\n\n    <!--brush for x-axis transformation -->\n    <svg :width=\"style.width\" height=\"50\" style=\"background-color: lightgrey\">\n      <g v-if=\"dataState\">\n        <g class=\"lines\" v-for=\"line in lines\" v-bind:key=\"line.identifier\" >\n          <path v-if=\"line.micro\" :d=\"line.micro\" :stroke=\"line.color\" stroke-opacity=\"0.5\" fill=\"none\"/>\n        </g>\n      </g>\n      <g class=\"brush\" />\n    </svg>\n\n\n    <form>\n      <div class=\"form-check\">\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\" v-model=\"showContext\" @click=\"showContext = !showContext\">\n        <label class=\"form-check-label\" for=\"exampleCheck1\">Show context</label>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\n//import { regressionLinear } from 'd3-regression';\n\n\nexport default {\n  computed: {\n    style: function() {\n      return {\n        width: 1000, //TODO: set to window width\n        height: 300,\n        margin: {\n          top: 25,\n          right: 25,\n          bottom: 0 ,\n          left: 40\n        }\n      }\n    },\n\n    context: { //get additional information from store\n      cache: false,\n      get: function() {\n        let parseTime = d3.timeParse(\"%Y-%m\");\n        let items = this.$store.getters.getContext.map(item => {\n          item.x = this.scales.x(parseTime(item.date)) //translate date to position\n          return item\n        })\n        return items\n      }\n    },\n\n\n    data: { //get data from store (this is the computed property \"data\", not vue's data property)\n      cache: false,\n      get: function() {\n        return this.$store.getters.getLines.map(line => {\n          line.touched = 0 //add counter for reactivity when using brush function\n          return line\n        })\n      }\n    },\n\n    dataState: function() { //check if every line we received also has data values before we render\n      let state = false //asume that condition is not met\n      let hasData = this.data.map(line => (line.values) ? true : false) //check if value array exists\n      if(hasData.length > 0 && hasData.every(bool => bool)) state = true //check if all lines have data (and if we have lines at all, otherwise condition for every() would be true)\n      return state\n    },\n\n    scales: {//compute scales\n      cache: true,\n      get() {\n        let parseTime = d3.timeParse(\"%Y-%m\");\n        let style = this.style\n\n        const width = d3.scaleLinear().range([3,6])\n        const x = d3.scaleTime().range([style.margin.left,style.width - style.margin.left - style.margin.right]);\n        const y = d3.scaleLinear().range([\n          style.height - style.margin.top - style.margin.bottom,\n          style.margin.bottom\n        ]);\n        const microY = d3.scaleLinear().range([45,5]);\n        const microX = d3.scaleLinear().range([style.margin.left,style.width - style.margin.left - style.margin.right]);\n\n        d3.axisLeft().scale(x);\n        d3.axisBottom().scale(y);\n\n        if(this.dataState) {\n          let arr = [] //not elegant, but easiest way to find extreme values across all lines\n          this.data.forEach(line => {\n            line.values.forEach(value => {\n              arr.push(value)\n            })\n          })\n\n          let domain = (this.xDomain.length > 0) ? this.xDomain : d3.extent(arr, d => parseTime(d.d)) //if this is the first time, get a the xDomain from data, otherwise it has been set by the brush\n\n          x.domain(domain);\n          microX.domain(d3.extent(arr, d => parseTime(d.d))); //definitely set this to the maximum data domain so we can push it to the limit\n          y.domain(d3.extent(arr, d => +d.r)).nice();\n          microY.domain(d3.extent(arr, d => +d.r));\n          width.domain(d3.extent(arr, d => +d.c))\n        }\n\n        return { x, y, microX, microY, width };\n      }\n    },\n\n    extremeValues: function(){\n      let parseTime = d3.timeParse(\"%Y-%m\");\n      let domain = this.scales.x.domain()\n\n      return this.data.map(line => { //create array for all lines. look in all lines...\n\n        //look for values that are within the visible boundaries of the x-axis\n        let visible = line.values.filter(value => {\n          let date = parseTime(value.d)\n          return (date > domain[0] && date < domain[1]) ? true : false;\n        })\n\n        //form those, get two peaks and two valley values\n        let sorted = visible.sort((a,b) => a.r - b.r)\n        let extreme = sorted.slice(0,2).concat(sorted.slice(sorted.length-2,sorted.length))\n\n        let circles = extreme.map(value => {\n          return {\n            x: this.scales.x(parseTime(value.d)),\n            y: this.scales.y(value.r)\n          }\n        })\n        let obj = {\n          color: line.color,\n          circles: circles\n        }\n        console.log(obj)\n        return obj\n      })\n    },\n\n\n\n    lines: {\n      cache: false,\n      get: function() {\n        let parseTime = d3.timeParse(\"%Y-%m\");\n         const path = d3.area()\n         .curve(d3.curveBasis)\n         //.x0(d => this.scales.x(parseTime(d.d))-this.scales.width(d.c) /3)\n         //.x1(d => this.scales.x(parseTime(d.d))+this.scales.width(d.c) /3)\n         .x(d => this.scales.x(parseTime(d.d)))\n         .y0(d => this.scales.y(d.r)-this.scales.width(d.c))\n         .y1(d => this.scales.y(d.r)+this.scales.width(d.c));\n\n         /*const path = d3.line()\n         .x(d => this.scales.x(parseTime(d.d)))\n         .y(d => this.scales.y(d.r));*/\n\n         const micro = d3.line()\n         .curve(d3.curveBasis)\n         .x(d => this.scales.microX(parseTime(d.d)))\n         .y(d => this.scales.microY(d.r));\n\n         return this.data.map(line => {\n           if(line.values) {\n             line.path = path(line.values)\n             line.micro = micro(line.values)\n           }\n           //if(line.values) line.regLine = reg(line.values)\n           return line\n         })\n      }\n    },\n  },\n\n\n\n  directives: {\n    axis(el, binding) {//dynamically call and update axis\n\n      //let parseTime = d3.timeParse(\"%Y-%m\");\n      const axis = binding.arg;\n      const axisMethod = { x: \"axisBottom\", y: \"axisLeft\" }[axis];\n      const methodArg = binding.value[axis];\n      d3.select(el).transition().call(d3[axisMethod](methodArg).ticks(5));\n    },\n  },\n\n  watch: {\n    dataState: function(newState) {\n\n      if(newState) this.brush() //initialize brush as soon as you have data\n    }\n  },\n\n\n\n  mounted () {\n    //if(this.dataState) this.brush() //initialize brush if you got data\n  },\n\n  data() {\n    return {\n      showContext: true,\n      xDomain: []\n    }\n  },\n\n  methods: {\n    brush: function() {\n      const brush = d3.brushX()\n        .extent(this.scales.microX.range().map((e,i) => [e,i*50]))\n        .on(\"end\", this.updateX)\n\n      d3.select(\"g.brush\")\n        .call(brush)\n        .call(brush.move, this.scales.x.range())\n\n\n    },\n    updateX: function() {\n      //TODO domain seems to work, but uses inexicably high values\n      let domain = d3.event.selection.map(value => this.scales.microX.invert(value)) //get new domain by getting edges of overlay and translate them to dates\n      domain.forEach((value,i) => {\n        value\n        this.$set(this.xDomain,i,value) //iterate over this array to trigger reactivity\n      })\n\n      d3.select(\".xAxes\").transition().call(d3.axisBottom(this.scales.x)) //update Axis\n\n    }\n  }\n\n  /*props: {\n  },\n\n\n\n  created () {\n  },\n\n  methods: {\n  },*/\n}\n</script>\n\n<style scoped>\ndiv {\n  background-color: #F7F7F7;\n}\nsvg.lines {\n  margin-top: 50px;\n  background-color: white;\n}\npath {\n  transition: d .3s\n}\n\n.legend {\n  font-size: 6pt;\n}\n\n.context text {\n  font-size: 10px;\n}\n</style>\n"]}]}