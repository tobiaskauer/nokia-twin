{"remainingRequest":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokia-twin/twin-dashboard/src/components/filterRow.vue?vue&type=style&index=0&id=64d90b3c&scoped=true&lang=css&","dependencies":[{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/src/components/filterRow.vue","mtime":1594296762551},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmxpLnJvdyB7CiAgbWFyZ2luOiAzMHB4OwogIHBhZGRpbmc6IDEwcHg7CiAgYm9yZGVyLXJhZGl1czogNHB4OwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLWxlZnQtd2lkdGg6IDE1cHg7Cn0KCnVsLmNvbHVtbiB7CiAgZGlzcGxheTogdGFibGU7CiAgcGFkZGluZzogMDsKICBtYXJnaW46IDAgMzBweCAzMHB4IDAgOwogIGxpc3Qtc3R5bGU6IG5vbmU7Cn0KCgp1bC5pdGVtcyB7CiAgZm9udC1zaXplOiAxMnB4OwogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAwOwogIGxpc3Qtc3R5bGU6IG5vbmU7Cn0KCgoK"},{"version":3,"sources":["filterRow.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA","file":"filterRow.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<li class=\"row\" :style=\"style\">\n  <ul class=\"column\" v-for=\"(col, index) in filterColumns\" :key=\"'list-'+index\">\n    <strong>{{col.name}}</strong>\n    <ul class=\"items\">\n      foo: {{col.visible}}\n      <li v-for=\"(item, index) in col.visible\" :key=\"'item-'+index\">{{item.key}}</li>\n      <!--<button :click=\"addItem()\">Add item</button>-->\n    </ul>\n  </ul>\n</li>\n</template>\n\n<script>\n\nexport default {\n  components: {\n\n  },\n\n  data() {\n    return {\n    }\n  },\n\n  computed: {\n    style: function() {\n      return \"border-color: \" +this.row.color\n    }\n  },\n\n  methods: {\n    /*visible: function(){\n      return this.filterColumns.map(col => {\n        let filtered = col.elements.sort((a,b) => b.count - a.count)\n        filtered = filtered.slice(0,col.countVisible)\n        return {\n          name: col.name,\n          filtered: filtered\n        }\n      })\n    }*/\n  },\n\n  mounted() {\n  },\n\n  props: {\n    filterColumns: Array,\n    row: Object\n  }\n}\n</script>\n\n<style scoped>\nli.row {\n  margin: 30px;\n  padding: 10px;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: 1px;\n  border-left-width: 15px;\n}\n\nul.column {\n  display: table;\n  padding: 0;\n  margin: 0 30px 30px 0 ;\n  list-style: none;\n}\n\n\nul.items {\n  font-size: 12px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n\n\n</style>\n"]}]}