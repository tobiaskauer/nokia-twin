{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue?vue&type=style&index=0&id=19f8877c&scoped=true&lang=css&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue","mtime":1613727905878},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmgxIHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KLnNpZGViYXIgewogIGJhY2tncm91bmQtY29sb3I6ICMzOTM5M0I7CiAgY29sb3I6IHdoaXRlOwogIG1pbi13aWR0aDogMzAwcHg7CiAgcGFkZGluZzogMHB4ICFpbXBvcnRhbnQ7CiAgLy9taW4taGVpZ2h0OiAxMDAlOwp9Cgp1bCB7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDAKfQoKLmFkZExpbmUgewogIG1hcmdpbjogMTBweCAzMHB4Owp9Ci5hZGRMaW5lIGJ1dHRvbiB7CiAgYmFja2dyb3VuZDogbm9uZTsKICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTsKICBib3JkZXItcmFkaXVzOiA1cHg7CiAgcGFkZGluZzogMTBweDsKICBjb2xvcjogd2hpdGU7CiAgd2lkdGg6IDEwMCU7Cn0KCi5hZGRMaW5lIGJ1dHRvbjpob3ZlciB7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KCg=="},{"version":3,"sources":["sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"sidebar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"sidebar flex-fill\">\n    <h1>{{title}}</h1>\n    <metrics v-if=\"selectedMetric\" ref=\"metrics\" :selected=\"selectedMetric\"/>\n    <div class=\"flex-fill\" style=\"overflow: scroll\">\n      <div class=\"addLine\">\n        <button v-on:click=\"addLine\">Add Line</button>\n      </div>\n      <p style=\"padding: 0px 30px\">Select filter to change visualization:</p>\n      <ul>\n        <!-- display filterRow for every lines that is displayed -->\n        <filterRow\n          v-for=\"(line, index) in lines\"\n          :ref=\"'filterRow-'+line.identifier\"\n          :key=\"index\"\n          :line=\"line\"\n        />\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport filterRow from './filterRow.vue'\nimport metrics from './metrics.vue'\n\nexport default {\n  data() {\n    return {\n      selectedMetric: undefined,\n      lines: undefined,\n      title: 'Open Inc'\n    }\n  },\n\n  computed: {\n    /*//get lines (incl. color, identifier, filters, and selections) from store\n    lines: {\n      get: function(){\n        return this.$store.state.lines\n      }\n    },*/\n\n    metrics: function() {\n      return this.$store.state.metrics\n    },\n\n    filterColumns: function() {\n      return  this.$store.state.filterColumns\n    }\n\n\n  },\n\n  //if there are no lines on store when page is mounted, add one to always have one line available\n  watch: {\n    metrics: function(newMetrics) {\n      if(newMetrics.length > 0) {\n        this.setMetric()\n      }\n    },\n\n    filterColumns: function(newFilterColumns){\n      if(newFilterColumns.length > 0) {\n        this.setLines();\n      }\n    }\n\n    /*//set filters from URL\n    lines: function(newLines){\n      if(newLines) {\n        //console.log(this.$refs['filterRow-'+newLines[0].identifier])\n        this.setFiltersFromURL(this.$route.query)\n      }\n    }*/\n  },\n\n  mounted() {\n\n  },\n\n  methods: {\n    setMetric: function() {\n\n      //check if URL has a metric (and whether that metric is actually in the current table)\n      if(this.$route.query.metric && this.metrics.map(e=>e.key).indexOf(this.$route.query.metric) !== -1) {\n        //if so, pass that metric to the component as property\n        this.selectedMetric = this.$route.query.metric\n\n      } else {\n        //if not passed or not found, just take the first element\n        this.selectedMetric = this.metrics[0].key\n      }\n      this.$store.commit('setActiveMetric', this.metrics.find(metric => metric.key == this.selectedMetric)) //make active (so that we now the scale and can display as label on yaxis)\n    },\n\n    setLines: function() {\n\n      //for each line we need, set some queries\n      let linesCount = (this.$route.query.lines) ? this.$route.query.lines : 1\n      for(let i=0;i<linesCount;i++) {\n\n\n        //search for filters in the url that match the ones we have in the database\n        let query = {metric: this.selectedMetric}\n        this.$store.state.filterColumns.forEach(filterColumn => {\n          filterColumn.db_columns.forEach(column => {\n            if(this.$route.query[column]) {\n              if(this.$route.query[column].split(\",\")[i]) { //do not consider empty values\n                query[column] = this.$route.query[column].split(\",\")[i]\n              }\n            }\n          })\n        })\n        this.$store.dispatch('addLine',query)\n      }\n      this.lines = this.$store.getters.getLines;\n    },\n\n    /*initializeFromURL: function(param) {\n      if(param.lines) {\n        while (param.lines > 0){\n          this.$store.dispatch('addLine')\n          param.lines--\n        }\n      } else {\n        this.$store.dispatch('addLine')\n      }\n\n\n      let metric\n      // if a metric is set in url parameters\n      if(param.metric) {\n        //look for this metric in current metric storage, if you find sth set it, otherwise set the first one\n        metric = this.$store.state.metrics.find(item => item.key ==  param.metric) ? this.$store.state.metrics.find(item => item.key ==  param.metric) : metric = this.$store.state.metrics[0]\n      } else {\n        //if none is passed, just take the first one\n        metric = this.$store.state.metrics[0]\n      }\n      //set the metric\n      this.$refs.metrics.select(metric)\n    },*/\n\n    //please dont hate me, but this gets triggered three times as oten as necessary....\n    /*setFiltersFromURL: function(param) {\n\n      //find filters\n      let filters = []\n      this.$store.state.filterColumns.forEach(filterColumn => {\n        //console.log(filterColumn) //this is the display name of the columns (e.g. \"Location\")\n        filterColumn.db_columns.forEach(column => {\n          if(param[column]) {\n            //you can have as many values for a given parameter as you have lines (eg. filtering three lines by three different companes. i corresponds to the line count)\n            param[column].split(\",\").forEach((value,lineCount) => {\n              filters[lineCount] = {display: filterColumn.display, element: {filter: column, key: value}}\n            })\n          }\n        })\n      })\n\n\n\n      //iterate over existing lines (in sidebar) and apply filters from URL\n      this.$store.getters.getLines.forEach((line,lineCount) => {\n        if(this.$refs['filterRow-'+line.identifier]) {\n\n          let filter = filters[lineCount]\n          console.log(filter)\n          this.$refs['filterRow-'+line.identifier][0].select(filter.display,filter.element,\"initialize\")\n        }\n      })\n\n\n\n    },*/\n    //add new lines\n    addLine: function() {\n      //let previousQuery = this.lines[this.lines.length-1] == undefined ? {} : this.lines[this.lines.length-1].query\n      //duplicating the previous query to add it to the next technically works, but the two instances seem dependent on another (which is not expected behavior)\n      this.$store.dispatch('addLine')\n\n      let route = this.$route.query //get current url parameters as object\n      route.lines = this.lines.length\n      let routeString = Object.entries(route).map(e => encodeURIComponent(e[0]) + \"=\" + encodeURIComponent(e[1])).join(\"&\") //parse a string from that object\n      history.pushState({},null,this.$route.path + 'nokiatwin/#/?' + routeString) //write that to URL (CAUTION: vueX store and URL might be inconsistent)\n    },\n  },\n\n  components: {\n    filterRow, metrics\n  },\n\n  created() {\n\n  },\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n.sidebar {\n  background-color: #39393B;\n  color: white;\n  min-width: 300px;\n  padding: 0px !important;\n  //min-height: 100%;\n}\n\nul {\n  margin: 0;\n  padding: 0\n}\n\n.addLine {\n  margin: 10px 30px;\n}\n.addLine button {\n  background: none;\n  border: 1px solid white;\n  border-radius: 5px;\n  padding: 10px;\n  color: white;\n  width: 100%;\n}\n\n.addLine button:hover {\n  font-weight: bold;\n}\n\n</style>\n"]}]}