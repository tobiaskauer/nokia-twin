{"remainingRequest":"/Users/tk/GitHub/nokia-twin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokia-twin/src/components/sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokia-twin/src/components/sidebar.vue","mtime":1595491803162},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBmaWx0ZXJSb3cgZnJvbSAnLi9maWx0ZXJSb3cudnVlJwppbXBvcnQgbWV0cmljcyBmcm9tICcuL21ldHJpY3MudnVlJwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgfQogIH0sCgoKICBjb21wdXRlZDogewogICAgbGluZXMoKSB7CiAgICAgIC8vZ2V0IGxpbmVzIGZyb20gc3RvcmUKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmxpbmVzCiAgICB9CiAgfSwKCiAgbW91bnRlZCgpIHsKICAgIC8vaWYgdGhlcmUgYXJlIG5vIGxpbmVzIG9uIHN0b3JlIHdoZW4gcGFnZSBpcyBtb3VudGVkLCBhZGQgb25lIHRvIGFsd2F5cyBoYXZlIG9uZSBsaW5lIGF2YWlsYWJsZQogICAgaWYodGhpcy5saW5lcy5sZW5ndGggPCAxKSB7CiAgICAgIHRoaXMuYWRkTGluZSgpCiAgICB9CgogIH0sCgogIGNyZWF0ZWQoKSB7CiAgfSwKCiAgbWV0aG9kczogewogICAgYWRkTGluZTogZnVuY3Rpb24oKSB7CiAgICAgIC8vaWYgdGhlcmUgYXJlIGFueSBwcmV2aW91cyBsaW5lcywgZ2V0IHRoZWlyIHF1ZXJpZXMgYW5kIHBhc3MgdGhlbSB0byBhZGRMaW5lKCkKICAgICAgbGV0IHByZXZpb3VzUXVlcnkgPSB0aGlzLmxpbmVzW3RoaXMubGluZXMubGVuZ3RoLTFdID09IHVuZGVmaW5lZCA/IHt9IDogdGhpcy5saW5lc1t0aGlzLmxpbmVzLmxlbmd0aC0xXS5xdWVyeQogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2FkZExpbmUnLHByZXZpb3VzUXVlcnkpCiAgICAgIC8vYWZ0ZXIgYWRkaW5nIHRoZSBsaW5lLCBnZXQgaXQncyBkYXRhCiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdnZXREYXRhJywge2lkZW50aWZpZXI6IGZhbHNlLCBmaWx0ZXI6ICJtZXRyaWMiLCBxdWVyeToge2tleTogInJhdGluZ19vdmVyYWxsIn19KQogICAgICAvL1RPRE86IEFkZGluZyBhIGxpbmVzIGNyYXNoZXMgdGhlIGJydXNoIC0gbm8gaWRlYSB3aHkgKG1heWJlIGZvcmNlIFJlbG9hZD8pCiAgICB9LAoKICAgIHNlbGVjdDogZnVuY3Rpb24ocGF5bG9hZCkgewogICAgICAvL211dGF0aW9uIChjb21pbmcgZnJvbSBmaWx0ZXJSb3cgLyBtZXRyaWM7IGdvaW5nIHRvIHZ1ZVgpCiAgICAgIC8vdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVRdWVyeScsIHBheWxvYWQpIC8vdXNlIG11dGF0aW9uIGJlY2F1c2UgYWN0aW9ucyB3b250IFdvcmsKCiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdnZXREYXRhJywgcGF5bG9hZCkgLy91c2Ugc2VwZXJhdGUgYWN0aW9uIGZvciBBUEkgcmVxdWVzdCAoY2FudCBjYWxsIGFjdGlvbiBmcm9tIG11dGF0aW9uKQogICAgICAvL3RoaXMuJHN0b3JlLmRpc3BhdGNoKCdnZXREYXRhJywgcGF5bG9hZCkgLy91c2Ugc2VwZXJhdGUgYWN0aW9uIGZvciBBUEkgcmVxdWVzdCAoY2FudCBjYWxsIGFjdGlvbiBmcm9tIG11dGF0aW9uKQogICAgfQogIH0sCgogIGNvbXBvbmVudHM6IHsKICAgIGZpbHRlclJvdywgbWV0cmljcwogIH0KfQo="},{"version":3,"sources":["sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"sidebar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"col-sm-3 sidebar hidden-md-down\">\n    <h1>Twin DB</h1>\n    <metrics v-bind:initial=\"'rating_overall'\" @clicked=\"select\" />\n    <ul>\n      <!-- display filterRow for every lines that is displayed -->\n      <filterRow v-for=\"(line, index) in lines\" :key=\"index\" :line=\"line\"  @clicked=\"select\" />\n    </ul>\n    <div class=\"addLine\">\n      <button v-on:click=\"addLine\">Add Line</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport filterRow from './filterRow.vue'\nimport metrics from './metrics.vue'\n\nexport default {\n  data() {\n    return {\n    }\n  },\n\n\n  computed: {\n    lines() {\n      //get lines from store\n      return this.$store.state.lines\n    }\n  },\n\n  mounted() {\n    //if there are no lines on store when page is mounted, add one to always have one line available\n    if(this.lines.length < 1) {\n      this.addLine()\n    }\n\n  },\n\n  created() {\n  },\n\n  methods: {\n    addLine: function() {\n      //if there are any previous lines, get their queries and pass them to addLine()\n      let previousQuery = this.lines[this.lines.length-1] == undefined ? {} : this.lines[this.lines.length-1].query\n      this.$store.commit('addLine',previousQuery)\n      //after adding the line, get it's data\n      this.$store.dispatch('getData', {identifier: false, filter: \"metric\", query: {key: \"rating_overall\"}})\n      //TODO: Adding a lines crashes the brush - no idea why (maybe force Reload?)\n    },\n\n    select: function(payload) {\n      //mutation (coming from filterRow / metric; going to vueX)\n      //this.$store.commit('updateQuery', payload) //use mutation because actions wont Work\n\n      this.$store.dispatch('getData', payload) //use seperate action for API request (cant call action from mutation)\n      //this.$store.dispatch('getData', payload) //use seperate action for API request (cant call action from mutation)\n    }\n  },\n\n  components: {\n    filterRow, metrics\n  }\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n.sidebar {\n  background-color: #39393B;\n  color: white;\n  min-width: 300px;\n  padding: 0px !important;\n  min-height: 100%;\n}\n\nul {\n  margin: 0;\n  padding: 0\n}\n\n.addLine {\n  margin: 10px 30px;\n}\n.addLine button {\n  background: none;\n  border: 1px solid white;\n  border-radius: 5px;\n  padding: 10px;\n  color: white;\n  width: 100%;\n}\n\n.addLine button:hover {\n  font-weight: bold;\n}\n\n</style>\n"]}]}