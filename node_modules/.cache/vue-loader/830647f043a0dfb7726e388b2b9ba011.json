{"remainingRequest":"/Users/tk/GitHub/twin-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/twin-dashboard/src/components/chart.vue?vue&type=style&index=0&id=54d6f604&scoped=true&lang=css&","dependencies":[{"path":"/Users/tk/GitHub/twin-dashboard/src/components/chart.vue","mtime":1593245108679},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCnN2ZyB7CiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7Cn0KcGF0aCB7CiAgdHJhbnNpdGlvbjogZCAwLjNzCn0K"},{"version":3,"sources":["chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;AACA;AACA;AACA;AACA;AACA","file":"chart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <svg :width=\"style.width\" :height=\"style.height\" class=\"lines\">\n      <g class=\"lines\">\n        <path v-for=\"(line,index) in lines\" v-bind:key=\"index\" :d=\"line\" fill=\"none\" :stroke=\"colors[index]\"/>\n      </g>\n    </svg>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'chart',\n\n  props: {\n    data: Array\n  },\n\n  data() {\n    return {\n      colors: [\"#50E3C2\",\"#BD10E0\"]\n    }\n  },\n\n  computed: {\n    scales: {\n      cache: true,\n      get() {\n        let parseTime = d3.timeParse(\"%Y-%m\");\n        let style = this.style\n\n        const x = d3.scaleTime().range([\n          style.margin.left,\n          style.width - style.margin.left - style.margin.right\n        ]);\n        const y = d3.scaleLinear().range([\n          style.height - style.margin.top - style.margin.bottom,\n          style.margin.bottom\n        ]);\n\n        d3.axisLeft().scale(x);\n        d3.axisBottom().scale(y);\n\n        x.domain([parseTime(\"2008-01\"),parseTime(\"2020-12\")]); //TODO: assign dynamically\n        y.domain([0,5]);\n\n       /*if(this.data) {\n         let minMax = {dates: [], ratings: []}\n         this.data.forEach(result=> {\n           d3.extent(result.data,x=>parseTime(x.d)).forEach(date => minMax.dates.push(date))\n           d3.extent(result.data,x=>+x.r).forEach(rating => minMax.ratings.push(rating))\n         })\n          x.domain(d3.extent(minMax.dates)); //TODO: assign dynamically\n          y.domain(d3.extent(minMax.ratings));\n        } else {\n          x.domain([parseTime(\"2007-01\"),parseTime(\"2020-12\")]); //TODO: assign dynamically\n          y.domain([0,5]);\n        }*/\n        return { x, y };\n      }\n    },\n\n    lines: {\n      cache: false,\n      get() {\n        if(this.data) {\n          let parseTime = d3.timeParse(\"%Y-%m\");\n          const path = d3.line()\n          .curve(d3.curveBasis)\n           .x(d => this.scales.x(parseTime(d.d)))\n           .y(d => this.scales.y(d.r));\n\n           return this.data.map(values => path(values.data))\n        } else {\n          return null\n        }\n\n      }\n    },\n\n    style: function() {\n      return {\n        width: 1000, //TODO: set to window width\n        height: 300,\n        margin: {\n          top: 25,\n          right: 25,\n          bottom: 25,\n          left: 25\n        }\n      }\n    }\n  },\n\n  created () {\n\n  },\n\n  mounted () {\n    let g = d3.select(\"g.lines\")\n    let style = this.style\n    //g.attr(\"transform\",\"translate(\"+style.margin.left+\",\"+style.margin.top+\")\")\n    //g.attr(\"transform\",\"translate(25,25)\")\n    g.append(\"g\").attr(\"transform\", \"translate(\"+style.margin.left+\",0)\").call(d3.axisLeft(this.scales.y).ticks(5))\n    g.append(\"g\").attr(\"transform\", \"translate(0,\"+(style.height-style.margin.top-style.margin.bottom)+\")\").call(d3.axisBottom(this.scales.x).ticks(5))\n\n  /*  this.$nextTick(function () {\n      console.log(this.data)\n    })*/\n  },\n\n  methods: {\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nsvg {\n  background-color: white;\n}\npath {\n  transition: d 0.3s\n}\n</style>\n"]}]}