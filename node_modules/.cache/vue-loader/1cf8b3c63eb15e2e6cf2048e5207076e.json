{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue","mtime":1612368437174},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBmaWx0ZXJSb3cgZnJvbSAnLi9maWx0ZXJSb3cudnVlJwppbXBvcnQgbWV0cmljcyBmcm9tICcuL21ldHJpY3MudnVlJwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzZWxlY3RlZE1ldHJpYzogdW5kZWZpbmVkLAogICAgICBsaW5lczogdW5kZWZpbmVkCiAgICB9CiAgfSwKCiAgY29tcHV0ZWQ6IHsKICAgIC8qLy9nZXQgbGluZXMgKGluY2wuIGNvbG9yLCBpZGVudGlmaWVyLCBmaWx0ZXJzLCBhbmQgc2VsZWN0aW9ucykgZnJvbSBzdG9yZQogICAgbGluZXM6IHsKICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5saW5lcwogICAgICB9CiAgICB9LCovCgogICAgbWV0cmljczogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5tZXRyaWNzCiAgICB9LAoKICAgIGZpbHRlckNvbHVtbnM6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gIHRoaXMuJHN0b3JlLnN0YXRlLmZpbHRlckNvbHVtbnMKICAgIH0KCgogIH0sCgogIC8vaWYgdGhlcmUgYXJlIG5vIGxpbmVzIG9uIHN0b3JlIHdoZW4gcGFnZSBpcyBtb3VudGVkLCBhZGQgb25lIHRvIGFsd2F5cyBoYXZlIG9uZSBsaW5lIGF2YWlsYWJsZQogIHdhdGNoOiB7CiAgICBtZXRyaWNzOiBmdW5jdGlvbihuZXdNZXRyaWNzKSB7CiAgICAgIGlmKG5ld01ldHJpY3MubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMuc2V0TWV0cmljKCkKICAgICAgfQogICAgfSwKCiAgICBmaWx0ZXJDb2x1bW5zOiBmdW5jdGlvbihuZXdGaWx0ZXJDb2x1bW5zKXsKICAgICAgaWYobmV3RmlsdGVyQ29sdW1ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5zZXRMaW5lcygpOwogICAgICB9CiAgICB9CgogICAgLyovL3NldCBmaWx0ZXJzIGZyb20gVVJMCiAgICBsaW5lczogZnVuY3Rpb24obmV3TGluZXMpewogICAgICBpZihuZXdMaW5lcykgewogICAgICAgIC8vY29uc29sZS5sb2codGhpcy4kcmVmc1snZmlsdGVyUm93LScrbmV3TGluZXNbMF0uaWRlbnRpZmllcl0pCiAgICAgICAgdGhpcy5zZXRGaWx0ZXJzRnJvbVVSTCh0aGlzLiRyb3V0ZS5xdWVyeSkKICAgICAgfQogICAgfSovCiAgfSwKCiAgbW91bnRlZCgpIHsKCiAgfSwKCiAgbWV0aG9kczogewogICAgc2V0TWV0cmljOiBmdW5jdGlvbigpIHsKCiAgICAgIC8vY2hlY2sgaWYgVVJMIGhhcyBhIG1ldHJpYyAoYW5kIHdoZXRoZXIgdGhhdCBtZXRyaWMgaXMgYWN0dWFsbHkgaW4gdGhlIGN1cnJlbnQgdGFibGUpCiAgICAgIGlmKHRoaXMuJHJvdXRlLnF1ZXJ5Lm1ldHJpYyAmJiB0aGlzLm1ldHJpY3MubWFwKGU9PmUua2V5KS5pbmRleE9mKHRoaXMuJHJvdXRlLnF1ZXJ5Lm1ldHJpYykgIT09IC0xKSB7CiAgICAgICAgLy9pZiBzbywgcGFzcyB0aGF0IG1ldHJpYyB0byB0aGUgY29tcG9uZW50IGFzIHByb3BlcnR5CiAgICAgICAgdGhpcy5zZWxlY3RlZE1ldHJpYyA9IHRoaXMuJHJvdXRlLnF1ZXJ5Lm1ldHJpYwoKICAgICAgfSBlbHNlIHsKICAgICAgICAvL2lmIG5vdCBwYXNzZWQgb3Igbm90IGZvdW5kLCBqdXN0IHRha2UgdGhlIGZpcnN0IGVsZW1lbnQKICAgICAgICB0aGlzLnNlbGVjdGVkTWV0cmljID0gdGhpcy5tZXRyaWNzWzBdLmtleQogICAgICB9CiAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnc2V0QWN0aXZlTWV0cmljJywgdGhpcy5tZXRyaWNzLmZpbmQobWV0cmljID0+IG1ldHJpYy5rZXkgPT0gdGhpcy5zZWxlY3RlZE1ldHJpYykpIC8vbWFrZSBhY3RpdmUgKHNvIHRoYXQgd2Ugbm93IHRoZSBzY2FsZSBhbmQgY2FuIGRpc3BsYXkgYXMgbGFiZWwgb24geWF4aXMpCiAgICB9LAoKICAgIHNldExpbmVzOiBmdW5jdGlvbigpIHsKCiAgICAgIC8vZm9yIGVhY2ggbGluZSB3ZSBuZWVkLCBzZXQgc29tZSBxdWVyaWVzCiAgICAgIGxldCBsaW5lc0NvdW50ID0gKHRoaXMuJHJvdXRlLnF1ZXJ5LmxpbmVzKSA/IHRoaXMuJHJvdXRlLnF1ZXJ5LmxpbmVzIDogMQogICAgICBmb3IobGV0IGk9MDtpPGxpbmVzQ291bnQ7aSsrKSB7CgoKICAgICAgICAvL3NlYXJjaCBmb3IgZmlsdGVycyBpbiB0aGUgdXJsIHRoYXQgbWF0Y2ggdGhlIG9uZXMgd2UgaGF2ZSBpbiB0aGUgZGF0YWJhc2UKICAgICAgICBsZXQgcXVlcnkgPSB7bWV0cmljOiB0aGlzLnNlbGVjdGVkTWV0cmljfQogICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLmZpbHRlckNvbHVtbnMuZm9yRWFjaChmaWx0ZXJDb2x1bW4gPT4gewogICAgICAgICAgZmlsdGVyQ29sdW1uLmRiX2NvbHVtbnMuZm9yRWFjaChjb2x1bW4gPT4gewogICAgICAgICAgICBpZih0aGlzLiRyb3V0ZS5xdWVyeVtjb2x1bW5dKSB7CiAgICAgICAgICAgICAgaWYodGhpcy4kcm91dGUucXVlcnlbY29sdW1uXS5zcGxpdCgiLCIpW2ldKSB7IC8vZG8gbm90IGNvbnNpZGVyIGVtcHR5IHZhbHVlcwogICAgICAgICAgICAgICAgcXVlcnlbY29sdW1uXSA9IHRoaXMuJHJvdXRlLnF1ZXJ5W2NvbHVtbl0uc3BsaXQoIiwiKVtpXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICB9KQogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhZGRMaW5lJyxxdWVyeSkKICAgICAgfQogICAgICB0aGlzLmxpbmVzID0gdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXRMaW5lczsKICAgIH0sCgogICAgLyppbml0aWFsaXplRnJvbVVSTDogZnVuY3Rpb24ocGFyYW0pIHsKICAgICAgaWYocGFyYW0ubGluZXMpIHsKICAgICAgICB3aGlsZSAocGFyYW0ubGluZXMgPiAwKXsKICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhZGRMaW5lJykKICAgICAgICAgIHBhcmFtLmxpbmVzLS0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2FkZExpbmUnKQogICAgICB9CgoKICAgICAgbGV0IG1ldHJpYwogICAgICAvLyBpZiBhIG1ldHJpYyBpcyBzZXQgaW4gdXJsIHBhcmFtZXRlcnMKICAgICAgaWYocGFyYW0ubWV0cmljKSB7CiAgICAgICAgLy9sb29rIGZvciB0aGlzIG1ldHJpYyBpbiBjdXJyZW50IG1ldHJpYyBzdG9yYWdlLCBpZiB5b3UgZmluZCBzdGggc2V0IGl0LCBvdGhlcndpc2Ugc2V0IHRoZSBmaXJzdCBvbmUKICAgICAgICBtZXRyaWMgPSB0aGlzLiRzdG9yZS5zdGF0ZS5tZXRyaWNzLmZpbmQoaXRlbSA9PiBpdGVtLmtleSA9PSAgcGFyYW0ubWV0cmljKSA/IHRoaXMuJHN0b3JlLnN0YXRlLm1ldHJpY3MuZmluZChpdGVtID0+IGl0ZW0ua2V5ID09ICBwYXJhbS5tZXRyaWMpIDogbWV0cmljID0gdGhpcy4kc3RvcmUuc3RhdGUubWV0cmljc1swXQogICAgICB9IGVsc2UgewogICAgICAgIC8vaWYgbm9uZSBpcyBwYXNzZWQsIGp1c3QgdGFrZSB0aGUgZmlyc3Qgb25lCiAgICAgICAgbWV0cmljID0gdGhpcy4kc3RvcmUuc3RhdGUubWV0cmljc1swXQogICAgICB9CiAgICAgIC8vc2V0IHRoZSBtZXRyaWMKICAgICAgdGhpcy4kcmVmcy5tZXRyaWNzLnNlbGVjdChtZXRyaWMpCiAgICB9LCovCgogICAgLy9wbGVhc2UgZG9udCBoYXRlIG1lLCBidXQgdGhpcyBnZXRzIHRyaWdnZXJlZCB0aHJlZSB0aW1lcyBhcyBvdGVuIGFzIG5lY2Vzc2FyeS4uLi4KICAgIC8qc2V0RmlsdGVyc0Zyb21VUkw6IGZ1bmN0aW9uKHBhcmFtKSB7CgogICAgICAvL2ZpbmQgZmlsdGVycwogICAgICBsZXQgZmlsdGVycyA9IFtdCiAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLmZpbHRlckNvbHVtbnMuZm9yRWFjaChmaWx0ZXJDb2x1bW4gPT4gewogICAgICAgIC8vY29uc29sZS5sb2coZmlsdGVyQ29sdW1uKSAvL3RoaXMgaXMgdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgY29sdW1ucyAoZS5nLiAiTG9jYXRpb24iKQogICAgICAgIGZpbHRlckNvbHVtbi5kYl9jb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHsKICAgICAgICAgIGlmKHBhcmFtW2NvbHVtbl0pIHsKICAgICAgICAgICAgLy95b3UgY2FuIGhhdmUgYXMgbWFueSB2YWx1ZXMgZm9yIGEgZ2l2ZW4gcGFyYW1ldGVyIGFzIHlvdSBoYXZlIGxpbmVzIChlZy4gZmlsdGVyaW5nIHRocmVlIGxpbmVzIGJ5IHRocmVlIGRpZmZlcmVudCBjb21wYW5lcy4gaSBjb3JyZXNwb25kcyB0byB0aGUgbGluZSBjb3VudCkKICAgICAgICAgICAgcGFyYW1bY29sdW1uXS5zcGxpdCgiLCIpLmZvckVhY2goKHZhbHVlLGxpbmVDb3VudCkgPT4gewogICAgICAgICAgICAgIGZpbHRlcnNbbGluZUNvdW50XSA9IHtkaXNwbGF5OiBmaWx0ZXJDb2x1bW4uZGlzcGxheSwgZWxlbWVudDoge2ZpbHRlcjogY29sdW1uLCBrZXk6IHZhbHVlfX0KICAgICAgICAgICAgfSkKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICB9KQoKCgogICAgICAvL2l0ZXJhdGUgb3ZlciBleGlzdGluZyBsaW5lcyAoaW4gc2lkZWJhcikgYW5kIGFwcGx5IGZpbHRlcnMgZnJvbSBVUkwKICAgICAgdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXRMaW5lcy5mb3JFYWNoKChsaW5lLGxpbmVDb3VudCkgPT4gewogICAgICAgIGlmKHRoaXMuJHJlZnNbJ2ZpbHRlclJvdy0nK2xpbmUuaWRlbnRpZmllcl0pIHsKCiAgICAgICAgICBsZXQgZmlsdGVyID0gZmlsdGVyc1tsaW5lQ291bnRdCiAgICAgICAgICBjb25zb2xlLmxvZyhmaWx0ZXIpCiAgICAgICAgICB0aGlzLiRyZWZzWydmaWx0ZXJSb3ctJytsaW5lLmlkZW50aWZpZXJdWzBdLnNlbGVjdChmaWx0ZXIuZGlzcGxheSxmaWx0ZXIuZWxlbWVudCwiaW5pdGlhbGl6ZSIpCiAgICAgICAgfQogICAgICB9KQoKCgogICAgfSwqLwogICAgLy9hZGQgbmV3IGxpbmVzCiAgICBhZGRMaW5lOiBmdW5jdGlvbigpIHsKICAgICAgLy9sZXQgcHJldmlvdXNRdWVyeSA9IHRoaXMubGluZXNbdGhpcy5saW5lcy5sZW5ndGgtMV0gPT0gdW5kZWZpbmVkID8ge30gOiB0aGlzLmxpbmVzW3RoaXMubGluZXMubGVuZ3RoLTFdLnF1ZXJ5CiAgICAgIC8vZHVwbGljYXRpbmcgdGhlIHByZXZpb3VzIHF1ZXJ5IHRvIGFkZCBpdCB0byB0aGUgbmV4dCB0ZWNobmljYWxseSB3b3JrcywgYnV0IHRoZSB0d28gaW5zdGFuY2VzIHNlZW0gZGVwZW5kZW50IG9uIGFub3RoZXIgKHdoaWNoIGlzIG5vdCBleHBlY3RlZCBiZWhhdmlvcikKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2FkZExpbmUnKQoKICAgICAgbGV0IHJvdXRlID0gdGhpcy4kcm91dGUucXVlcnkgLy9nZXQgY3VycmVudCB1cmwgcGFyYW1ldGVycyBhcyBvYmplY3QKICAgICAgcm91dGUubGluZXMgPSB0aGlzLmxpbmVzLmxlbmd0aAogICAgICBsZXQgcm91dGVTdHJpbmcgPSBPYmplY3QuZW50cmllcyhyb3V0ZSkubWFwKGUgPT4gZW5jb2RlVVJJQ29tcG9uZW50KGVbMF0pICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KGVbMV0pKS5qb2luKCImIikgLy9wYXJzZSBhIHN0cmluZyBmcm9tIHRoYXQgb2JqZWN0CiAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LG51bGwsdGhpcy4kcm91dGUucGF0aCArICdub2tpYXR3aW4vIy8/JyArIHJvdXRlU3RyaW5nKSAvL3dyaXRlIHRoYXQgdG8gVVJMIChDQVVUSU9OOiB2dWVYIHN0b3JlIGFuZCBVUkwgbWlnaHQgYmUgaW5jb25zaXN0ZW50KQogICAgfSwKICB9LAoKICBjb21wb25lbnRzOiB7CiAgICBmaWx0ZXJSb3csIG1ldHJpY3MKICB9LAoKICBjcmVhdGVkKCkgewoKICB9LAp9Cg=="},{"version":3,"sources":["sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA","file":"sidebar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"col-4 sidebar hidden-md-down\">\n    <h1>Open Inc</h1>\n    <metrics v-if=\"selectedMetric\" ref=\"metrics\" :selected=\"selectedMetric\"/>\n    <div class=\"addLine\">\n      <button v-on:click=\"addLine\">Add Line</button>\n    </div>\n    <p style=\"padding: 0px 30px\">Select filter to change visualization:</p>\n    <ul>\n      <!-- display filterRow for every lines that is displayed -->\n      <filterRow\n        v-for=\"(line, index) in lines\"\n        :ref=\"'filterRow-'+line.identifier\"\n        :key=\"index\"\n        :line=\"line\"\n      />\n    </ul>\n\n  </div>\n</template>\n\n<script>\nimport filterRow from './filterRow.vue'\nimport metrics from './metrics.vue'\n\nexport default {\n  data() {\n    return {\n      selectedMetric: undefined,\n      lines: undefined\n    }\n  },\n\n  computed: {\n    /*//get lines (incl. color, identifier, filters, and selections) from store\n    lines: {\n      get: function(){\n        return this.$store.state.lines\n      }\n    },*/\n\n    metrics: function() {\n      return this.$store.state.metrics\n    },\n\n    filterColumns: function() {\n      return  this.$store.state.filterColumns\n    }\n\n\n  },\n\n  //if there are no lines on store when page is mounted, add one to always have one line available\n  watch: {\n    metrics: function(newMetrics) {\n      if(newMetrics.length > 0) {\n        this.setMetric()\n      }\n    },\n\n    filterColumns: function(newFilterColumns){\n      if(newFilterColumns.length > 0) {\n        this.setLines();\n      }\n    }\n\n    /*//set filters from URL\n    lines: function(newLines){\n      if(newLines) {\n        //console.log(this.$refs['filterRow-'+newLines[0].identifier])\n        this.setFiltersFromURL(this.$route.query)\n      }\n    }*/\n  },\n\n  mounted() {\n\n  },\n\n  methods: {\n    setMetric: function() {\n\n      //check if URL has a metric (and whether that metric is actually in the current table)\n      if(this.$route.query.metric && this.metrics.map(e=>e.key).indexOf(this.$route.query.metric) !== -1) {\n        //if so, pass that metric to the component as property\n        this.selectedMetric = this.$route.query.metric\n\n      } else {\n        //if not passed or not found, just take the first element\n        this.selectedMetric = this.metrics[0].key\n      }\n      this.$store.commit('setActiveMetric', this.metrics.find(metric => metric.key == this.selectedMetric)) //make active (so that we now the scale and can display as label on yaxis)\n    },\n\n    setLines: function() {\n\n      //for each line we need, set some queries\n      let linesCount = (this.$route.query.lines) ? this.$route.query.lines : 1\n      for(let i=0;i<linesCount;i++) {\n\n\n        //search for filters in the url that match the ones we have in the database\n        let query = {metric: this.selectedMetric}\n        this.$store.state.filterColumns.forEach(filterColumn => {\n          filterColumn.db_columns.forEach(column => {\n            if(this.$route.query[column]) {\n              if(this.$route.query[column].split(\",\")[i]) { //do not consider empty values\n                query[column] = this.$route.query[column].split(\",\")[i]\n              }\n            }\n          })\n        })\n        this.$store.dispatch('addLine',query)\n      }\n      this.lines = this.$store.getters.getLines;\n    },\n\n    /*initializeFromURL: function(param) {\n      if(param.lines) {\n        while (param.lines > 0){\n          this.$store.dispatch('addLine')\n          param.lines--\n        }\n      } else {\n        this.$store.dispatch('addLine')\n      }\n\n\n      let metric\n      // if a metric is set in url parameters\n      if(param.metric) {\n        //look for this metric in current metric storage, if you find sth set it, otherwise set the first one\n        metric = this.$store.state.metrics.find(item => item.key ==  param.metric) ? this.$store.state.metrics.find(item => item.key ==  param.metric) : metric = this.$store.state.metrics[0]\n      } else {\n        //if none is passed, just take the first one\n        metric = this.$store.state.metrics[0]\n      }\n      //set the metric\n      this.$refs.metrics.select(metric)\n    },*/\n\n    //please dont hate me, but this gets triggered three times as oten as necessary....\n    /*setFiltersFromURL: function(param) {\n\n      //find filters\n      let filters = []\n      this.$store.state.filterColumns.forEach(filterColumn => {\n        //console.log(filterColumn) //this is the display name of the columns (e.g. \"Location\")\n        filterColumn.db_columns.forEach(column => {\n          if(param[column]) {\n            //you can have as many values for a given parameter as you have lines (eg. filtering three lines by three different companes. i corresponds to the line count)\n            param[column].split(\",\").forEach((value,lineCount) => {\n              filters[lineCount] = {display: filterColumn.display, element: {filter: column, key: value}}\n            })\n          }\n        })\n      })\n\n\n\n      //iterate over existing lines (in sidebar) and apply filters from URL\n      this.$store.getters.getLines.forEach((line,lineCount) => {\n        if(this.$refs['filterRow-'+line.identifier]) {\n\n          let filter = filters[lineCount]\n          console.log(filter)\n          this.$refs['filterRow-'+line.identifier][0].select(filter.display,filter.element,\"initialize\")\n        }\n      })\n\n\n\n    },*/\n    //add new lines\n    addLine: function() {\n      //let previousQuery = this.lines[this.lines.length-1] == undefined ? {} : this.lines[this.lines.length-1].query\n      //duplicating the previous query to add it to the next technically works, but the two instances seem dependent on another (which is not expected behavior)\n      this.$store.dispatch('addLine')\n\n      let route = this.$route.query //get current url parameters as object\n      route.lines = this.lines.length\n      let routeString = Object.entries(route).map(e => encodeURIComponent(e[0]) + \"=\" + encodeURIComponent(e[1])).join(\"&\") //parse a string from that object\n      history.pushState({},null,this.$route.path + 'nokiatwin/#/?' + routeString) //write that to URL (CAUTION: vueX store and URL might be inconsistent)\n    },\n  },\n\n  components: {\n    filterRow, metrics\n  },\n\n  created() {\n\n  },\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n.sidebar {\n  background-color: #39393B;\n  color: white;\n  min-width: 300px;\n  padding: 0px !important;\n  min-height: 100%;\n}\n\nul {\n  margin: 0;\n  padding: 0\n}\n\n.addLine {\n  margin: 10px 30px;\n}\n.addLine button {\n  background: none;\n  border: 1px solid white;\n  border-radius: 5px;\n  padding: 10px;\n  color: white;\n  width: 100%;\n}\n\n.addLine button:hover {\n  font-weight: bold;\n}\n\n</style>\n"]}]}