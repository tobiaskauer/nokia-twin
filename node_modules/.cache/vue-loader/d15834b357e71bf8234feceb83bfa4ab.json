{"remainingRequest":"/Users/tk/GitHub/twin-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/twin-dashboard/src/components/results.vue?vue&type=style&index=0&id=137bdb16&scoped=true&lang=css&","dependencies":[{"path":"/Users/tk/GitHub/twin-dashboard/src/components/results.vue","mtime":1593244929889},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI21haW4gewogIGJhY2tncm91bmQtY29sb3I6ICNGN0Y3Rjc7CiAgfQpoMSB7CiAgbWFyZ2luLXRvcDogMjUlCn0K"},{"version":3,"sources":["results.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;AACA;AACA","file":"results.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"col\" id=\"main\">\n    <!--<headline  :queries=\"queries\"/>-->\n    <chart :data=\"results\" />\n    <!--<button v-on:click=\"click\">check data</button>-->\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { bus } from '../main'\nimport chart from './chart.vue'\nimport headline from './headline.vue'\n\nexport default {\n  name: 'results',\n\n  components: {\n    chart,\n    headline\n  },\n\n  data() {\n    return {\n      results: [],\n      queries : [\n        {\n          metric: undefined,\n          location: undefined,\n          company: undefined,\n          employee_title: undefined\n          //country: undefined,\n        }, {\n          metric: undefined,\n          location: undefined,\n          company: undefined,\n          employee_title: undefined,\n          //country: \"\",\n        }\n      ],\n    }\n  },\n\n  created () { //get initial set of queries from sidebar (preselected entries) --> dont\n    bus.$on('initial', (parameter) => {\n      this.setQuery(parameter)\n   })\n },\n\nmounted () { //when mounted\n  this.queries.forEach((query,i) => {\n    if(query.metric) this.getData(query,i) //if metric (mandatory) is set, check\n    //TODO: this still creates too many db requests when initialized\n  })\n\n   //start listening on eventbus for updated queries\n   bus.$on('query', (parameter) => {\n     this.setQuery(parameter)\n\n     //returns promise\n     let i = parameter.index\n     if(parameter.selector == \"metric\") {\n       this.queries.forEach((query,i) => {\n         //this.$set(this.results, i, this.getData(query))\n\n         this.getData(query,i)\n       })\n     } else {\n       this.getData(this.queries[i],i)\n       //this.$set(this.results, i, this.getData(this.queries[i]))\n\n     }\n  })\n},\n\nmethods: {\n  setQuery: function(parameter) {\n    //TODO: create new\n    if(parameter.selector == \"metric\") { //change global queries if the metric was changed\n      this.queries.forEach(query => {\n        query.metric = parameter.key //assin new parameter\n      })\n    } else {\n      this.queries[parameter.index][parameter.selector] = parameter.key //or jut change parameter if it's not the metric\n    }\n  },\n\n  getData: function(query,i) {\n    //TODO: check if metric is set\n    query.type='result' //set query end (quasi endpoint) for api.php\n    axios.post( \"http://localhost:8080/nokia/nokia-twin/comparison-api.php?\",query,\n      {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n    })\n    .then((response) => {\n      this.$set(this.results, i, {query: query, data: response.data})\n    })\n    .catch(error => {\n      console.log(error)\n    });\n\n\n  },\n  /*click: function() {\n    console.log(JSON.stringify(this.results))\n  }*/\n}\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#main {\n  background-color: #F7F7F7;\n  }\nh1 {\n  margin-top: 25%\n}\n</style>\n"]}]}