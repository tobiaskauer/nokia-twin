{"remainingRequest":"/Users/tk/GitHub/twin-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/twin-dashboard/src/components/vis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/twin-dashboard/src/components/vis.vue","mtime":1592563790464},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/twin-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnCmltcG9ydCB7IGJ1cyB9IGZyb20gJy4uL21haW4nCgoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICd2aXMnLAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgd2lkdGg6IDcwMCwKICAgICAgaGVpZ2h0OiA4MDAsCiAgICAgIHJlc3VsdHM6IFtdLAogICAgICBzY2FsZTogdW5kZWZpbmVkLAogICAgICBxdWVyaWVzIDogWwogICAgICAgIHsKICAgICAgICAgIG1ldHJpYzogdW5kZWZpbmVkLAogICAgICAgICAgbG9jYXRpb246IHVuZGVmaW5lZCwKICAgICAgICAgIGNvbXBhbnk6IHVuZGVmaW5lZCwKICAgICAgICAgIC8vY291bnRyeTogdW5kZWZpbmVkLAogICAgICAgICAgLy9yb2xlOiB1bmRlZmluZWQsCiAgICAgICAgfSwgewogICAgICAgICAgbWV0cmljOiB1bmRlZmluZWQsCiAgICAgICAgICBsb2NhdGlvbjogdW5kZWZpbmVkLAogICAgICAgICAgY29tcGFueTogdW5kZWZpbmVkLAogICAgICAgICAgLy9yb2xlOiAiIiwKICAgICAgICAgIC8vY291bnRyeTogIiIsCiAgICAgICAgfQogICAgICBdLAogICAgfQogIH0sCgogIGNyZWF0ZWQgKCkgeyAvL2dldCBpbml0aWFsIHNldCBvZiBxdWVyaWVzIGZyb20gc2lkZWJhciAocHJlc2VsZWN0ZWQgZW50cmllcykKICAgIGJ1cy4kb24oJ2luaXRpYWwnLCAocGFyYW1ldGVyKSA9PiB7IC8vbGlzdGVuIG9uIEV2ZW50QnVzIGZvciBjaGFuZ2VkIHF1ZXJpZXMKICAgICAgaWYocGFyYW1ldGVyLnNlbGVjdG9yID09ICJtZXRyaWMiKSB7IC8vY2hhbmdlIGdsb2JhbCBxdWVyaWVzIGlmIHRoZSBtZXRyaWMgd2FzIGNoYW5nZWQKICAgICAgICB0aGlzLnF1ZXJpZXMuZm9yRWFjaChxdWVyeSA9PiB7CiAgICAgICAgICBxdWVyeS5tZXRyaWMgPSBwYXJhbWV0ZXIua2V5IC8vYXNzaW4gbmV3IHBhcmFtZXRlcgogICAgICAgIH0pCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5xdWVyaWVzW3BhcmFtZXRlci5pbmRleF1bcGFyYW1ldGVyLnNlbGVjdG9yXSA9IHBhcmFtZXRlci5rZXkgLy9vciBqdXQgY2hhbmdlIHBhcmFtZXRlciBpZiBpdCdzIG5vdCB0aGUgbWV0cmljCiAgICAgIH0KICAgfSkKICAgdGhpcy5xdWVyaWVzLmZvckVhY2goKHF1ZXJ5LGkpID0+IHRoaXMuZ2V0RGF0YShxdWVyeSxpKSkKIH0sCgptb3VudGVkICgpIHsgLy93aGVuIG1vdW50ZWQKICAgbGV0IHN2ZyA9IGQzLnNlbGVjdCgiI3ZpcyBzdmciKQoKICAgdGhpcy5zY2FsZSA9IHRoaXMuZ2V0U2NhbGVzKCk7CiAgIHN2Zy5hcHBlbmQoImciKS5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKDAsMTAwKSIpLmNhbGwoZDMuYXhpc0JvdHRvbSh0aGlzLnNjYWxlLngpLnRpY2tzKDUpKQogICBzdmcuYXBwZW5kKCJnIikuY2FsbChkMy5heGlzTGVmdCh0aGlzLnNjYWxlLnkpLnRpY2tzKDUpKQogICB0aGlzLmxpbmVzID0gdGhpcy51cGRhdGUodGhpcy5yZXN1bHRzKQoKCgoKICAgLy9zdGFydCBsaXN0ZW5pbmcgb24gZXZlbnRidXMgZm9yIHVwZGF0ZWQKICAgYnVzLiRvbigncXVlcnknLCAocGFyYW1ldGVyKSA9PiB7CiAgICAgdGhpcy5xdWVyaWVzW3BhcmFtZXRlci5pbmRleF1bcGFyYW1ldGVyLnNlbGVjdG9yXSA9IHBhcmFtZXRlci5rZXkgLy9jaGFuZ2UgcXVlcnkKICAgICB0aGlzLmxhc3RJbmRleCA9IFtwYXJhbWV0ZXIuaW5kZXgscGFyYW1ldGVyLnNlbGVjdG9yXSAvL2NoYW5nZSBpbmRleCB0byB0cmlnZ2VyIHdhdGNoLWZ1bmN0aW9uCiAgICAgdGhpcy5nZXREYXRhKHRoaXMucXVlcmllc1twYXJhbWV0ZXIuaW5kZXhdLHBhcmFtZXRlci5pbmRleCkgLy9nZXQgZGF0YSBmb3IgdXBkYXRlZCBxdWVyeQogIH0pCn0sCgptZXRob2RzOiB7CiAgZ2V0RGF0YTogZnVuY3Rpb24ocXVlcnksaSkgewogICAgYXhpb3MucG9zdCggImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9ub2tpYS9ub2tpYS10d2luL2NvbXBhcmlzb24tYXBpLnBocD8iLHF1ZXJ5LAogICAgICB7aGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04J30KICAgIH0pCiAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgdGhpcy5yZXN1bHRzW2ldID0ge3F1ZXJ5OiBxdWVyeSwgZGF0YTogcmVzcG9uc2UuZGF0YSwgcGF0aDogIiJ9IC8vc2VuZCByZXNwb25zZSB0byB0aGlzLnJlc3VsdAoKICAgIH0pOwogIH0sCgogIGdldFNjYWxlczogZnVuY3Rpb24oKSB7CiAgICBsZXQgcGFyc2VUaW1lID0gZDMudGltZVBhcnNlKCIlWS0lbSIpOwogICAgY29uc3QgeCA9IGQzLnNjYWxlVGltZSgpLnJhbmdlKFswLCA0MzBdKTsgLy9UT0RPOiB3aWR0aAogICAgY29uc3QgeSA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoWzIxMCwgMF0pOyAvL1RPRE86IGhlaWdodAogICAgZDMuYXhpc0xlZnQoKS5zY2FsZSh4KTsKICAgIGQzLmF4aXNCb3R0b20oKS5zY2FsZSh5KTsKCgoKICAvKiAgbGV0IGFyciA9IFtdCiAgICBsZXQgcGFyc2VUaW1lID0gZDMudGltZVBhcnNlKCIlWS0lbSIpOwogICAgdGhpcy5yZXN1bHRzLmZvckVhY2gocmVzdWx0ID0+IHsKICAgICAgcmVzdWx0LmRhdGEuZm9yRWFjaChkYXRhID0+CiAgICAgICAgYXJyLnB1c2goZGF0YSkKICAgICAgKQogICAgfSkqLwoKCgogICAgLy94LmRvbWFpbihkMy5leHRlbnQoYXJyLCBkID0+IHBhcnNlVGltZShkLmQpKSk7CiAgICB4LmRvbWFpbihbcGFyc2VUaW1lKCIyMDAwLTAxIikscGFyc2VUaW1lKCIyMDIwLTEyIildKTsKICAgIC8veS5kb21haW4oZDMuZXh0ZW50KGFyciwgZCA9PiArZC5yKSk7CiAgICB5LmRvbWFpbihbMCw1XSk7CiAgICByZXR1cm4geyB4LCB5IH07CiAgfSwKCiAgdXBkYXRlOiBmdW5jdGlvbihyZXN1bHRzKSB7CgogICAgY29uc29sZS5sb2cocmVzdWx0cykKICAgIGNvbnNvbGUubG9nKHJlc3VsdHMubGVuZ3RoKQogICAgbGV0IHBhcnNlVGltZSA9IGQzLnRpbWVQYXJzZSgiJVktJW0iKTsKICAgIGxldCBhcnIgPSBbXQoKICAgIGNvbnN0IHBhdGggPSBkMy5saW5lKCkKICAgIC5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKQogICAgIC54KGQgPT4gdGhpcy5zY2FsZS54KHBhcnNlVGltZShkLmQpKSkKICAgICAueShkID0+IHRoaXMuc2NhbGUueShkLnIpKTsKCiAgICAgcmVzdWx0cy5mb3JFYWNoKHJlc3VsdCA9PiB7CiAgICAgICBjb25zb2xlLmxvZygiZm9vIikKICAgICAgIGFyci5wdXNoKHBhdGgocmVzdWx0LmRhdGEpKQogICAgIH0pCiAgICAgY29uc29sZS5sb2coYXJyKQogICAgIHJldHVybiBhcnI7CiAgfSwKfQp9Cg=="},{"version":3,"sources":["vis.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"vis.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"main\">\n    {{JSON.stringify(queries)}}\n    <svg :width=\"width\" :height=\"height\">\n      <path v-for=\"(result,index) in results\" v-bind:key=\"index\" :d=\"result.lines\" />\n    </svg>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport * as d3 from 'd3'\nimport { bus } from '../main'\n\n\nexport default {\n  name: 'vis',\n\n  data() {\n    return {\n      width: 700,\n      height: 800,\n      results: [],\n      scale: undefined,\n      queries : [\n        {\n          metric: undefined,\n          location: undefined,\n          company: undefined,\n          //country: undefined,\n          //role: undefined,\n        }, {\n          metric: undefined,\n          location: undefined,\n          company: undefined,\n          //role: \"\",\n          //country: \"\",\n        }\n      ],\n    }\n  },\n\n  created () { //get initial set of queries from sidebar (preselected entries)\n    bus.$on('initial', (parameter) => { //listen on EventBus for changed queries\n      if(parameter.selector == \"metric\") { //change global queries if the metric was changed\n        this.queries.forEach(query => {\n          query.metric = parameter.key //assin new parameter\n        })\n      } else {\n        this.queries[parameter.index][parameter.selector] = parameter.key //or jut change parameter if it's not the metric\n      }\n   })\n   this.queries.forEach((query,i) => this.getData(query,i))\n },\n\nmounted () { //when mounted\n   let svg = d3.select(\"#vis svg\")\n\n   this.scale = this.getScales();\n   svg.append(\"g\").attr(\"transform\", \"translate(0,100)\").call(d3.axisBottom(this.scale.x).ticks(5))\n   svg.append(\"g\").call(d3.axisLeft(this.scale.y).ticks(5))\n   this.lines = this.update(this.results)\n\n\n\n\n   //start listening on eventbus for updated\n   bus.$on('query', (parameter) => {\n     this.queries[parameter.index][parameter.selector] = parameter.key //change query\n     this.lastIndex = [parameter.index,parameter.selector] //change index to trigger watch-function\n     this.getData(this.queries[parameter.index],parameter.index) //get data for updated query\n  })\n},\n\nmethods: {\n  getData: function(query,i) {\n    axios.post( \"http://localhost:8080/nokia/nokia-twin/comparison-api.php?\",query,\n      {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n    })\n    .then((response) => {\n      this.results[i] = {query: query, data: response.data, path: \"\"} //send response to this.result\n\n    });\n  },\n\n  getScales: function() {\n    let parseTime = d3.timeParse(\"%Y-%m\");\n    const x = d3.scaleTime().range([0, 430]); //TODO: width\n    const y = d3.scaleLinear().range([210, 0]); //TODO: height\n    d3.axisLeft().scale(x);\n    d3.axisBottom().scale(y);\n\n\n\n  /*  let arr = []\n    let parseTime = d3.timeParse(\"%Y-%m\");\n    this.results.forEach(result => {\n      result.data.forEach(data =>\n        arr.push(data)\n      )\n    })*/\n\n\n\n    //x.domain(d3.extent(arr, d => parseTime(d.d)));\n    x.domain([parseTime(\"2000-01\"),parseTime(\"2020-12\")]);\n    //y.domain(d3.extent(arr, d => +d.r));\n    y.domain([0,5]);\n    return { x, y };\n  },\n\n  update: function(results) {\n\n    console.log(results)\n    console.log(results.length)\n    let parseTime = d3.timeParse(\"%Y-%m\");\n    let arr = []\n\n    const path = d3.line()\n    .curve(d3.curveBasis)\n     .x(d => this.scale.x(parseTime(d.d)))\n     .y(d => this.scale.y(d.r));\n\n     results.forEach(result => {\n       console.log(\"foo\")\n       arr.push(path(result.data))\n     })\n     console.log(arr)\n     return arr;\n  },\n}\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.lines path {\n  fill: none;\n  stroke: black\n}\n</style>\n"]}]}