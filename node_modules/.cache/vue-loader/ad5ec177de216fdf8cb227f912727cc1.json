{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/vis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/vis.vue","mtime":1596713360018},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJwoKLy9pbXBvcnQgeyByZWdyZXNzaW9uTGluZWFyIH0gZnJvbSAnZDMtcmVncmVzc2lvbic7CgoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzaG93Q29udGV4dDogdHJ1ZSwKICAgICAgeERvbWFpbjogW10sCiAgICAgIHN0eWxlOiB7CiAgICAgICAgd2lkdGg6IDEwMDAsIC8vVE9ETzogc2V0IHRvIHdpbmRvdyB3aWR0aAogICAgICAgIGhlaWdodDogMzAwLAogICAgICAgIG1hcmdpbjogewogICAgICAgICAgdG9wOiAyNSwKICAgICAgICAgIHJpZ2h0OiAyNSwKICAgICAgICAgIGJvdHRvbTogMCAsCiAgICAgICAgICBsZWZ0OiA0MAogICAgICAgIH0KICAgICAgfSwKICAgIH0KICB9LAoKICBjb21wdXRlZDogewoKICAgIGNvbnRleHQ6IHsgLy9nZXQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmcm9tIHN0b3JlCiAgICAgIGNhY2hlOiBmYWxzZSwKICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICBsZXQgcGFyc2VUaW1lID0gZDMudGltZVBhcnNlKCIlWS0lbSIpOwogICAgICAgIGxldCBpdGVtcyA9IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0Q29udGV4dC5tYXAoaXRlbSA9PiB7CiAgICAgICAgICBpdGVtLnggPSB0aGlzLnNjYWxlcy54KHBhcnNlVGltZShpdGVtLmRhdGUpKSAvL3RyYW5zbGF0ZSBkYXRlIHRvIHBvc2l0aW9uCiAgICAgICAgICByZXR1cm4gaXRlbQogICAgICAgIH0pCiAgICAgICAgcmV0dXJuIGl0ZW1zCiAgICAgIH0KICAgIH0sCgogICAgLy9nZXQgZGF0YSBmcm9tIHN0b3JlICh0aGlzIGlzIHRoZSBjb21wdXRlZCBwcm9wZXJ0eSAiZGF0YSIsIG5vdCB2dWUncyBkYXRhIHByb3BlcnR5KQogICAgZGF0YTogewogICAgICBjYWNoZTogZmFsc2UsCiAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0TGluZXMubWFwKGxpbmUgPT4gewogICAgICAgICAgbGluZS50b3VjaGVkID0gMCAvL2FkZCBjb3VudGVyIGZvciByZWFjdGl2aXR5IHdoZW4gdXNpbmcgYnJ1c2ggZnVuY3Rpb24KICAgICAgICAgIHJldHVybiBsaW5lCiAgICAgICAgfSkKICAgICAgfQogICAgfSwKCiAgICAvL2NoZWNrIGlmIGV2ZXJ5IGxpbmUgd2UgcmVjZWl2ZWQgYWxzbyBoYXMgZGF0YSB2YWx1ZXMgYmVmb3JlIHdlIHJlbmRlcgogICAgZGF0YVN0YXRlOiBmdW5jdGlvbigpIHsKICAgICAgbGV0IHN0YXRlID0gZmFsc2UgLy9hc3VtZSB0aGF0IGNvbmRpdGlvbiBpcyBub3QgbWV0CiAgICAgIGxldCBoYXNEYXRhID0gdGhpcy5kYXRhLm1hcChsaW5lID0+IChsaW5lLnZhbHVlcykgPyB0cnVlIDogZmFsc2UpIC8vY2hlY2sgaWYgdmFsdWUgYXJyYXkgZXhpc3RzCiAgICAgIGlmKGhhc0RhdGEubGVuZ3RoID4gMCAmJiBoYXNEYXRhLmV2ZXJ5KGJvb2wgPT4gYm9vbCkpIHN0YXRlID0gdHJ1ZSAvL2NoZWNrIGlmIGFsbCBsaW5lcyBoYXZlIGRhdGEgKGFuZCBpZiB3ZSBoYXZlIGxpbmVzIGF0IGFsbCwgb3RoZXJ3aXNlIGNvbmRpdGlvbiBmb3IgZXZlcnkoKSB3b3VsZCBiZSB0cnVlKQogICAgICByZXR1cm4gc3RhdGUKICAgIH0sCgogICAgLy9jb21wdXRlIHNjYWxlcyBiYXNlZCBvbiB2YWx1ZXMgb2YgYWxsIHBhc3NlZCBsaW5lcwogICAgc2NhbGVzOiB7CiAgICAgIGNhY2hlOiB0cnVlLAogICAgICBnZXQoKSB7CiAgICAgICAgbGV0IHBhcnNlVGltZSA9IGQzLnRpbWVQYXJzZSgiJVktJW0iKTsKICAgICAgICBsZXQgc3R5bGUgPSB0aGlzLnN0eWxlCgogICAgICAgIC8vc2V0IHJhbmdlIHZvciBhbGwgc2NhbGVzIG9uIG1haW4gY2hhcnQKICAgICAgICBjb25zdCB4ID0gZDMuc2NhbGVUaW1lKCkucmFuZ2UoW3N0eWxlLm1hcmdpbi5sZWZ0LHN0eWxlLndpZHRoIC0gc3R5bGUubWFyZ2luLmxlZnQgLSBzdHlsZS5tYXJnaW4ucmlnaHRdKTsKICAgICAgICBjb25zdCB5ID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbCiAgICAgICAgICBzdHlsZS5oZWlnaHQgLSBzdHlsZS5tYXJnaW4udG9wIC0gc3R5bGUubWFyZ2luLmJvdHRvbSwKICAgICAgICAgIHN0eWxlLm1hcmdpbi5ib3R0b20KICAgICAgICBdKTsKICAgICAgICBjb25zdCBjb25maWRlbmNlID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbMyw2XSkKCiAgICAgICAgLy9zZXQgcmFuZ2Ugdm9yIGFsbCBzY2FsZXMgb24gYnJ1c2hhYmxlIG1pY3JvIGNoYXJ0CiAgICAgICAgY29uc3QgbWljcm9YID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbc3R5bGUubWFyZ2luLmxlZnQsc3R5bGUud2lkdGggLSBzdHlsZS5tYXJnaW4ubGVmdCAtIHN0eWxlLm1hcmdpbi5yaWdodF0pOwogICAgICAgIGNvbnN0IG1pY3JvWSA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoWzQ1LDVdKTsKCiAgICAgICAgLy9iaW5kIHNjYWxlcyB0byBheGVzCiAgICAgICAgZDMuYXhpc0xlZnQoKS5zY2FsZSh4KTsKICAgICAgICBkMy5heGlzQm90dG9tKCkuc2NhbGUoeSk7CgogICAgICAgIC8vZ2V0IG1pbmltdW0gYW5kIG1heGltdW0gdmFsdWVzIGZvciBlYWNoIGxpbmUgKGkga25vdywgaXQncyBub3QgZWxlZ2FudCA6KQogICAgICAgIGlmKHRoaXMuZGF0YVN0YXRlKSB7CiAgICAgICAgICBsZXQgYXJyID0gW10KICAgICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGxpbmUgPT4gewogICAgICAgICAgICBsaW5lLnZhbHVlcy5mb3JFYWNoKHZhbHVlID0+IHsKICAgICAgICAgICAgICBhcnIucHVzaCh2YWx1ZSkKICAgICAgICAgICAgfSkKICAgICAgICAgIH0pCgogICAgICAgICAgLy9pZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lLCBnZXQgYSB0aGUgeERvbWFpbiBmcm9tIGRhdGEsIG90aGVyd2lzZSBpdCBoYXMgYmVlbiBzZXQgYnkgdGhlIGJydXNoCiAgICAgICAgICBsZXQgZG9tYWluID0gKHRoaXMueERvbWFpbi5sZW5ndGggPiAwKSA/IHRoaXMueERvbWFpbiA6IGQzLmV4dGVudChhcnIsIGQgPT4gcGFyc2VUaW1lKGQuZCkpCgogICAgICAgICAgLy9zZXQgZG9tYWluIG9mIGFsbCBzY2NhbGVzCiAgICAgICAgICB4LmRvbWFpbihkb21haW4pOwogICAgICAgICAgbWljcm9YLmRvbWFpbihkMy5leHRlbnQoYXJyLCBkID0+IHBhcnNlVGltZShkLmQpKSk7IC8vZGVmaW5pdGVseSBzZXQgdGhpcyB0byB0aGUgbWF4aW11bSBkYXRhIGRvbWFpbiBzbyB3ZSBjYW4gcHVzaCBpdCB0byB0aGUgbGltaXQKICAgICAgICAgIHkuZG9tYWluKGQzLmV4dGVudChhcnIsIGQgPT4gK2QucikpLm5pY2UoKTsKICAgICAgICAgIG1pY3JvWS5kb21haW4oZDMuZXh0ZW50KGFyciwgZCA9PiArZC5yKSk7CiAgICAgICAgICBjb25maWRlbmNlLmRvbWFpbihkMy5leHRlbnQoYXJyLCBkID0+ICtkLmMpKQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHsgeCwgeSwgbWljcm9YLCBtaWNyb1ksIGNvbmZpZGVuY2UgfTsKICAgICAgfQogICAgfSwKCgogICAgZXh0cmVtZVZhbHVlczogZnVuY3Rpb24oKXsKICAgICAgbGV0IHBhcnNlVGltZSA9IGQzLnRpbWVQYXJzZSgiJVktJW0iKTsKICAgICAgbGV0IGRvbWFpbiA9IHRoaXMuc2NhbGVzLnguZG9tYWluKCkKCiAgICAgIHJldHVybiB0aGlzLmRhdGEubWFwKGxpbmUgPT4geyAvL2NyZWF0ZSBhcnJheSBmb3IgYWxsIGxpbmVzLiBsb29rIGluIGFsbCBsaW5lcy4uLgoKICAgICAgICAvL2xvb2sgZm9yIHZhbHVlcyB0aGF0IGFyZSB3aXRoaW4gdGhlIHZpc2libGUgYm91bmRhcmllcyBvZiB0aGUgeC1heGlzCiAgICAgICAgbGV0IHZpc2libGUgPSBsaW5lLnZhbHVlcy5maWx0ZXIodmFsdWUgPT4gewogICAgICAgICAgbGV0IGRhdGUgPSBwYXJzZVRpbWUodmFsdWUuZCkKICAgICAgICAgIHJldHVybiAoZGF0ZSA+IGRvbWFpblswXSAmJiBkYXRlIDwgZG9tYWluWzFdKSA/IHRydWUgOiBmYWxzZTsKICAgICAgICB9KQoKICAgICAgICAvL2Zvcm0gdGhvc2UsIGdldCB0d28gcGVha3MgYW5kIHR3byB2YWxsZXkgdmFsdWVzCiAgICAgICAgbGV0IHNvcnRlZCA9IHZpc2libGUuc29ydCgoYSxiKSA9PiBhLnIgLSBiLnIpCiAgICAgICAgbGV0IGV4dHJlbWUgPSBzb3J0ZWQuc2xpY2UoMCwyKS5jb25jYXQoc29ydGVkLnNsaWNlKHNvcnRlZC5sZW5ndGgtMixzb3J0ZWQubGVuZ3RoKSkKCiAgICAgICAgbGV0IGNpcmNsZXMgPSBleHRyZW1lLm1hcCh2YWx1ZSA9PiB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB4OiB0aGlzLnNjYWxlcy54KHBhcnNlVGltZSh2YWx1ZS5kKSksCiAgICAgICAgICAgIHk6IHRoaXMuc2NhbGVzLnkodmFsdWUucikKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIGxldCBvYmogPSB7CiAgICAgICAgICBjb2xvcjogbGluZS5jb2xvciwKICAgICAgICAgIGNpcmNsZXM6IGNpcmNsZXMKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG9iagogICAgICB9KQogICAgfSwKCgogICAgLy9mb3IgZWFjaCBsaW5lLCBjb21wdXRlCiAgICBsaW5lczogewogICAgICBjYWNoZTogZmFsc2UsCiAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgbGV0IHBhcnNlVGltZSA9IGQzLnRpbWVQYXJzZSgiJVktJW0iKTsKCiAgICAgICAgLy9nZW5lcmF0b3IgZm9yIGFyZWEgZm9yIG1haW4gdmlzdWFsaXphdGlvbgogICAgICAgICBjb25zdCBwYXRoID0gZDMuYXJlYSgpCiAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKSAvL21ha2UgY3VydmUgc21vb3RoCiAgICAgICAgIC54KGQgPT4gdGhpcy5zY2FsZXMueChwYXJzZVRpbWUoZC5kKSkpCiAgICAgICAgIC8vY29tcHV0ZSB0d28geS12YWx1ZXMgYmFzZWQgb24gY29uZmlkZW5jZSgpIC0tPiBudW1iZXIgb2YgcmV2aWV3cyB0aGF0IHByb2R1Y2UgdGhlIGF2ZXJhZ2UgdmFsdWUKICAgICAgICAgLnkwKGQgPT4gdGhpcy5zY2FsZXMueShkLnIpLXRoaXMuc2NhbGVzLmNvbmZpZGVuY2UoZC5jKSkKICAgICAgICAgLnkxKGQgPT4gdGhpcy5zY2FsZXMueShkLnIpK3RoaXMuc2NhbGVzLmNvbmZpZGVuY2UoZC5jKSk7CgogICAgICAgICAvKmNvbnN0IHBhdGggPSBkMy5saW5lKCkKICAgICAgICAgLngoZCA9PiB0aGlzLnNjYWxlcy54KHBhcnNlVGltZShkLmQpKSkKICAgICAgICAgLnkoZCA9PiB0aGlzLnNjYWxlcy55KGQucikpOyovCgogICAgICAgICAvL2dlbmVyYXRvciBsaW5lIGZvciBicnVzaGFibGUgbWljcm8gdmlzdWFsemF0aW9uCiAgICAgICAgIGNvbnN0IG1pY3JvID0gZDMubGluZSgpCiAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKQogICAgICAgICAueChkID0+IHRoaXMuc2NhbGVzLm1pY3JvWChwYXJzZVRpbWUoZC5kKSkpCiAgICAgICAgIC55KGQgPT4gdGhpcy5zY2FsZXMubWljcm9ZKGQucikpOwoKICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tYXAobGluZSA9PiB7CiAgICAgICAgICAgaWYobGluZS52YWx1ZXMpIHsKICAgICAgICAgICAgIC8vY29tcHV0ZSBwYXRocyBiYXNlZCBvbiBsaW5lIHZhbHVlcwogICAgICAgICAgICAgbGluZS5wYXRoID0gcGF0aChsaW5lLnZhbHVlcykKICAgICAgICAgICAgIGxpbmUubWljcm8gPSBtaWNybyhsaW5lLnZhbHVlcykKICAgICAgICAgICB9CiAgICAgICAgICAgcmV0dXJuIGxpbmUKICAgICAgICAgfSkKICAgICAgfQogICAgfSwKICB9LAoKCgogIGRpcmVjdGl2ZXM6IHsKICAgIGF4aXMoZWwsIGJpbmRpbmcpIHsvL2R5bmFtaWNhbGx5IGNhbGwgYW5kIHVwZGF0ZSBheGlzCiAgICAgIGNvbnN0IGF4aXMgPSBiaW5kaW5nLmFyZzsKICAgICAgY29uc3QgYXhpc01ldGhvZCA9IHsgeDogImF4aXNCb3R0b20iLCB5OiAiYXhpc0xlZnQiIH1bYXhpc107CiAgICAgIGNvbnN0IG1ldGhvZEFyZyA9IGJpbmRpbmcudmFsdWVbYXhpc107CiAgICAgIGQzLnNlbGVjdChlbCkudHJhbnNpdGlvbigpLmNhbGwoZDNbYXhpc01ldGhvZF0obWV0aG9kQXJnKS50aWNrcyg1KSk7CiAgICB9LAogIH0sCgogIHdhdGNoOiB7CiAgICBkYXRhU3RhdGU6IGZ1bmN0aW9uKG5ld1N0YXRlKSB7CiAgICAgIC8vVE9ETzogQnJ1c2ggaXMgbm90IGluaXRpYWxpemVkIHdoZW4gdGhlIHNpemUgaXMgaW5pdGlhbGx5IGxvYWRlZC4gTm8gaWRlYSB3aHkuCiAgICAgIGlmKG5ld1N0YXRlKSB0aGlzLmJydXNoKCkgLy9pbml0aWFsaXplIGJydXNoIGFzIHNvb24gYXMgeW91IGhhdmUgZGF0YQogICAgfQogIH0sCgoKCiAgbW91bnRlZCAoKSB7CiAgICB0aGlzLmdldFdpZHRoKCkKICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCkgewogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5nZXRXaWR0aCk7CiAgICB9KQogIH0sCgogIG1ldGhvZHM6IHsKICAgIC8vaW5pdGlhbGl6ZSBicnVzaCAoZHJhZ2FibGUgc2VsZWN0b3IgZm9yIHgtYXhpcykgYW5kIGFkZCBpdCB0byBET00KICAgIGJydXNoOiBmdW5jdGlvbigpIHsKICAgICAgY29uc3QgYnJ1c2ggPSBkMy5icnVzaFgoKQogICAgICAgIC5leHRlbnQodGhpcy5zY2FsZXMubWljcm9YLnJhbmdlKCkubWFwKChlLGkpID0+IFtlLGkqNTBdKSkgLy9icnVzaCB3aWR0aCBpcyByYW5nZSBvZiBzY2FsZSwgaGVpZ2h0IGlzIGZpeGVkIGF0IDUwCiAgICAgICAgLm9uKCJlbmQiLCB0aGlzLnVwZGF0ZVgpCiAgICAgICAgLy8ub24oImJydXNoIGVuZCIsIHRoaXMudXBkYXRlWCkgLy91cGRhdGUgY29udGlub3VzbHkgd2hpbGUgbW92aW5nICh0aGlzIG1heSByZXN1bHQgaW4gY3JhcCBwZXJmb3JtYW5jZSkKCiAgICAgIGQzLnNlbGVjdCgiZy5icnVzaCIpCiAgICAgICAgLmNhbGwoYnJ1c2gpCiAgICAgICAgLmNhbGwoYnJ1c2gubW92ZSwgdGhpcy5zY2FsZXMueC5yYW5nZSgpKQoKCiAgICB9LAogICAgLy9zY2FsZSB4LWF4aXMgb2YgdmlzdWFsaXphdGlvbiB0byBmaXQgYm91bmRhcmllcyBvZiBicnVzaAogICAgdXBkYXRlWDogZnVuY3Rpb24oKSB7CiAgICAgIGxldCBkb21haW4gPSBkMy5ldmVudC5zZWxlY3Rpb24ubWFwKHZhbHVlID0+IHRoaXMuc2NhbGVzLm1pY3JvWC5pbnZlcnQodmFsdWUpKSAvL2dldCBuZXcgZG9tYWluIGJ5IGdldHRpbmcgZWRnZXMgb2Ygb3ZlcmxheSBhbmQgdHJhbnNsYXRlIHRoZW0gdG8gZGF0ZXMKICAgICAgZG9tYWluLmZvckVhY2goKHZhbHVlLGkpID0+IHsKICAgICAgICB0aGlzLiRzZXQodGhpcy54RG9tYWluLGksdmFsdWUpIC8vaXRlcmF0ZSBvdmVyIHRoaXMgYXJyYXkgdG8gdHJpZ2dlciByZWFjdGl2aXR5CiAgICAgIH0pCgogICAgICBkMy5zZWxlY3QoIi54QXhlcyIpLnRyYW5zaXRpb24oKS5jYWxsKGQzLmF4aXNCb3R0b20odGhpcy5zY2FsZXMueCkpIC8vdXBkYXRlIEF4aXMKICAgIH0sCgogICAgZ2V0V2lkdGg6IGZ1bmN0aW9uKCkgewogICAgICBpZih0aGlzLiRyZWZzLnZpcykgewogICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSB0aGlzLiRyZWZzLnZpcy5jbGllbnRXaWR0aAogICAgICAgIGlmKHRoaXMuZGF0YVN0YXRlKSB7CiAgICAgICAgICB0aGlzLmJydXNoKCkKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIC8qcHJvcHM6IHsKICB9LAoKCgogIGNyZWF0ZWQgKCkgewogIH0sCgogIG1ldGhvZHM6IHsKICB9LCovCn0K"},{"version":3,"sources":["vis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA","file":"vis.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"col-8\" ref=\"vis\">\n    <!--<div v-if=\"dataState\">\n      <div v-for=\"(line,index) in lines\" v-bind:key=\"index\">{{line.query}}</div>\n    </div>-->\n    <svg :width=\"style.width\" :height=\"style.height\" v-if=\"dataState\" class=\"lines\">\n      <g class=\"axes\">\n        <g v-axis:x=\"scales\" class=\"xAxes\" :transform=\"`translate(0,${style.height-style.margin.top-style.margin.bottom})`\"></g>\n        <g v-axis:y=\"scales\" class=\"yAxes\" :transform=\"`translate(${style.margin.left},0)`\"></g>\n      </g>\n      <g class=\"context\" v-if=\"showContext\">\n        <g v-for=\"(item, index) in context\" :key=\"`context-${index}`\" :transform=\"`translate(${item.x},0)`\">\n          <line x1=\"0\" x2=\"0\" :y1=\"style.margin.top\" :y2=\"style.height-style.margin.bottom-style.margin.top\" stroke=\"black\" stroke-dasharray=\"4\" />\n          <text x=\"10\" :y=\"style.margin.top+20\">{{item.text}}</text>\n        </g>\n      </g>\n      <g class=\"extremeValues\" v-if=\"dataState\">\n        <g v-for=\"(extremeLine, index) in extremeValues\" v-bind:key=\"'extreme-'+index\">\n          <circle v-for=\"(circle, index) in extremeLine.circles\" :key=\"'circle-'+index\" :cx=\"circle.x\" :cy=\"circle.y\" r=\"10\" fill=\"none\" :stroke=\"extremeLine.color\" stroke-width=\"1\" stroke-dasharray=\"4 1\"/>\n        </g>\n      </g>\n      <g class=\"legend\" :transform=\"`translate(${style.width-style.margin.right-50},${style.height-style.margin.bottom-50})`\">\n        <g>\n          <text text-anchor=\"end\">less confident</text>\n          <line x0=\"0\" x1=\"20\" y0=\"0\" y1=\"0\" transform=\"translate(2,-3)\" stroke=\"black\" stroke-width=\"2\"/>\n        </g>\n        <g transform=\"translate(0,10)\">\n          <text text-anchor=\"end\">more confident</text>\n          <line x0=\"0\" x1=\"20\" y0=\"0\" y1=\"0\" transform=\"translate(2,-3)\" stroke=\"black\" stroke-width=\"5\"/>\n        </g>\n\n      </g>\n      <g class=\"lines\" v-for=\"line in lines\" v-bind:key=\"line.identifier\" >\n        <path v-if=\"line.path\" :d=\"line.path\" :fill=\"line.color\" stroke=\"none\"/>\n        <!--<path v-if=\"line.path\" :d=\"line.path\" :stroke=\"line.color\" fill=\"none\"/>-->\n      </g>\n    </svg>\n\n    <!--brush for x-axis transformation -->\n    <svg :width=\"style.width\" height=\"50\" style=\"background-color: lightgrey\">\n      <g v-if=\"dataState\">\n        <g class=\"lines\" v-for=\"line in lines\" v-bind:key=\"line.identifier\" >\n          <path v-if=\"line.micro\" :d=\"line.micro\" :stroke=\"line.color\" stroke-opacity=\"0.5\" fill=\"none\"/>\n        </g>\n      </g>\n      <g class=\"brush\" />\n    </svg>\n\n\n    <form>\n      <div class=\"form-check\">\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\" v-model=\"showContext\" @click=\"showContext = !showContext\">\n        <label class=\"form-check-label\" for=\"exampleCheck1\">Show context</label>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\n//import { regressionLinear } from 'd3-regression';\n\n\nexport default {\n  data() {\n    return {\n      showContext: true,\n      xDomain: [],\n      style: {\n        width: 1000, //TODO: set to window width\n        height: 300,\n        margin: {\n          top: 25,\n          right: 25,\n          bottom: 0 ,\n          left: 40\n        }\n      },\n    }\n  },\n\n  computed: {\n\n    context: { //get additional information from store\n      cache: false,\n      get: function() {\n        let parseTime = d3.timeParse(\"%Y-%m\");\n        let items = this.$store.getters.getContext.map(item => {\n          item.x = this.scales.x(parseTime(item.date)) //translate date to position\n          return item\n        })\n        return items\n      }\n    },\n\n    //get data from store (this is the computed property \"data\", not vue's data property)\n    data: {\n      cache: false,\n      get: function() {\n        return this.$store.getters.getLines.map(line => {\n          line.touched = 0 //add counter for reactivity when using brush function\n          return line\n        })\n      }\n    },\n\n    //check if every line we received also has data values before we render\n    dataState: function() {\n      let state = false //asume that condition is not met\n      let hasData = this.data.map(line => (line.values) ? true : false) //check if value array exists\n      if(hasData.length > 0 && hasData.every(bool => bool)) state = true //check if all lines have data (and if we have lines at all, otherwise condition for every() would be true)\n      return state\n    },\n\n    //compute scales based on values of all passed lines\n    scales: {\n      cache: true,\n      get() {\n        let parseTime = d3.timeParse(\"%Y-%m\");\n        let style = this.style\n\n        //set range vor all scales on main chart\n        const x = d3.scaleTime().range([style.margin.left,style.width - style.margin.left - style.margin.right]);\n        const y = d3.scaleLinear().range([\n          style.height - style.margin.top - style.margin.bottom,\n          style.margin.bottom\n        ]);\n        const confidence = d3.scaleLinear().range([3,6])\n\n        //set range vor all scales on brushable micro chart\n        const microX = d3.scaleLinear().range([style.margin.left,style.width - style.margin.left - style.margin.right]);\n        const microY = d3.scaleLinear().range([45,5]);\n\n        //bind scales to axes\n        d3.axisLeft().scale(x);\n        d3.axisBottom().scale(y);\n\n        //get minimum and maximum values for each line (i know, it's not elegant :)\n        if(this.dataState) {\n          let arr = []\n          this.data.forEach(line => {\n            line.values.forEach(value => {\n              arr.push(value)\n            })\n          })\n\n          //if this is the first time, get a the xDomain from data, otherwise it has been set by the brush\n          let domain = (this.xDomain.length > 0) ? this.xDomain : d3.extent(arr, d => parseTime(d.d))\n\n          //set domain of all sccales\n          x.domain(domain);\n          microX.domain(d3.extent(arr, d => parseTime(d.d))); //definitely set this to the maximum data domain so we can push it to the limit\n          y.domain(d3.extent(arr, d => +d.r)).nice();\n          microY.domain(d3.extent(arr, d => +d.r));\n          confidence.domain(d3.extent(arr, d => +d.c))\n        }\n\n        return { x, y, microX, microY, confidence };\n      }\n    },\n\n\n    extremeValues: function(){\n      let parseTime = d3.timeParse(\"%Y-%m\");\n      let domain = this.scales.x.domain()\n\n      return this.data.map(line => { //create array for all lines. look in all lines...\n\n        //look for values that are within the visible boundaries of the x-axis\n        let visible = line.values.filter(value => {\n          let date = parseTime(value.d)\n          return (date > domain[0] && date < domain[1]) ? true : false;\n        })\n\n        //form those, get two peaks and two valley values\n        let sorted = visible.sort((a,b) => a.r - b.r)\n        let extreme = sorted.slice(0,2).concat(sorted.slice(sorted.length-2,sorted.length))\n\n        let circles = extreme.map(value => {\n          return {\n            x: this.scales.x(parseTime(value.d)),\n            y: this.scales.y(value.r)\n          }\n        })\n        let obj = {\n          color: line.color,\n          circles: circles\n        }\n        return obj\n      })\n    },\n\n\n    //for each line, compute\n    lines: {\n      cache: false,\n      get: function() {\n        let parseTime = d3.timeParse(\"%Y-%m\");\n\n        //generator for area for main visualization\n         const path = d3.area()\n         .curve(d3.curveBasis) //make curve smooth\n         .x(d => this.scales.x(parseTime(d.d)))\n         //compute two y-values based on confidence() --> number of reviews that produce the average value\n         .y0(d => this.scales.y(d.r)-this.scales.confidence(d.c))\n         .y1(d => this.scales.y(d.r)+this.scales.confidence(d.c));\n\n         /*const path = d3.line()\n         .x(d => this.scales.x(parseTime(d.d)))\n         .y(d => this.scales.y(d.r));*/\n\n         //generator line for brushable micro visualzation\n         const micro = d3.line()\n         .curve(d3.curveBasis)\n         .x(d => this.scales.microX(parseTime(d.d)))\n         .y(d => this.scales.microY(d.r));\n\n         return this.data.map(line => {\n           if(line.values) {\n             //compute paths based on line values\n             line.path = path(line.values)\n             line.micro = micro(line.values)\n           }\n           return line\n         })\n      }\n    },\n  },\n\n\n\n  directives: {\n    axis(el, binding) {//dynamically call and update axis\n      const axis = binding.arg;\n      const axisMethod = { x: \"axisBottom\", y: \"axisLeft\" }[axis];\n      const methodArg = binding.value[axis];\n      d3.select(el).transition().call(d3[axisMethod](methodArg).ticks(5));\n    },\n  },\n\n  watch: {\n    dataState: function(newState) {\n      //TODO: Brush is not initialized when the size is initially loaded. No idea why.\n      if(newState) this.brush() //initialize brush as soon as you have data\n    }\n  },\n\n\n\n  mounted () {\n    this.getWidth()\n    this.$nextTick(function() {\n      window.addEventListener('resize', this.getWidth);\n    })\n  },\n\n  methods: {\n    //initialize brush (dragable selector for x-axis) and add it to DOM\n    brush: function() {\n      const brush = d3.brushX()\n        .extent(this.scales.microX.range().map((e,i) => [e,i*50])) //brush width is range of scale, height is fixed at 50\n        .on(\"end\", this.updateX)\n        //.on(\"brush end\", this.updateX) //update continously while moving (this may result in crap performance)\n\n      d3.select(\"g.brush\")\n        .call(brush)\n        .call(brush.move, this.scales.x.range())\n\n\n    },\n    //scale x-axis of visualization to fit boundaries of brush\n    updateX: function() {\n      let domain = d3.event.selection.map(value => this.scales.microX.invert(value)) //get new domain by getting edges of overlay and translate them to dates\n      domain.forEach((value,i) => {\n        this.$set(this.xDomain,i,value) //iterate over this array to trigger reactivity\n      })\n\n      d3.select(\".xAxes\").transition().call(d3.axisBottom(this.scales.x)) //update Axis\n    },\n\n    getWidth: function() {\n      if(this.$refs.vis) {\n        this.style.width = this.$refs.vis.clientWidth\n        if(this.dataState) {\n          this.brush()\n        }\n      }\n    }\n  }\n\n  /*props: {\n  },\n\n\n\n  created () {\n  },\n\n  methods: {\n  },*/\n}\n</script>\n\n<style scoped>\ndiv {\n  background-color: #F7F7F7;\n}\nsvg.lines {\n  margin-top: 50px;\n  background-color: white;\n}\npath {\n  transition: d .3s\n}\n\n.legend {\n  font-size: 6pt;\n}\n\n.context text {\n  font-size: 10px;\n}\n</style>\n"]}]}