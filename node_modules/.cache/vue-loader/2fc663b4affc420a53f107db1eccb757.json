{"remainingRequest":"/Users/tk/GitHub/nokia-twin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokia-twin/src/components/vis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokia-twin/src/components/vis.vue","mtime":1595418996097},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJwovL2ltcG9ydCB7IHJlZ3Jlc3Npb25MaW5lYXIgfSBmcm9tICdkMy1yZWdyZXNzaW9uJzsKCgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcHV0ZWQ6IHsKICAgIHN0eWxlOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB3aWR0aDogMTAwMCwgLy9UT0RPOiBzZXQgdG8gd2luZG93IHdpZHRoCiAgICAgICAgaGVpZ2h0OiA1MDAsCiAgICAgICAgbWFyZ2luOiB7CiAgICAgICAgICB0b3A6IDI1LAogICAgICAgICAgcmlnaHQ6IDI1LAogICAgICAgICAgYm90dG9tOiAwICwKICAgICAgICAgIGxlZnQ6IDQwCiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIGNvbnRleHQ6IHsgLy9nZXQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmcm9tIHN0b3JlCiAgICAgIGNhY2hlOiBmYWxzZSwKICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICBsZXQgcGFyc2VUaW1lID0gZDMudGltZVBhcnNlKCIlWS0lbSIpOwogICAgICAgIGxldCBpdGVtcyA9IHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0Q29udGV4dC5tYXAoaXRlbSA9PiB7CiAgICAgICAgICBpdGVtLnggPSB0aGlzLnNjYWxlcy54KHBhcnNlVGltZShpdGVtLmRhdGUpKSAvL3RyYW5zbGF0ZSBkYXRlIHRvIHBvc2l0aW9uCiAgICAgICAgICByZXR1cm4gaXRlbQogICAgICAgIH0pCiAgICAgICAgcmV0dXJuIGl0ZW1zCiAgICAgIH0KICAgIH0sCgoKICAgIGRhdGE6IHsgLy9nZXQgZGF0YSBmcm9tIHN0b3JlCiAgICAgIGNhY2hlOiBmYWxzZSwKICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXRMaW5lcy5tYXAobGluZSA9PiB7CiAgICAgICAgICBsaW5lLnRvdWNoZWQgPSAwIC8vYWRkIGNvdW50ZXIgZm9yIHJlYWN0aXZpdHkgd2hlbiB1c2luZyBicnVzaCBmdW5jdGlvbgogICAgICAgICAgcmV0dXJuIGxpbmUKICAgICAgICB9KQogICAgICB9CiAgICB9LAoKICAgIGRhdGFTdGF0ZTogZnVuY3Rpb24oKSB7IC8vY2hlY2sgaWYgZXZlcnkgbGluZSB3ZSByZWNlaXZlZCBhbHNvIGhhcyBkYXRhIHZhbHVlcyBiZWZvcmUgd2UgcmVuZGVyCiAgICAgIGxldCBzdGF0ZSA9IGZhbHNlIC8vYXN1bWUgdGhhdCBjb25kaXRpb24gaXMgbm90IG1ldAogICAgICBsZXQgaGFzRGF0YSA9IHRoaXMuZGF0YS5tYXAobGluZSA9PiAobGluZS52YWx1ZXMpID8gdHJ1ZSA6IGZhbHNlKSAvL2NoZWNrIGlmIHZhbHVlIGFycmF5IGV4aXN0cwogICAgICBpZihoYXNEYXRhLmxlbmd0aCA+IDAgJiYgaGFzRGF0YS5ldmVyeShib29sID0+IGJvb2wpKSBzdGF0ZSA9IHRydWUgLy9jaGVjayBpZiBhbGwgbGluZXMgaGF2ZSBkYXRhIChhbmQgaWYgd2UgaGF2ZSBsaW5lcyBhdCBhbGwsIG90aGVyd2lzZSBjb25kaXRpb24gZm9yIGV2ZXJ5KCkgd291bGQgYmUgdHJ1ZSkKICAgICAgcmV0dXJuIHN0YXRlCiAgICB9LAoKICAgIHNjYWxlczogey8vY29tcHV0ZSBzY2FsZXMKICAgICAgY2FjaGU6IHRydWUsCiAgICAgIGdldCgpIHsKICAgICAgICBsZXQgcGFyc2VUaW1lID0gZDMudGltZVBhcnNlKCIlWS0lbSIpOwogICAgICAgIGxldCBzdHlsZSA9IHRoaXMuc3R5bGUKCiAgICAgICAgY29uc3Qgd2lkdGggPSBkMy5zY2FsZUxpbmVhcigpLnJhbmdlKFsyLDZdKQogICAgICAgIGNvbnN0IHggPSBkMy5zY2FsZVRpbWUoKS5yYW5nZShbc3R5bGUubWFyZ2luLmxlZnQsc3R5bGUud2lkdGggLSBzdHlsZS5tYXJnaW4ubGVmdCAtIHN0eWxlLm1hcmdpbi5yaWdodF0pOwogICAgICAgIGNvbnN0IHkgPSBkMy5zY2FsZUxpbmVhcigpLnJhbmdlKFsKICAgICAgICAgIHN0eWxlLmhlaWdodCAtIHN0eWxlLm1hcmdpbi50b3AgLSBzdHlsZS5tYXJnaW4uYm90dG9tLAogICAgICAgICAgc3R5bGUubWFyZ2luLmJvdHRvbQogICAgICAgIF0pOwogICAgICAgIGNvbnN0IG1pY3JvWSA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoWzQ1LDVdKTsKICAgICAgICBjb25zdCBtaWNyb1ggPSBkMy5zY2FsZUxpbmVhcigpLnJhbmdlKFtzdHlsZS5tYXJnaW4ubGVmdCxzdHlsZS53aWR0aCAtIHN0eWxlLm1hcmdpbi5sZWZ0IC0gc3R5bGUubWFyZ2luLnJpZ2h0XSk7CgogICAgICAgIGQzLmF4aXNMZWZ0KCkuc2NhbGUoeCk7CiAgICAgICAgZDMuYXhpc0JvdHRvbSgpLnNjYWxlKHkpOwoKICAgICAgICBpZih0aGlzLmRhdGFTdGF0ZSkgewogICAgICAgICAgbGV0IGFyciA9IFtdIC8vbm90IGVsZWdhbnQsIGJ1dCBlYXNpZXN0IHdheSB0byBmaW5kIGV4dHJlbWUgdmFsdWVzIGFjcm9zcyBhbGwgbGluZXMKICAgICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGxpbmUgPT4gewogICAgICAgICAgICBsaW5lLnZhbHVlcy5mb3JFYWNoKHZhbHVlID0+IHsKICAgICAgICAgICAgICBhcnIucHVzaCh2YWx1ZSkKICAgICAgICAgICAgfSkKICAgICAgICAgIH0pCgogICAgICAgICAgbGV0IGRvbWFpbiA9ICh0aGlzLnhEb21haW4ubGVuZ3RoID4gMCkgPyB0aGlzLnhEb21haW4gOiBkMy5leHRlbnQoYXJyLCBkID0+IHBhcnNlVGltZShkLmQpKSAvL2lmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUsIGdldCBhIHRoZSB4RG9tYWluIGZyb20gZGF0YSwgb3RoZXJ3aXNlIGl0IGhhcyBiZWVuIHNldCBieSB0aGUgYnJ1c2gKCiAgICAgICAgICB4LmRvbWFpbihkb21haW4pOwogICAgICAgICAgbWljcm9YLmRvbWFpbihkMy5leHRlbnQoYXJyLCBkID0+IHBhcnNlVGltZShkLmQpKSk7IC8vZGVmaW5pdGVseSBzZXQgdGhpcyB0byB0aGUgbWF4aW11bSBkYXRhIGRvbWFpbiBzbyB3ZSBjYW4gcHVzaCBpdCB0byB0aGUgbGltaXQKICAgICAgICAgIHkuZG9tYWluKGQzLmV4dGVudChhcnIsIGQgPT4gK2QucikpOwogICAgICAgICAgbWljcm9ZLmRvbWFpbihkMy5leHRlbnQoYXJyLCBkID0+ICtkLnIpKTsKICAgICAgICAgIHdpZHRoLmRvbWFpbihkMy5leHRlbnQoYXJyLCBkID0+ICtkLmMpKQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHsgeCwgeSwgbWljcm9YLCBtaWNyb1ksIHdpZHRoIH07CiAgICAgIH0KICAgIH0sCgogICAgLypsZWdlbmQ6IHsKICAgICAgY2FjaGU6IHRydWUsCiAgICAgIGdldDogZnVuY3Rpb24oKSB7CgogICAgICAgIGNvbnN0IHBhdGggPSBkMy5hcmVhKCkKICAgICAgICAuY3VydmUoZDMuY3VydmVCYXNpcykKICAgICAgICAueChkID0+IGQueCkKICAgICAgICAueTAoZCA9PiBkLnkwKQogICAgICAgIC55MShkID0+IGQueTEpOwoKICAgICAgICByZXR1cm4gcGF0aChbCiAgICAgICAgICB7eDoxLCB5MDoxLCB5MToxfSwKICAgICAgICAgIHt4OjEwLCB5MDoxMCwgeTE6MTB9CiAgICAgICAgXSkKICAgICAgfQogICAgfSwqLwoKCgogICAgbGluZXM6IHsKICAgICAgY2FjaGU6IGZhbHNlLAogICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIGxldCBwYXJzZVRpbWUgPSBkMy50aW1lUGFyc2UoIiVZLSVtIik7CiAgICAgICAgIGNvbnN0IHBhdGggPSBkMy5hcmVhKCkKICAgICAgICAgLy8uY3VydmUoZDMuY3VydmVOYXR1cmFsKQogICAgICAgICAuY3VydmUoZDMuY3VydmVCYXNpcykKICAgICAgICAgLngoZCA9PiB0aGlzLnNjYWxlcy54KHBhcnNlVGltZShkLmQpKSkKICAgICAgICAgLnkwKGQgPT4gdGhpcy5zY2FsZXMueShkLnIpLXRoaXMuc2NhbGVzLndpZHRoKGQuYykpCiAgICAgICAgIC55MShkID0+IHRoaXMuc2NhbGVzLnkoZC5yKSt0aGlzLnNjYWxlcy53aWR0aChkLmMpKTsKCiAgICAgICAgIGNvbnN0IG1pY3JvID0gZDMubGluZSgpCiAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKQogICAgICAgICAueChkID0+IHRoaXMuc2NhbGVzLm1pY3JvWChwYXJzZVRpbWUoZC5kKSkpCiAgICAgICAgIC55KGQgPT4gdGhpcy5zY2FsZXMubWljcm9ZKGQucikpOwoKICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tYXAobGluZSA9PiB7CiAgICAgICAgICAgaWYobGluZS52YWx1ZXMpIHsKICAgICAgICAgICAgIGxpbmUucGF0aCA9IHBhdGgobGluZS52YWx1ZXMpCiAgICAgICAgICAgICBsaW5lLm1pY3JvID0gbWljcm8obGluZS52YWx1ZXMpCiAgICAgICAgICAgfQogICAgICAgICAgIC8vaWYobGluZS52YWx1ZXMpIGxpbmUucmVnTGluZSA9IHJlZyhsaW5lLnZhbHVlcykKICAgICAgICAgICByZXR1cm4gbGluZQogICAgICAgICB9KQogICAgICB9CiAgICB9LAogIH0sCgogIGRpcmVjdGl2ZXM6IHsKICAgIGF4aXMoZWwsIGJpbmRpbmcpIHsvL2R5bmFtaWNhbGx5IGNhbGwgYW5kIHVwZGF0ZSBheGlzCgogICAgICAvL2xldCBwYXJzZVRpbWUgPSBkMy50aW1lUGFyc2UoIiVZLSVtIik7CiAgICAgIGNvbnN0IGF4aXMgPSBiaW5kaW5nLmFyZzsKICAgICAgY29uc3QgYXhpc01ldGhvZCA9IHsgeDogImF4aXNCb3R0b20iLCB5OiAiYXhpc0xlZnQiIH1bYXhpc107CiAgICAgIGNvbnN0IG1ldGhvZEFyZyA9IGJpbmRpbmcudmFsdWVbYXhpc107CiAgICAgIGQzLnNlbGVjdChlbCkudHJhbnNpdGlvbigpLmNhbGwoZDNbYXhpc01ldGhvZF0obWV0aG9kQXJnKS50aWNrcyg1KSk7CiAgICB9LAoKICAgIC8qYnJ1c2goZWwsIGJpbmRpbmcpIHsKICAgICAgbGV0IHNjYWxlcyA9IGJpbmRpbmcudmFsdWUKICAgICAgY29uc3QgYnJ1c2ggPSBkMy5icnVzaFgoKQogICAgICAgIC5leHRlbnQoc2NhbGVzLm1pY3JvWC5yYW5nZSgpLm1hcCgoZSxpKSA9PiBbZSxpKjUwXSkpCiAgICAgICAgLm9uKCJzdGFydCBicnVzaCIsIHVwZGF0ZVgpCgogICAgICBkMy5zZWxlY3QoZWwpLmNhbGwoYnJ1c2gpLmNhbGwoYnJ1c2gubW92ZSwgc2NhbGVzLngucmFuZ2UoKSkKICAgIH0qLwogIH0sCgoKCiAgbW91bnRlZCAoKSB7CiAgICBpZih0aGlzLmRhdGFTdGF0ZSkgdGhpcy5icnVzaCgpCiAgfSwKCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNob3dDb250ZXh0OiB0cnVlLAogICAgICB4RG9tYWluOiBbXQogICAgfQogIH0sCgogIG1ldGhvZHM6IHsKICAgIGJydXNoOiBmdW5jdGlvbigpIHsKICAgICAgY29uc3QgYnJ1c2ggPSBkMy5icnVzaFgoKQogICAgICAgIC5leHRlbnQodGhpcy5zY2FsZXMubWljcm9YLnJhbmdlKCkubWFwKChlLGkpID0+IFtlLGkqNTBdKSkKICAgICAgICAub24oImVuZCIsIHRoaXMudXBkYXRlWCkKCiAgICAgIGQzLnNlbGVjdCgiZy5icnVzaCIpCiAgICAgICAgLmNhbGwoYnJ1c2gpCiAgICAgICAgLmNhbGwoYnJ1c2gubW92ZSwgdGhpcy5zY2FsZXMueC5yYW5nZSgpKQogICAgfSwKICAgIHVwZGF0ZVg6IGZ1bmN0aW9uKCkgewogICAgICAvL1RPRE8gZG9tYWluIHNlZW1zIHRvIHdvcmssIGJ1dCB1c2VzIGluZXhpY2FibHkgaGlnaCB2YWx1ZXMKICAgICAgbGV0IGRvbWFpbiA9IGQzLmV2ZW50LnNlbGVjdGlvbi5tYXAodmFsdWUgPT4gdGhpcy5zY2FsZXMubWljcm9YLmludmVydCh2YWx1ZSkpIC8vZ2V0IG5ldyBkb21haW4gYnkgZ2V0dGluZyBlZGdlcyBvZiBvdmVybGF5IGFuZCB0cmFuc2xhdGUgdGhlbSB0byBkYXRlcwogICAgICBkb21haW4uZm9yRWFjaCgodmFsdWUsaSkgPT4gewogICAgICAgIHZhbHVlCiAgICAgICAgdGhpcy4kc2V0KHRoaXMueERvbWFpbixpLHZhbHVlKSAvL2l0ZXJhdGUgb3ZlciB0aGlzIGFycmF5IHRvIHRyaWdnZXIgcmVhY3Rpdml0eQogICAgICB9KQoKCiAgICAgIGQzLnNlbGVjdCgiLnhBeGVzIikudHJhbnNpdGlvbigpLmNhbGwoZDMuYXhpc0JvdHRvbSh0aGlzLnNjYWxlcy54KSkgLy91cGRhdGUgQXhpcwoKICAgIH0KICB9CgogIC8qcHJvcHM6IHsKICB9LAoKCgogIGNyZWF0ZWQgKCkgewogIH0sCgogIG1ldGhvZHM6IHsKICB9LCovCn0K"},{"version":3,"sources":["vis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA","file":"vis.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"col-9\">\n    <!--<div v-if=\"dataState\">\n      <div v-for=\"(line,index) in lines\" v-bind:key=\"index\">{{line.query}}</div>\n    </div>-->\n    <svg :width=\"style.width\" :height=\"style.height\" v-if=\"dataState\" class=\"lines\">\n      <g class=\"axes\">\n        <g v-axis:x=\"scales\" class=\"xAxes\" :transform=\"`translate(0,${style.height-style.margin.top-style.margin.bottom})`\"></g>\n        <g v-axis:y=\"scales\" class=\"yAxes\" :transform=\"`translate(${style.margin.left},0)`\"></g>\n      </g>\n      <g class=\"context\" v-if=\"showContext\">\n        <g v-for=\"(item, index) in context\" :key=\"`context-${index}`\" :transform=\"`translate(${item.x},0)`\">\n          <line x1=\"0\" x2=\"0\" :y1=\"style.margin.top\" :y2=\"style.height-style.margin.bottom-style.margin.top\" stroke=\"black\" stroke-dasharray=\"4\" />\n          <text x=\"10\" :y=\"style.margin.top+20\">{{item.text}}</text>\n        </g>\n      </g>\n      <!--<g class=\"legend\" :transform=\"`translate(${style.width-style.margin.right-200},100)`\">\n        <path :d=\"legend\" fill=\"black\"/>\n      </g>-->\n      <g class=\"lines\" v-for=\"line in lines\" v-bind:key=\"line.identifier\">\n        <path v-if=\"line.path\" :d=\"line.path\" :fill=\"line.color\" stroke=\"none\"/>\n      </g>\n    </svg>\n\n    <svg :width=\"style.width\" height=\"50\" v-if=\"dataState\" style=\"background-color: lightgrey\">\n      <g class=\"lines\" v-for=\"line in lines\" v-bind:key=\"line.identifier\" >\n        <path v-if=\"line.micro\" :d=\"line.micro\" :stroke=\"line.color\" stroke-opacity=\"0.5\" fill=\"none\"/>\n      </g>\n      <g class=\"brush\" />\n    </svg>\n\n\n    <form>\n      <div class=\"form-check\">\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\" v-model=\"showContext\" @click=\"showContext = !showContext\">\n        <label class=\"form-check-label\" for=\"exampleCheck1\">Show context</label>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n//import { regressionLinear } from 'd3-regression';\n\n\nexport default {\n  computed: {\n    style: function() {\n      return {\n        width: 1000, //TODO: set to window width\n        height: 500,\n        margin: {\n          top: 25,\n          right: 25,\n          bottom: 0 ,\n          left: 40\n        }\n      }\n    },\n\n    context: { //get additional information from store\n      cache: false,\n      get: function() {\n        let parseTime = d3.timeParse(\"%Y-%m\");\n        let items = this.$store.getters.getContext.map(item => {\n          item.x = this.scales.x(parseTime(item.date)) //translate date to position\n          return item\n        })\n        return items\n      }\n    },\n\n\n    data: { //get data from store\n      cache: false,\n      get: function() {\n        return this.$store.getters.getLines.map(line => {\n          line.touched = 0 //add counter for reactivity when using brush function\n          return line\n        })\n      }\n    },\n\n    dataState: function() { //check if every line we received also has data values before we render\n      let state = false //asume that condition is not met\n      let hasData = this.data.map(line => (line.values) ? true : false) //check if value array exists\n      if(hasData.length > 0 && hasData.every(bool => bool)) state = true //check if all lines have data (and if we have lines at all, otherwise condition for every() would be true)\n      return state\n    },\n\n    scales: {//compute scales\n      cache: true,\n      get() {\n        let parseTime = d3.timeParse(\"%Y-%m\");\n        let style = this.style\n\n        const width = d3.scaleLinear().range([2,6])\n        const x = d3.scaleTime().range([style.margin.left,style.width - style.margin.left - style.margin.right]);\n        const y = d3.scaleLinear().range([\n          style.height - style.margin.top - style.margin.bottom,\n          style.margin.bottom\n        ]);\n        const microY = d3.scaleLinear().range([45,5]);\n        const microX = d3.scaleLinear().range([style.margin.left,style.width - style.margin.left - style.margin.right]);\n\n        d3.axisLeft().scale(x);\n        d3.axisBottom().scale(y);\n\n        if(this.dataState) {\n          let arr = [] //not elegant, but easiest way to find extreme values across all lines\n          this.data.forEach(line => {\n            line.values.forEach(value => {\n              arr.push(value)\n            })\n          })\n\n          let domain = (this.xDomain.length > 0) ? this.xDomain : d3.extent(arr, d => parseTime(d.d)) //if this is the first time, get a the xDomain from data, otherwise it has been set by the brush\n\n          x.domain(domain);\n          microX.domain(d3.extent(arr, d => parseTime(d.d))); //definitely set this to the maximum data domain so we can push it to the limit\n          y.domain(d3.extent(arr, d => +d.r));\n          microY.domain(d3.extent(arr, d => +d.r));\n          width.domain(d3.extent(arr, d => +d.c))\n        }\n\n        return { x, y, microX, microY, width };\n      }\n    },\n\n    /*legend: {\n      cache: true,\n      get: function() {\n\n        const path = d3.area()\n        .curve(d3.curveBasis)\n        .x(d => d.x)\n        .y0(d => d.y0)\n        .y1(d => d.y1);\n\n        return path([\n          {x:1, y0:1, y1:1},\n          {x:10, y0:10, y1:10}\n        ])\n      }\n    },*/\n\n\n\n    lines: {\n      cache: false,\n      get: function() {\n        let parseTime = d3.timeParse(\"%Y-%m\");\n         const path = d3.area()\n         //.curve(d3.curveNatural)\n         .curve(d3.curveBasis)\n         .x(d => this.scales.x(parseTime(d.d)))\n         .y0(d => this.scales.y(d.r)-this.scales.width(d.c))\n         .y1(d => this.scales.y(d.r)+this.scales.width(d.c));\n\n         const micro = d3.line()\n         .curve(d3.curveBasis)\n         .x(d => this.scales.microX(parseTime(d.d)))\n         .y(d => this.scales.microY(d.r));\n\n         return this.data.map(line => {\n           if(line.values) {\n             line.path = path(line.values)\n             line.micro = micro(line.values)\n           }\n           //if(line.values) line.regLine = reg(line.values)\n           return line\n         })\n      }\n    },\n  },\n\n  directives: {\n    axis(el, binding) {//dynamically call and update axis\n\n      //let parseTime = d3.timeParse(\"%Y-%m\");\n      const axis = binding.arg;\n      const axisMethod = { x: \"axisBottom\", y: \"axisLeft\" }[axis];\n      const methodArg = binding.value[axis];\n      d3.select(el).transition().call(d3[axisMethod](methodArg).ticks(5));\n    },\n\n    /*brush(el, binding) {\n      let scales = binding.value\n      const brush = d3.brushX()\n        .extent(scales.microX.range().map((e,i) => [e,i*50]))\n        .on(\"start brush\", updateX)\n\n      d3.select(el).call(brush).call(brush.move, scales.x.range())\n    }*/\n  },\n\n\n\n  mounted () {\n    if(this.dataState) this.brush()\n  },\n\n  data() {\n    return {\n      showContext: true,\n      xDomain: []\n    }\n  },\n\n  methods: {\n    brush: function() {\n      const brush = d3.brushX()\n        .extent(this.scales.microX.range().map((e,i) => [e,i*50]))\n        .on(\"end\", this.updateX)\n\n      d3.select(\"g.brush\")\n        .call(brush)\n        .call(brush.move, this.scales.x.range())\n    },\n    updateX: function() {\n      //TODO domain seems to work, but uses inexicably high values\n      let domain = d3.event.selection.map(value => this.scales.microX.invert(value)) //get new domain by getting edges of overlay and translate them to dates\n      domain.forEach((value,i) => {\n        value\n        this.$set(this.xDomain,i,value) //iterate over this array to trigger reactivity\n      })\n\n\n      d3.select(\".xAxes\").transition().call(d3.axisBottom(this.scales.x)) //update Axis\n\n    }\n  }\n\n  /*props: {\n  },\n\n\n\n  created () {\n  },\n\n  methods: {\n  },*/\n}\n</script>\n\n<style scoped>\ndiv {\n  background-color: #F7F7F7;\n}\nsvg.lines {\n  margin-top: 50px;\n  background-color: white;\n}\npath {\n  transition: d .3s\n}\n\n.context text {\n  font-size: 10px;\n}\n</style>\n"]}]}