{"remainingRequest":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/eslint-loader/index.js??ref--13-0!/Users/tk/GitHub/nokia-twin/twin-dashboard/src/store/store.js","dependencies":[{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/src/store/store.js","mtime":1595317791840},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokia-twin/twin-dashboard/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciI7CmltcG9ydCBWdWUgZnJvbSAndnVlJzsKaW1wb3J0IFZ1ZXggZnJvbSAndnVleCc7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCB1bmlxaWQgZnJvbSAndW5pcWlkJzsKVnVlLnVzZShWdWV4KTsKZXhwb3J0IGRlZmF1bHQgbmV3IFZ1ZXguU3RvcmUoewogIHN0YXRlOiB7CiAgICBsaW5lczogW10sCiAgICBtZXRyaWNzOiBbewogICAgICBrZXk6ICJyYXRpbmdfb3ZlcmFsbCIsCiAgICAgIGRpc3BsYXk6ICJPdmVyYWxsIFJhdGluZ3MiCiAgICB9LCB7CiAgICAgIGtleTogInJhdGluZ19iYWxhbmNlIiwKICAgICAgZGlzcGxheTogIldvcmstTGlmZSBCYWxhbmNlIgogICAgfSwgewogICAgICBrZXk6ICJyYXRpbmdfY3VsdHVyZSIsCiAgICAgIGRpc3BsYXk6ICJDdWx0dXJlICYgVmFsdWVzIgogICAgfSwgewogICAgICBrZXk6ICJyYXRpbmdfY2FyZWVyIiwKICAgICAgZGlzcGxheTogIkNhcmVlciBPcHBvcnR1bml0aWVzIgogICAgfSwgewogICAgICBrZXk6ICJyYXRpbmdfY29tcCIsCiAgICAgIGRpc3BsYXk6ICJDb21wZW5zYXRpb24gJiBCZW5lZml0cyIKICAgIH0sIHsKICAgICAga2V5OiAicmF0aW5nX21nbXQiLAogICAgICBkaXNwbGF5OiAiU2VuaW9yIExlYWRlcnNoaXAiCiAgICB9XSwKICAgIGZpbHRlckNvbHVtbnM6IFt7CiAgICAgIG5hbWU6ICJDb21wYW55IiwKICAgICAgZGJfY29sdW1uczogWyJjb21wYW55Il0KICAgIH0sIC8ve25hbWU6ICJSb2xlIiwgZGJfY29sdW1uczogWyJlbXBsb3llZV90aXRsZSJdfSwKICAgIHsKICAgICAgbmFtZTogIkxvY2F0aW9uIiwKICAgICAgZGJfY29sdW1uczogWyJsb2NhdGlvbiIsICJjb3VudHJ5Il0KICAgIH1dLm1hcChmdW5jdGlvbiAoZmlsdGVyKSB7CiAgICAgIGZpbHRlci5lbGVtZW50cyA9IFtdOyAvL2J1Y2tldCB0byBmaWxsCgogICAgICBmaWx0ZXIuZGJfY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4pIHsKICAgICAgICB2YXIgcXVlcnkgPSB7CiAgICAgICAgICB0eXBlOiAnc2VsZWN0b3JzJywKICAgICAgICAgIGxpc3RTZWxlY3RvcjogY29sdW1uCiAgICAgICAgfTsKICAgICAgICBheGlvcy5wb3N0KCJodHRwOi8vbG9jYWxob3N0OjgwODAvbm9raWEvbm9raWEtdHdpbi9jb21wYXJpc29uLWFwaS5waHA/IiwgcXVlcnksIHsKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgICAgICAvL2ZvciBlYWNoIGl0ZW0gaW4gdGhlIGxpc3QsIGNyZWF0ZSBhIHVuaXF1ZSBvYmplY3QgdG8gcGFzcyBvbgogICAgICAgICAgICB2YXIgaXRlbSA9IHsKICAgICAgICAgICAgICBrZXk6IGVsZW1lbnRbY29sdW1uXSwKICAgICAgICAgICAgICBmaWx0ZXI6IGNvbHVtbiwKICAgICAgICAgICAgICBjb3VudDogZWxlbWVudC5jb3VudAogICAgICAgICAgICB9OwogICAgICAgICAgICBmaWx0ZXIuZWxlbWVudHMucHVzaChpdGVtKTsgLy9maWxsIHRoZSBidWNrZXQKICAgICAgICAgIH0pOwogICAgICAgICAgZmlsdGVyLmVsZW1lbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgcmV0dXJuIGIuY291bnQgLSBhLmNvdW50OwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gZmlsdGVyOwogICAgfSkKICB9LAogIGdldHRlcnM6IHsKICAgIC8vZ2V0IHJlZHVjZWQgbGlzdCBvZiBwb3NzaWJsZSB2YWx1ZXMgdG8gZGlzcGxheQogICAgZ2V0RmlsdGVyQ29sdW1uczogZnVuY3Rpb24gZ2V0RmlsdGVyQ29sdW1ucyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuZmlsdGVyQ29sdW1ucy5tYXAoZnVuY3Rpb24gKGZpbHRlcikgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBuYW1lOiBmaWx0ZXIubmFtZSwKICAgICAgICAgIGVsZW1lbnRzOiBmaWx0ZXIuZWxlbWVudHMuc2xpY2UoMCwgNSkKICAgICAgICB9OwogICAgICB9KTsKICAgIH0sCiAgICBnZXRMaW5lczogZnVuY3Rpb24gZ2V0TGluZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmxpbmVzOwogICAgfQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICAvL2luaXRpYWxpemUgYSBuZXcgbGluZSAoaW5jbC4gZmlsdGVycyBpbiBzaWRlYmFyIGFuZCBhY3R1YWwgbGluZSBpbiBncmFwaCksIHRyaWdnZXJlZCBmcm9tIHNpZGViYXIKICAgIGFkZExpbmU6IGZ1bmN0aW9uIGFkZExpbmUoc3RhdGUsIGxpbmUpIHsKICAgICAgLy9zZXQgYSBjb2xvciBmb3IgdG8gaWRlbnRpZnkgdGhlIGxpbmUKICAgICAgdmFyIGNvbG9ycyA9IFsiIzIwQzVBMCIsICIjQkQxMEUwIiwgIiNGNUE2MjMiXTsKICAgICAgbGluZS5jb2xvciA9IGNvbG9yc1tzdGF0ZS5saW5lcy5sZW5ndGhdOyAvL2luaXRpYWxpemUgZW1wdHkgcXVlcnkgZm9yIGRiIHdpdGggYWxsIHBvc3NpYmxlIGZpbHRlcnMKCiAgICAgIGxpbmUucXVlcnkgPSB7fTsKICAgICAgdmFyIGZpbHRlcnMgPSBbXTsKICAgICAgc3RhdGUuZmlsdGVyQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2wpIHsKICAgICAgICBjb2wuZGJfY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChkYmNvbCkgewogICAgICAgICAgZmlsdGVycy5wdXNoKGRiY29sKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIGZpbHRlcnMucHVzaCgibWV0cmljIik7CiAgICAgIGZpbHRlcnMuZm9yRWFjaChmdW5jdGlvbiAoZmlsdGVyKSB7CiAgICAgICAgcmV0dXJuIGxpbmUucXVlcnlbZmlsdGVyXSA9IHVuZGVmaW5lZDsKICAgICAgfSk7CiAgICAgIGxpbmUuaWRlbnRpZmllciA9IHVuaXFpZC50aW1lKCk7IC8vdW5pcXVlIGlkZW50aWZpZXIgdG8gdXBkYXRlIHF1ZXJ5IG9yIGRlbGV0ZSBsaW5lCgogICAgICBWdWUuc2V0KHN0YXRlLmxpbmVzLCBzdGF0ZS5saW5lcy5sZW5ndGgsIGxpbmUpOyAvL3B1c2ggbmV3IGxpbmUgYXQgZW5kIG9mIGxpbmVzIGFycmF5CiAgICB9LAogICAgLy93cml0ZSBxdWVyeSB0byBsaW5lcwogICAgd3JpdGVRdWVyeTogZnVuY3Rpb24gd3JpdGVRdWVyeShzdGF0ZSwgcGF5bG9hZCkgewogICAgICAvL2NvbnNvbGUubG9nKCJ3cml0ZVF1ZXJ5KCkgY2FsbGVkIiwgcGF5bG9hZCkKICAgICAgVnVlLnNldChzdGF0ZS5saW5lc1twYXlsb2FkLmluZGV4XS5xdWVyeSwgcGF5bG9hZC5maWx0ZXIsIHBheWxvYWQua2V5KTsKICAgIH0sCiAgICAvL3dyaXRlIEFQSSByZXR1cm4gdG8gbGluZXMgKGdvdHRlbiBmcm9tIGNhbGxBUEkoKSkKICAgIHdyaXRlVmFsdWVzOiBmdW5jdGlvbiB3cml0ZVZhbHVlcyhzdGF0ZSwgcGF5bG9hZCkgewogICAgICAvL2NvbnNvbGUubG9nKCJ3cml0ZURhdGEgY2FsbGVkIiwgcGF5bG9hZCkKICAgICAgVnVlLnNldChzdGF0ZS5saW5lc1twYXlsb2FkLmluZGV4XSwgInZhbHVlcyIsIHBheWxvYWQudmFsdWVzKTsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIGdldERhdGE6IGZ1bmN0aW9uIGdldERhdGEoX3JlZiwgcGF5bG9hZCkgewogICAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLAogICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQsCiAgICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7CgogICAgICAvL2NvbnNvbGUubG9nKCJnZXREYXRhKCkgY2FsbGVkIiwgcGF5bG9hZCkKICAgICAgaWYgKHBheWxvYWQuaWRlbnRpZmllcikgewogICAgICAgIGNvbW1pdCgnd3JpdGVRdWVyeScsIHsKICAgICAgICAgIGluZGV4OiBzdGF0ZS5saW5lcy5maW5kSW5kZXgoZnVuY3Rpb24gKHgpIHsKICAgICAgICAgICAgcmV0dXJuIHguaWRlbnRpZmllciA9PSBwYXlsb2FkLmlkZW50aWZpZXI7CiAgICAgICAgICB9KSwKICAgICAgICAgIGZpbHRlcjogcGF5bG9hZC5xdWVyeS5maWx0ZXIsCiAgICAgICAgICBrZXk6IHBheWxvYWQucXVlcnkua2V5CiAgICAgICAgfSk7CiAgICAgICAgZGlzcGF0Y2goJ2NhbGxBUEknLCBwYXlsb2FkLmlkZW50aWZpZXIpOwogICAgICB9IGVsc2UgewogICAgICAgIHN0YXRlLmxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUsIGkpIHsKICAgICAgICAgIGNvbW1pdCgnd3JpdGVRdWVyeScsIHsKICAgICAgICAgICAgaW5kZXg6IGksCiAgICAgICAgICAgIGZpbHRlcjogJ21ldHJpYycsCiAgICAgICAgICAgIGtleTogcGF5bG9hZC5xdWVyeS5rZXkKICAgICAgICAgIH0pOwogICAgICAgICAgZGlzcGF0Y2goJ2NhbGxBUEknLCBsaW5lLmlkZW50aWZpZXIpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgY2FsbEFQSTogZnVuY3Rpb24gY2FsbEFQSShfcmVmMiwgaWRlbnRpZmllcikgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjIuY29tbWl0LAogICAgICAgICAgc3RhdGUgPSBfcmVmMi5zdGF0ZTsKICAgICAgdmFyIHF1ZXJ5ID0gc3RhdGUubGluZXMuZmluZChmdW5jdGlvbiAoeCkgewogICAgICAgIHJldHVybiB4LmlkZW50aWZpZXIgPT0gaWRlbnRpZmllcjsKICAgICAgfSkucXVlcnk7CiAgICAgIGlmICghcXVlcnkubWV0cmljKSBxdWVyeS5tZXRyaWMgPSAicmF0aW5nX292ZXJhbGwiOyAvL2F2b2lkIGNyYXNoIGJlY2F1c2UgaW5pdGlhbCBtZXRyaWMgaGFzIG5vdCBiZWVuIGRlZmluZWQKCiAgICAgIHF1ZXJ5LnR5cGUgPSAncmVzdWx0JzsgLy9zZXQgcXVlcnkgZW5kIChxdWFzaSBlbmRwb2ludCkgZm9yIGFwaS5waHAKCiAgICAgIGF4aW9zLnBvc3QoImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9ub2tpYS9ub2tpYS10d2luL2NvbXBhcmlzb24tYXBpLnBocD8iLCBxdWVyeSwgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04JwogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBjb21taXQoJ3dyaXRlVmFsdWVzJywgewogICAgICAgICAgaW5kZXg6IHN0YXRlLmxpbmVzLmZpbmRJbmRleChmdW5jdGlvbiAoeCkgewogICAgICAgICAgICByZXR1cm4geC5pZGVudGlmaWVyID09IGlkZW50aWZpZXI7CiAgICAgICAgICB9KSwKICAgICAgICAgIHZhbHVlczogcmVzcG9uc2UuZGF0YQogICAgICAgIH0pOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7CiAgICAgIH0pOwogICAgfQogIH0KfSk7"},{"version":3,"sources":["/Users/tk/GitHub/nokia-twin/twin-dashboard/src/store/store.js"],"names":["Vue","Vuex","axios","uniqid","use","Store","state","lines","metrics","key","display","filterColumns","name","db_columns","map","filter","elements","forEach","column","query","type","listSelector","post","headers","then","response","data","element","item","count","push","sort","a","b","getters","getFilterColumns","slice","getLines","mutations","addLine","line","colors","color","length","filters","col","dbcol","undefined","identifier","time","set","writeQuery","payload","index","writeValues","values","actions","getData","dispatch","commit","findIndex","x","i","callAPI","find","metric","catch","error","console","log"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\nimport uniqid from 'uniqid';\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    lines: [],\n    metrics:[\n      {key: \"rating_overall\", display: \"Overall Ratings\"},\n      {key: \"rating_balance\", display: \"Work-Life Balance\"},\n      {key: \"rating_culture\", display: \"Culture & Values\"},\n      {key: \"rating_career\", display: \"Career Opportunities\"},\n      {key: \"rating_comp\", display: \"Compensation & Benefits\"},\n      {key: \"rating_mgmt\", display: \"Senior Leadership\"}\n    ],\n    filterColumns: [\n      {name: \"Company\", db_columns: [\"company\"]},\n      //{name: \"Role\", db_columns: [\"employee_title\"]},\n      {name: \"Location\", db_columns: [\"location\",\"country\"]},\n    ].map(filter => {\n      filter.elements = [] //bucket to fill\n\n      filter.db_columns.forEach(column => {\n        let query = {\n          type: 'selectors',\n          listSelector: column\n        }\n        axios.post( \"http://localhost:8080/nokia/nokia-twin/comparison-api.php?\",query,\n          {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n        })\n        .then(response => {\n          response.data.forEach(element => { //for each item in the list, create a unique object to pass on\n            let item = {\n              key: element[column],\n              filter: column,\n              count: element.count\n            }\n            filter.elements.push(item) //fill the bucket\n          })\n          filter.elements.sort((a,b) => b.count - a.count)\n        })\n      })\n\n      return filter\n    })\n  },\n\n\n\n  getters: {\n\n    //get reduced list of possible values to display\n    getFilterColumns: state => {\n      return state.filterColumns.map(filter => {\n        return {\n          name: filter.name,\n          elements: filter.elements.slice(0,5)\n        }\n      })\n    },\n\n    getLines: (state) => state.lines\n  },\n\n\n\n  mutations: {\n    //initialize a new line (incl. filters in sidebar and actual line in graph), triggered from sidebar\n    addLine(state, line) {\n      //set a color for to identify the line\n      let colors = [\"#20C5A0\",\"#BD10E0\",\"#F5A623\"]\n      line.color = colors[state.lines.length]\n\n      //initialize empty query for db with all possible filters\n      line.query = {}\n      let filters = []\n      state.filterColumns.forEach(col => {\n        col.db_columns.forEach(dbcol => {\n          filters.push(dbcol)\n        })\n      })\n      filters.push(\"metric\")\n      filters.forEach(filter => line.query[filter] = undefined)\n      line.identifier = uniqid.time() //unique identifier to update query or delete line\n      Vue.set(state.lines, state.lines.length, line) //push new line at end of lines array\n    },\n\n    //write query to lines\n    writeQuery(state, payload) {\n      //console.log(\"writeQuery() called\", payload)\n      Vue.set(state.lines[payload.index].query, payload.filter, payload.key)\n    },\n\n    //write API return to lines (gotten from callAPI())\n    writeValues(state, payload) {\n      //console.log(\"writeData called\", payload)\n      Vue.set(state.lines[payload.index], \"values\", payload.values)\n    },\n\n  },\n\n\n\n  actions: {\n    getData({dispatch, commit, state}, payload) {\n      //console.log(\"getData() called\", payload)\n      if(payload.identifier) {\n        commit('writeQuery',{\n          index: state.lines.findIndex(x=>x.identifier == payload.identifier),\n          filter: payload.query.filter,\n          key: payload.query.key\n        })\n        dispatch('callAPI',payload.identifier)\n      } else {\n        state.lines.forEach((line, i) => {\n          commit('writeQuery',{\n            index: i,\n            filter: 'metric',\n            key: payload.query.key\n          })\n          dispatch('callAPI',line.identifier)\n        })\n      }\n    },\n\n    callAPI( {commit,state}, identifier) {\n      let query = state.lines.find(x=>x.identifier == identifier).query\n      if(!query.metric) query.metric = \"rating_overall\" //avoid crash because initial metric has not been defined\n      query.type = 'result' //set query end (quasi endpoint) for api.php\n\n      axios.post( \"http://localhost:8080/nokia/nokia-twin/comparison-api.php?\",query,\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n\n        commit('writeValues',{\n          index: state.lines.findIndex(x=>x.identifier == identifier),\n          values: response.data\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      });\n\n    }\n  }\n})\n"]}]}