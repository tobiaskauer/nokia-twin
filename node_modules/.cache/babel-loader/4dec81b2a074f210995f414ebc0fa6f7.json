{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/vis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/vis.vue","mtime":1613994904716},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnOwppbXBvcnQgeyBWdWVEYXRlUGlja2VyIH0gZnJvbSAnQG1hdGhpZXVzdGFuL3Z1ZS1kYXRlcGlja2VyJzsKaW1wb3J0ICdAbWF0aGlldXN0YW4vdnVlLWRhdGVwaWNrZXIvZGlzdC92dWUtZGF0ZXBpY2tlci5taW4uY3NzJzsKaW1wb3J0ICogYXMgcG5nIGZyb20gJ3NhdmUtc3ZnLWFzLXBuZyc7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBWdWVEYXRlUGlja2VyOiBWdWVEYXRlUGlja2VyCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc2hvd0V2ZW50czogdHJ1ZSwKICAgICAgY3VycmVudEV2ZW50OiB7fSwKICAgICAgeERvbWFpbjogW10sCiAgICAgIGRhdGVQaWNrZXI6IFtdLAogICAgICAvL2VtcHR5IGFycmF5IHRvIHBhc3MgZGF0ZXMgYmV0d2VlbiBkYXRlcGlja2VyIGFuZCBzY2FsZXMKICAgICAgYnJ1c2g6IG51bGwsCiAgICAgIGxpbmVUaGlja25lc3M6IFszLCA3XSwKICAgICAgc3R5bGU6IHsKICAgICAgICB3aWR0aDogMTAwMCwKICAgICAgICAvL1RPRE86IHNldCB0byB3aW5kb3cgd2lkdGgKICAgICAgICBoZWlnaHQ6IDMwMCwKICAgICAgICBtYXJnaW46IHsKICAgICAgICAgIHRvcDogMzAsCiAgICAgICAgICByaWdodDogMjUsCiAgICAgICAgICBib3R0b206IDAsCiAgICAgICAgICBsZWZ0OiA0MAogICAgICAgIH0KICAgICAgfQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBldmVudHM6IHsKICAgICAgLy9nZXQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmcm9tIHN0b3JlCiAgICAgIGNhY2hlOiB0cnVlLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgICB2YXIgcGFyc2VUaW1lID0gZDMudGltZVBhcnNlKCIlZC0lbS0lWSIpOwogICAgICAgIC8qbGV0IGV2ZW50cyA9IHRoaXMuJHN0b3JlLnN0YXRlLmV2ZW50cy5tYXAoZXZlbnQgPT4gewogICAgICAgICAgZXZlbnQueCA9IHRoaXMuc2NhbGVzLngocGFyc2VUaW1lKGV2ZW50LmRhdGUpKSAvL3RyYW5zbGF0ZSBkYXRlIHRvIHBvc2l0aW9uCiAgICAgICAgICByZXR1cm4gZXZlbnQKICAgICAgICB9KSovCgogICAgICAgIHZhciBldmVudHMgPSBbXTsKICAgICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5ldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50cy5maW5kSW5kZXgoZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZGF0ZSA9PSBldmVudC5kYXRlOwogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgICAgICBldmVudHMucHVzaCh7CiAgICAgICAgICAgICAgZGF0ZTogZXZlbnQuZGF0ZSwKICAgICAgICAgICAgICB4OiBfdGhpcy5zY2FsZXMueChwYXJzZVRpbWUoZXZlbnQuZGF0ZSkpLAogICAgICAgICAgICAgIGZpbHRlcnM6IFtldmVudC5maWx0ZXJdLAogICAgICAgICAgICAgIC8vcmVkdW5kYW50LCBidXQgZWFzaWVyIHRvIHVzZSBpbiB0ZW1wbGF0ZQogICAgICAgICAgICAgIGNvbnRlbnQ6IFt7CiAgICAgICAgICAgICAgICBmaWx0ZXI6IGV2ZW50LmZpbHRlciwKICAgICAgICAgICAgICAgIHRleHQ6IGV2ZW50LnRleHQKICAgICAgICAgICAgICB9XQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGV2ZW50c1tpbmRleF0uY29udGVudC5wdXNoKHsKICAgICAgICAgICAgICBmaWx0ZXI6IGV2ZW50LmZpbHRlciwKICAgICAgICAgICAgICB0ZXh0OiBldmVudC50ZXh0CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBldmVudHNbaW5kZXhdLmZpbHRlcnMucHVzaChldmVudC5maWx0ZXIpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBldmVudHM7CiAgICAgIH0KICAgIH0sCiAgICBhY3RpdmVNZXRyaWM6IGZ1bmN0aW9uIGFjdGl2ZU1ldHJpYygpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuZ2V0QWN0aXZlTWV0cmljOwogICAgfSwKICAgIC8vZ2V0IGRhdGEgZnJvbSBzdG9yZSAodGhpcyBpcyB0aGUgY29tcHV0ZWQgcHJvcGVydHkgImRhdGEiLCBub3QgdnVlJ3MgZGF0YSBwcm9wZXJ0eSkKICAgIGRhdGE6IHsKICAgICAgY2FjaGU6IHRydWUsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmdldExpbmVzLm1hcChmdW5jdGlvbiAobGluZSkgewogICAgICAgICAgbGluZS50b3VjaGVkID0gMDsgLy9hZGQgY291bnRlciBmb3IgcmVhY3Rpdml0eSB3aGVuIHVzaW5nIGJydXNoIGZ1bmN0aW9uCiAgICAgICAgICAvL2NyZWF0ZSBzdHJpbmcgb2YgYWN0aXZlIGZpbHRlcnMgZm9yIGxlZ2VuZCBkaXNwbGF5CgogICAgICAgICAgdmFyIGxlZ2VuZCA9IE9iamVjdC5rZXlzKGxpbmUucXVlcnkpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAgIHJldHVybiBrZXkuc3RhcnRzV2l0aCgiZmlsdGVyIik7CiAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgICByZXR1cm4gbGluZS5xdWVyeVtrZXldOwogICAgICAgICAgfSkuam9pbigiLCAiKTsKICAgICAgICAgIGxpbmUubGVnZW5kID0gbGVnZW5kICE9ICIiID8gbGVnZW5kIDogIkFsbCBkYXRhIHNob3dpbmcsIG5vIGZpbHRlcnMgc2VsZWN0ZWQiOwogICAgICAgICAgcmV0dXJuIGxpbmU7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBhY3RpdmVGaWx0ZXJzOiBmdW5jdGlvbiBhY3RpdmVGaWx0ZXJzKCkgewogICAgICAvL2FycmF5IG9mIGFsbCBhY3RpdmUgZmlsdGVycyB0byBkZXRlcm1pbmUgd2hhdCBldmVudC1saW5lcyB0byBkaXNwbGF5CiAgICAgIHZhciBmb28gPSB0aGlzLmxpbmVzLm1hcChmdW5jdGlvbiAobGluZSkgewogICAgICAgIGlmIChsaW5lLmxlZ2VuZCAhPSAiQWxsIGRhdGEgc2hvd2luZywgbm8gZmlsdGVycyBzZWxlY3RlZCIpIHJldHVybiBsaW5lLmxlZ2VuZDsKICAgICAgfSk7CiAgICAgIHJldHVybiBmb287CiAgICB9LAogICAgLy9jaGVjayBpZiBldmVyeSBsaW5lIHdlIHJlY2VpdmVkIGFsc28gaGFzIGRhdGEgdmFsdWVzIGJlZm9yZSB3ZSByZW5kZXIKICAgIGRhdGFTdGF0ZTogZnVuY3Rpb24gZGF0YVN0YXRlKCkgewogICAgICB2YXIgc3RhdGUgPSBmYWxzZTsgLy9hc3VtZSB0aGF0IGNvbmRpdGlvbiBpcyBub3QgbWV0CgogICAgICB2YXIgaGFzRGF0YSA9IHRoaXMuZGF0YS5tYXAoZnVuY3Rpb24gKGxpbmUpIHsKICAgICAgICByZXR1cm4gbGluZS52YWx1ZXMgPyB0cnVlIDogZmFsc2U7CiAgICAgIH0pOyAvL2NoZWNrIGlmIHZhbHVlIGFycmF5IGV4aXN0cwoKICAgICAgaWYgKGhhc0RhdGEubGVuZ3RoID4gMCAmJiBoYXNEYXRhLmV2ZXJ5KGZ1bmN0aW9uIChib29sKSB7CiAgICAgICAgcmV0dXJuIGJvb2w7CiAgICAgIH0pKSBzdGF0ZSA9IHRydWU7IC8vY2hlY2sgaWYgYWxsIGxpbmVzIGhhdmUgZGF0YSAoYW5kIGlmIHdlIGhhdmUgbGluZXMgYXQgYWxsLCBvdGhlcndpc2UgY29uZGl0aW9uIGZvciBldmVyeSgpIHdvdWxkIGJlIHRydWUpCgogICAgICByZXR1cm4gc3RhdGU7CiAgICB9LAogICAgLy9jb21wdXRlIHNjYWxlcyBiYXNlZCBvbiB2YWx1ZXMgb2YgYWxsIHBhc3NlZCBsaW5lcwogICAgc2NhbGVzOiB7CiAgICAgIGNhY2hlOiB0cnVlLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICB2YXIgcGFyc2VUaW1lID0gZDMudGltZVBhcnNlKHRoaXMuJHN0b3JlLnN0YXRlLmdyYW51bGFyaXR5KTsKICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlOyAvL3NldCByYW5nZSB2b3IgYWxsIHNjYWxlcyBvbiBtYWluIGNoYXJ0CgogICAgICAgIHZhciB4ID0gZDMuc2NhbGVUaW1lKCkucmFuZ2UoW3N0eWxlLm1hcmdpbi5sZWZ0LCBzdHlsZS53aWR0aCAtIHN0eWxlLm1hcmdpbi5sZWZ0IC0gc3R5bGUubWFyZ2luLnJpZ2h0XSk7CiAgICAgICAgdmFyIHkgPSBkMy5zY2FsZUxpbmVhcigpLnJhbmdlKFtzdHlsZS5oZWlnaHQgLSBzdHlsZS5tYXJnaW4udG9wIC0gc3R5bGUubWFyZ2luLmJvdHRvbSwgc3R5bGUubWFyZ2luLmJvdHRvbV0pOwogICAgICAgIHZhciBjb25maWRlbmNlID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZSh0aGlzLmxpbmVUaGlja25lc3MpOyAvL3NldCByYW5nZSB2b3IgYWxsIHNjYWxlcyBvbiBicnVzaGFibGUgbWljcm8gY2hhcnQKCiAgICAgICAgdmFyIG1pY3JvWCA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoW3N0eWxlLm1hcmdpbi5sZWZ0LCBzdHlsZS53aWR0aCAtIHN0eWxlLm1hcmdpbi5sZWZ0IC0gc3R5bGUubWFyZ2luLnJpZ2h0XSk7CiAgICAgICAgdmFyIG1pY3JvWSA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoWzQ1LCA1XSk7IC8vYmluZCBzY2FsZXMgdG8gYXhlcwoKICAgICAgICBkMy5heGlzTGVmdCgpLnNjYWxlKHgpOwogICAgICAgIGQzLmF4aXNCb3R0b20oKS5zY2FsZSh5KTsgLy9nZXQgbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXMgZm9yIGVhY2ggbGluZSAoaSBrbm93LCBpdCdzIG5vdCBlbGVnYW50IDopCgogICAgICAgIGlmICh0aGlzLmRhdGFTdGF0ZSkgewogICAgICAgICAgdmFyIGFyciA9IFtdOwogICAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHsKICAgICAgICAgICAgbGluZS52YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICBhcnIucHVzaCh2YWx1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7IC8vaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSwgZ2V0IGEgdGhlIHhEb21haW4gZnJvbSBkYXRhLCBvdGhlcndpc2UgaXQgaGFzIGJlZW4gc2V0IGJ5IHRoZSBicnVzaAoKICAgICAgICAgIHZhciBkb21haW4gPSB0aGlzLnhEb21haW4ubGVuZ3RoID4gMCA/IHRoaXMueERvbWFpbiA6IGQzLmV4dGVudChhcnIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHJldHVybiBwYXJzZVRpbWUoZC5kKTsKICAgICAgICAgIH0pOwogICAgICAgICAgdmFyIHlEb21haW4gPSBkMy5leHRlbnQoYXJyLCBmdW5jdGlvbiAoZCkgewogICAgICAgICAgICByZXR1cm4gK2QucjsKICAgICAgICAgIH0pOwogICAgICAgICAgaWYgKHRoaXMuYWN0aXZlTWV0cmljLm1ldHJpY19sb3dfZW5kKSB5RG9tYWluWzBdID0gdGhpcy5hY3RpdmVNZXRyaWMubWV0cmljX2xvd19lbmQ7CiAgICAgICAgICBpZiAodGhpcy5hY3RpdmVNZXRyaWMubWV0cmljX2hpZ2hfZW5kKSB5RG9tYWluWzFdID0gdGhpcy5hY3RpdmVNZXRyaWMubWV0cmljX2hpZ2hfZW5kOyAvL3NldCBkb21haW4gb2YgYWxsIHNjY2FsZXMKCiAgICAgICAgICB4LmRvbWFpbihkb21haW4pOwogICAgICAgICAgbWljcm9YLmRvbWFpbihkMy5leHRlbnQoYXJyLCBmdW5jdGlvbiAoZCkgewogICAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lKGQuZCk7CiAgICAgICAgICB9KSk7IC8vZGVmaW5pdGVseSBzZXQgdGhpcyB0byB0aGUgbWF4aW11bSBkYXRhIGRvbWFpbiBzbyB3ZSBjYW4gcHVzaCBpdCB0byB0aGUgbGltaXQKCiAgICAgICAgICB5LmRvbWFpbih5RG9tYWluKS5uaWNlKCk7CiAgICAgICAgICBtaWNyb1kuZG9tYWluKHlEb21haW4pOwogICAgICAgICAgY29uZmlkZW5jZS5kb21haW4oZDMuZXh0ZW50KGFyciwgZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgcmV0dXJuICtkLmM7CiAgICAgICAgICB9KSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gewogICAgICAgICAgeDogeCwKICAgICAgICAgIHk6IHksCiAgICAgICAgICBtaWNyb1g6IG1pY3JvWCwKICAgICAgICAgIG1pY3JvWTogbWljcm9ZLAogICAgICAgICAgY29uZmlkZW5jZTogY29uZmlkZW5jZQogICAgICAgIH07CiAgICAgIH0KICAgIH0sCiAgICAvL2ZvciBlYWNoIGxpbmUsIGNvbXB1dGUgdGhlIGFjdHVhbCBwbG90CiAgICBsaW5lczogewogICAgICBjYWNoZTogZmFsc2UsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgICB2YXIgcGFyc2VUaW1lID0gZDMudGltZVBhcnNlKHRoaXMuJHN0b3JlLnN0YXRlLmdyYW51bGFyaXR5KTsgLy9nZW5lcmF0b3IgZm9yIGFyZWEgZm9yIG1haW4gdmlzdWFsaXphdGlvbgoKICAgICAgICB2YXIgcGF0aCA9IGQzLmFyZWEoKS5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKSAvL21ha2UgY3VydmUgc21vb3RoCiAgICAgICAgLngoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBfdGhpczIuc2NhbGVzLngocGFyc2VUaW1lKGQuZCkpOwogICAgICAgIH0pIC8vY29tcHV0ZSB0d28geS12YWx1ZXMgYmFzZWQgb24gY29uZmlkZW5jZSgpIC0tPiBudW1iZXIgb2YgcmV2aWV3cyB0aGF0IHByb2R1Y2UgdGhlIGF2ZXJhZ2UgdmFsdWUKICAgICAgICAueTAoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBfdGhpczIuc2NhbGVzLnkoZC5yKSAtIF90aGlzMi5zY2FsZXMuY29uZmlkZW5jZShkLmMpOwogICAgICAgIH0pLnkxKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLnNjYWxlcy55KGQucikgKyBfdGhpczIuc2NhbGVzLmNvbmZpZGVuY2UoZC5jKTsKICAgICAgICB9KTsgLy9nZW5lcmF0b3IgbGluZSBmb3IgYnJ1c2hhYmxlIG1pY3JvIHZpc3VhbHphdGlvbgoKICAgICAgICB2YXIgbWljcm8gPSBkMy5saW5lKCkuY3VydmUoZDMuY3VydmVCYXNpcykueChmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMi5zY2FsZXMubWljcm9YKHBhcnNlVGltZShkLmQpKTsKICAgICAgICB9KS55KGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLnNjYWxlcy5taWNyb1koZC5yKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gdGhpcy5kYXRhLm1hcChmdW5jdGlvbiAobGluZSkgewogICAgICAgICAgaWYgKGxpbmUudmFsdWVzKSB7CiAgICAgICAgICAgIC8vY29tcHV0ZSBwYXRocyBiYXNlZCBvbiBsaW5lIHZhbHVlcwogICAgICAgICAgICBsaW5lLnBhdGggPSBwYXRoKGxpbmUudmFsdWVzKTsKICAgICAgICAgICAgbGluZS5taWNybyA9IG1pY3JvKGxpbmUudmFsdWVzKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gbGluZTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGRlc2NyaXB0aW9uOiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHsKICAgICAgaWYgKCF0aGlzLiRzdG9yZS5zdGF0ZS50ZXh0LmRlc2NyaXB0aW9uKSByZXR1cm4gbnVsbDsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnRleHQuZGVzY3JpcHRpb247CiAgICB9CiAgfSwKICBkaXJlY3RpdmVzOiB7CiAgICBheGlzOiBmdW5jdGlvbiBheGlzKGVsLCBiaW5kaW5nKSB7CiAgICAgIC8vZHluYW1pY2FsbHkgY2FsbCBhbmQgdXBkYXRlIGF4aXMKICAgICAgdmFyIGF4aXMgPSBiaW5kaW5nLmFyZzsKICAgICAgdmFyIGF4aXNNZXRob2QgPSB7CiAgICAgICAgeDogImF4aXNCb3R0b20iLAogICAgICAgIHk6ICJheGlzTGVmdCIKICAgICAgfVtheGlzXTsKICAgICAgdmFyIG1ldGhvZEFyZyA9IGJpbmRpbmcudmFsdWVbYXhpc107CiAgICAgIGQzLnNlbGVjdChlbCkudHJhbnNpdGlvbigpLmNhbGwoZDNbYXhpc01ldGhvZF0obWV0aG9kQXJnKS50aWNrcyg1KSk7CiAgICB9CiAgfSwKICB3YXRjaDogewogICAgZGF0YVN0YXRlOiBmdW5jdGlvbiBkYXRhU3RhdGUobmV3U3RhdGUpIHsKICAgICAgLy9UT0RPOiBCcnVzaCBpcyBub3QgaW5pdGlhbGl6ZWQgd2hlbiB0aGUgc2l6ZSBpcyBpbml0aWFsbHkgbG9hZGVkLiBObyBpZGVhIHdoeS4KICAgICAgaWYgKG5ld1N0YXRlKSB0aGlzLmluaXRCcnVzaCgpOyAvL2luaXRpYWxpemUgYnJ1c2ggYXMgc29vbiBhcyB5b3UgaGF2ZSBkYXRhCiAgICB9LAogICAgc2NhbGVzOiBmdW5jdGlvbiBzY2FsZXMoKSB7CiAgICAgIHRoaXMuZGF0ZVBpY2tlciA9IHRoaXMuc2NhbGVzLnguZG9tYWluKCk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5nZXRXaWR0aCgpOwogICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5nZXRXaWR0aCk7CiAgICB9KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHBpY2tEYXRlOiBmdW5jdGlvbiBwaWNrRGF0ZShpKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIHBhcnNlVGltZSA9IGQzLnRpbWVQYXJzZSgiJVktJW0tJWQiKTsgLy91c2luZyBkaWZmZXJlbnQgdGltZWZvcm1hdHMsIHJlZG8gd2hlbiB0aGlzIGlzIGV2ZXIgcmVmYWN0b3JlZAoKICAgICAgdGhpcy5kYXRlUGlja2VyW2ldID0gcGFyc2VUaW1lKHRoaXMuZGF0ZVBpY2tlcltpXSk7IC8vbWFrZSBzdXJlIGRhdGVzIGZyb20gdGhlIHBpY2tlciBhcmUgRGF0ZXMgYW5kIG5vdCBzdHJpbmdzICh3aHkgdGhlIGhlbGwgZG9lcyB0aGlzIGdpdmUgbWEgc3RyaW5ncyBhbnl3YXkpCgogICAgICB0aGlzLiRzZXQodGhpcy54RG9tYWluLCBpLCB0aGlzLmRhdGVQaWNrZXJbaV0pOyAvL3NldCB4IGF4aXMgZm9yIGJpZyB2aXMKCiAgICAgIGQzLnNlbGVjdCgiZy5icnVzaCIpLmNhbGwodGhpcy5icnVzaCkuY2FsbCh0aGlzLmJydXNoLm1vdmUsIHRoaXMuZGF0ZVBpY2tlci5tYXAoZnVuY3Rpb24gKGRhdGUpIHsKICAgICAgICByZXR1cm4gX3RoaXMzLnNjYWxlcy5taWNyb1goZGF0ZSk7CiAgICAgIH0pKTsKICAgIH0sCiAgICB3cml0ZURhdGVzdG9VUkw6IGZ1bmN0aW9uIHdyaXRlRGF0ZXN0b1VSTChkYXRlcykgewogICAgICB2YXIgZm9ybWF0VGltZSA9IGQzLnRpbWVGb3JtYXQoIiVZLSVtLSVkIik7CiAgICAgIHZhciByb3V0ZSA9IHRoaXMuJHJvdXRlLnF1ZXJ5OyAvL2dldCBjdXJyZW50IHVybCBwYXJhbWV0ZXJzIGFzIG9iamVjdAoKICAgICAgcm91dGUucGVyaW9kID0gZGF0ZXMubWFwKGZ1bmN0aW9uIChkYXRlKSB7CiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWUoZGF0ZSk7CiAgICAgIH0pLmpvaW4oIiwiKTsKICAgICAgdmFyIHJvdXRlU3RyaW5nID0gT2JqZWN0LmVudHJpZXMocm91dGUpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoZVswXSkgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQoZVsxXSk7CiAgICAgIH0pLmpvaW4oIiYiKTsgLy9wYXJzZSBhIHN0cmluZyBmcm9tIHRoYXQgb2JqZWN0CgogICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7fSwgbnVsbCwgdGhpcy4kcm91dGUucGF0aCArICdub2tpYXR3aW4vIy8/JyArIHJvdXRlU3RyaW5nKTsgLy93cml0ZSB0aGF0IHRvIFVSTCAoQ0FVVElPTjogdnVlWCBzdG9yZSBhbmQgVVJMIG1pZ2h0IGJlIGluY29uc2lzdGVudCkKICAgIH0sCiAgICBzYXZlUE5HOiBmdW5jdGlvbiBzYXZlUE5HKCkgewogICAgICBwbmcuc2F2ZVN2Z0FzUG5nKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFydCcpLCAnY2hhcnQucG5nJyk7CiAgICB9LAoKICAgIC8qY2hhbmdlR3JhbnVsYXJpdHk6IGZ1bmN0aW9uKGdyYW51bGFyaXR5KSB7CiAgICAgfSovCiAgICAvL2luaXRpYWxpemUgYnJ1c2ggKGRyYWdhYmxlIHNlbGVjdG9yIGZvciB4LWF4aXMpIGFuZCBhZGQgaXQgdG8gRE9NCiAgICBpbml0QnJ1c2g6IGZ1bmN0aW9uIGluaXRCcnVzaCgpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICB0aGlzLmJydXNoID0gZDMuYnJ1c2hYKCkuZXh0ZW50KHRoaXMuc2NhbGVzLm1pY3JvWC5yYW5nZSgpLm1hcChmdW5jdGlvbiAoZSwgaSkgewogICAgICAgIHJldHVybiBbZSwgaSAqIDUwXTsKICAgICAgfSkpIC8vYnJ1c2ggd2lkdGggaXMgcmFuZ2Ugb2Ygc2NhbGUsIGhlaWdodCBpcyBmaXhlZCBhdCA1MAogICAgICAub24oImVuZCIsIHRoaXMudXBkYXRlWCk7IC8vLm9uKCJicnVzaCBlbmQiLCB0aGlzLnVwZGF0ZVgpIC8vdXBkYXRlIGNvbnRpbm91c2x5IHdoaWxlIG1vdmluZyAodGhpcyBtYXkgcmVzdWx0IGluIGNyYXAgcGVyZm9ybWFuY2UpCiAgICAgIC8vaWYgdXJsIGhhcyBhIHRpbWVwZXJpb2QsIHVzZSBpdAoKICAgICAgdmFyIHBhcnNlVGltZSA9IGQzLnRpbWVQYXJzZSgiJVktJW0tJWQiKTsKICAgICAgdmFyIGJydXNoUHJlc2V0ID0gdGhpcy4kcm91dGUucXVlcnkucGVyaW9kID8gdGhpcy4kcm91dGUucXVlcnkucGVyaW9kLnNwbGl0KCIsIikgLy9zcGxpdCBzdHJpbmcgaW50byB0d28gc2VwZXJhdGUgZGF0ZXMKICAgICAgLm1hcChmdW5jdGlvbiAoZGF0ZSkgewogICAgICAgIHJldHVybiBfdGhpczQuc2NhbGVzLm1pY3JvWCggLy9zY2FsZSB0aGVtIGFjY29yZGluZyB0byB0aGUgbWF4aW11bSBzY2FsZSBkZWZpbmVkIGluIHRoZSBicnVzaAogICAgICAgIHBhcnNlVGltZShkYXRlKSAvL3BhcnNlIHN0cmluZyB0byBkYXRlCiAgICAgICAgKTsKICAgICAgfSkgOiB0aGlzLnNjYWxlcy54LnJhbmdlKCk7IC8vaWYgcGVyaW9kIGlzIG5vdCBzZXQsIGp1c3QgdXNlIHRoZSBtYXggcmFuZ2UKCiAgICAgIGQzLnNlbGVjdCgiZy5icnVzaCIpLmNhbGwodGhpcy5icnVzaCkuY2FsbCh0aGlzLmJydXNoLm1vdmUsIGJydXNoUHJlc2V0KTsKICAgIH0sCiAgICAvL3NjYWxlIHgtYXhpcyBvZiB2aXN1YWxpemF0aW9uIHRvIGZpdCBib3VuZGFyaWVzIG9mIGJydXNoCiAgICB1cGRhdGVYOiBmdW5jdGlvbiB1cGRhdGVYKCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHZhciBkb21haW4gPSBkMy5ldmVudC5zZWxlY3Rpb24ubWFwKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHJldHVybiBfdGhpczUuc2NhbGVzLm1pY3JvWC5pbnZlcnQodmFsdWUpOwogICAgICB9KTsgLy9nZXQgbmV3IGRvbWFpbiBieSBnZXR0aW5nIGVkZ2VzIG9mIG92ZXJsYXkgYW5kIHRyYW5zbGF0ZSB0aGVtIHRvIGRhdGVzCgogICAgICBkb21haW4uZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGkpIHsKICAgICAgICBfdGhpczUuJHNldChfdGhpczUueERvbWFpbiwgaSwgdmFsdWUpOyAvL2l0ZXJhdGUgb3ZlciB0aGlzIGFycmF5IHRvIHRyaWdnZXIgcmVhY3Rpdml0eQoKICAgICAgfSk7CiAgICAgIGQzLnNlbGVjdCgiLnhBeGVzIikudHJhbnNpdGlvbigpLmNhbGwoZDMuYXhpc0JvdHRvbSh0aGlzLnNjYWxlcy54KSk7IC8vdXBkYXRlIEF4aXMKCiAgICAgIHRoaXMud3JpdGVEYXRlc3RvVVJMKHRoaXMuc2NhbGVzLnguZG9tYWluKCkpOwogICAgICBkMy5zZWxlY3QoImcuYnJ1c2ggLmxlZnRIYW5kbGUiKS5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKCIgKyBkMy5zZWxlY3QoIi5oYW5kbGUtLXciKS5hdHRyKCJ4IikgKyAiLDIwKSIpOyAvLy5hdHRyKCJjeCIsKQoKICAgICAgZDMuc2VsZWN0KCJnLmJydXNoIC5yaWdodEhhbmRsZSIpLmF0dHIoInRyYW5zZm9ybSIsICJ0cmFuc2xhdGUoIiArIGQzLnNlbGVjdCgiLmhhbmRsZS0tZSIpLmF0dHIoIngiKSArICIsMjApIik7IC8vLmF0dHIoImN4IiwpCiAgICB9LAogICAgZ2V0V2lkdGg6IGZ1bmN0aW9uIGdldFdpZHRoKCkgewogICAgICBpZiAodGhpcy4kcmVmcy52aXMpIHsKICAgICAgICB0aGlzLnN0eWxlLndpZHRoID0gdGhpcy4kcmVmcy52aXMuY2xpZW50V2lkdGg7CgogICAgICAgIGlmICh0aGlzLmRhdGFTdGF0ZSkgewogICAgICAgICAgdGhpcy5pbml0QnJ1c2goKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzaG93VGV4dDogZnVuY3Rpb24gc2hvd1RleHQoYWN0aXZlLCBldmVudCwgaW5kZXgpIHsKICAgICAgdGhpcy5jdXJyZW50RXZlbnQgPSBldmVudDsKCiAgICAgIGlmIChhY3RpdmUpIHsKICAgICAgICBkMy5zZWxlY3QoIi5ldmVudC0iICsgaW5kZXggKyAiIGxpbmUiKS50cmFuc2l0aW9uKCkuYXR0cigic3Ryb2tlLXdpZHRoIiwgOCkuYXR0cigieCIsIC00KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkMy5zZWxlY3RBbGwoIi5ldmVudHMgbGluZSIpLnRyYW5zaXRpb24oKS5hdHRyKCJzdHJva2Utd2lkdGgiLCAyKS5hdHRyKCJ4IiwgMCk7CiAgICAgIH0KICAgIH0KICB9Cn07"},{"version":3,"sources":["vis.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"visWrapper\" ref=\"vis\" style=\"margin-top: 50px;\">\n    <div class=\"errors\">\n      <div v-for=\"(line, i) in lines\" :key=\"i\">\n        <div v-if=\"dataState && line.values.length < 1\" class=\"alert alert-danger\" role=\"alert\" style=\"margin-top:10px;\">\n          Line {{(i+1)}} has no data. Maybe too much filters are active.\n        </div>\n      </div>\n      <div v-if=\"!$route.query.table\" class=\"alert alert-danger\" role=\"alert\" style=\"margin-top:10px;\">\n        No table defined\n      </div>\n    </div>\n\n    <div>\n        <svg id=\"chart\" :width=\"style.width\" :height=\"style.height+style.margin.top + style.margin.bottom\" v-if=\"dataState\" class=\"lines\">\n\n          <!--SVG mask to hide overflow -->\n          <defs>\n            <clipPath id=\"mask\">\n              <rect :x=\"style.margin.left\" y=\"0\" :width=\"style.width\" :height=\"style.height-style.margin.top-style.margin.bottom\" />\n            </clipPath>\n          </defs>\n\n          <!-- axes -->\n          <g class=\"axes\" :transform=\"`translate(0,${style.margin.top})`\">\n            <text font-size=\"6pt\" y=\"-10\" :x=\"style.margin.left+10\" text-anchor=\"middle\">{{activeMetric.display}}</text>\n            <g v-axis:x=\"scales\" class=\"xAxes\" :transform=\"`translate(0,${style.height-style.margin.top-style.margin.bottom})`\"></g>\n            <g v-axis:y=\"scales\" class=\"yAxes\" :transform=\"`translate(${style.margin.left},0)`\"></g>\n          </g>\n\n          <!--event overlay -->\n          <g class=\"events\" v-if=\"showEvents\" clip-path=\"url(#mask)\" :transform=\"`translate(0,${style.margin.top})`\"  >\n            <g v-for=\"(event, index) in events\" :class=\"'event-'+index\" :key=\"`event-${index}`\" :transform=\"`translate(${event.x},0)`\">\n              <line v-if=\"event.filters.filter(e => activeFilters.includes(e)).length > 0\" x0=\"0\" :y0=\"style.margin.top\" x1=\"0\" :y1=\"style.height-style.margin.bottom-style.margin.top\" stroke=\"lightgrey\" stroke-width=\"2\" fill=\"lightgrey\" @mouseover=\"showText(true,event,index)\" @mouseout=\"showText(false,{date: '', text: ''},index)\" />\n            </g>\n          </g>\n\n          <!--lines -->\n          <g clip-path=\"url(#mask)\" :transform=\"`translate(0,${style.margin.top})`\">\n            <g class=\"lines\" v-for=\"line in lines\" v-bind:key=\"line.identifier\" >\n              <path v-if=\"line.path\" :d=\"line.path\" :fill=\"line.color\" opacity=\".8\" stroke=\"none\"/>\n            </g>\n          </g>\n\n          <!-- legend in bottom right corner -->\n          <g class=\"legend\" :transform=\"`translate(${style.width-style.margin.right-50},${style.height-style.margin.bottom-50})`\">\n            <g>\n              <text text-anchor=\"end\">less confident</text>\n              <line x0=\"0\" x1=\"20\" y0=\"0\" y1=\"0\" transform=\"translate(2,-3)\" stroke=\"black\" stroke-width=\"2\"/>\n            </g>\n            <g transform=\"translate(0,10)\">\n              <text text-anchor=\"end\">more confident</text>\n              <line x0=\"0\" x1=\"20\" y0=\"0\" y1=\"0\" transform=\"translate(2,-3)\" stroke=\"black\" stroke-width=\"5\"/>\n            </g>\n            <g transform=\"translate(0,25)\">\n              <text v-for=\"(line, i) in lines\" :y=\"i*10\" :fill=\"line.color\" :key=\"i\" text-anchor=\"end\">{{line.legend}}\n              <!--  <tspan v-for=\"(text, j) in lines.query.filter(line=>{console.log(\"foo\")})\">foo, </tspan>\n                <tspan>bar </tspan>-->\n              </text>\n            </g>\n          </g>\n        </svg>\n    </div>\n\n    <!--brush for x-axis transformation -->\n    <div class=\"brush\">\n        <svg :width=\"style.width\" height=\"50\" style=\"background-color: lightgrey\">\n          <g v-if=\"dataState\">\n            <g class=\"lines\" v-for=\"line in lines\" v-bind:key=\"line.identifier\" >\n              <path v-if=\"line.micro\" :d=\"line.micro\" :stroke=\"line.color\" stroke-opacity=\"0.5\" fill=\"none\"/>\n            </g>\n          </g>\n          <g class=\"brush\">\n            <g class=\"leftHandle\"><g transform=\"translate(-5,0)\"><path fill=\"grey\"  transform=\"scale(0.015)\" d=\"M990,500c0-13.6-5.9-25.7-15.2-34.1l0,0L821.7,328l0,0c-8.1-7.3-18.9-11.8-30.7-11.8c-25.4,0-45.9,20.6-45.9,45.9c0,13.6,5.9,25.7,15.2,34.1l0,0l64.1,57.7H175.7l64.1-57.7l0,0c9.3-8.4,15.2-20.6,15.2-34.1c0-25.4-20.6-45.9-45.9-45.9c-11.8,0-22.6,4.5-30.7,11.8l0,0L25.2,465.9l0,0C15.9,474.3,10,486.4,10,500s5.9,25.7,15.2,34.1l0,0L178.3,672l0,0c8.1,7.3,18.9,11.8,30.7,11.8c25.4,0,45.9-20.6,45.9-45.9c0-13.6-5.9-25.7-15.2-34.1l0,0l-64.1-57.7h648.7l-64.1,57.7l0,0c-9.3,8.4-15.2,20.6-15.2,34.1c0,25.4,20.6,45.9,45.9,45.9c11.8,0,22.6-4.5,30.7-11.8l0,0l153.1-137.8l0,0C984.1,525.8,990,513.6,990,500z\" /></g></g>\n            <g class=\"rightHandle\"><g transform=\"translate(-5,0)\"><path fill=\"grey\"  transform=\"scale(0.015)\" d=\"M990,500c0-13.6-5.9-25.7-15.2-34.1l0,0L821.7,328l0,0c-8.1-7.3-18.9-11.8-30.7-11.8c-25.4,0-45.9,20.6-45.9,45.9c0,13.6,5.9,25.7,15.2,34.1l0,0l64.1,57.7H175.7l64.1-57.7l0,0c9.3-8.4,15.2-20.6,15.2-34.1c0-25.4-20.6-45.9-45.9-45.9c-11.8,0-22.6,4.5-30.7,11.8l0,0L25.2,465.9l0,0C15.9,474.3,10,486.4,10,500s5.9,25.7,15.2,34.1l0,0L178.3,672l0,0c8.1,7.3,18.9,11.8,30.7,11.8c25.4,0,45.9-20.6,45.9-45.9c0-13.6-5.9-25.7-15.2-34.1l0,0l-64.1-57.7h648.7l-64.1,57.7l0,0c-9.3,8.4-15.2,20.6-15.2,34.1c0,25.4,20.6,45.9,45.9,45.9c11.8,0,22.6-4.5,30.7-11.8l0,0l153.1-137.8l0,0C984.1,525.8,990,513.6,990,500z\" /></g></g>\n          </g>\n        </svg>\n    </div>\n\n    <div class=\"d-flex\" style=\"margin-top: 20px;\">\n      <div class=\"events p-8\">\n        <form>\n          <div class=\"form-check\">\n            <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\" v-model=\"showEvents\" @click=\"showEvents = !showEvents\">\n            <label class=\"form-check-label\" for=\"exampleCheck1\">Events:</label>\n          </div>\n        </form>\n        <div class=\"currentEvent\">\n          <span class=\"date\">{{currentEvent.date}}</span>\n          <p v-for=\"(e,i) in currentEvent.content\" :key=\"i\"><span v-if=\"activeFilters.includes(e.filter)\" v-html=\"e.text\"></span></p>\n          <!--<p v-html=\"currentEvent.text\"></p>-->\n        </div>\n      </div>\n      <div class=\"p-4 settings\" style=\"border-left: 1px dotted grey; padding-left: 10px;\">\n        <span class=\"pickDescription\">Start: </span><VueDatePicker @onChange=\"pickDate(0)\" v-model=\"datePicker[0]\" />\n        <span class=\"pickDescription\">End: </span><VueDatePicker @onChange=\"pickDate(1)\" v-model=\"datePicker[1]\" />\n        <!--Granularity:\n        <ui>\n          <li @onClick=\"changeGranularity('day')\">Day</li>\n          <li @onClick=\"changeGranularity('week')\">Week</li>\n          <li @onClick=\"changeGranularity('month')\">Month</li>\n          <li @onClick=\"changeGranularity('year')\">Year</li>\n        </ui>-->\n        <button type=\"button\" class=\"btn btn-outline-primary btn-sm\" @click=\"savePNG\">Download PNG</button>\n      </div>\n      <div>\n        <p v-html=\"description\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport { VueDatePicker } from '@mathieustan/vue-datepicker';\nimport '@mathieustan/vue-datepicker/dist/vue-datepicker.min.css';\nimport * as png from 'save-svg-as-png';\n\n\nexport default {\n  components : {\n    VueDatePicker,\n  },\n  data() {\n    return {\n      showEvents: true,\n      currentEvent: {},\n      xDomain: [],\n      datePicker: [], //empty array to pass dates between datepicker and scales\n      brush: null,\n      lineThickness: [3,7],\n      style: {\n        width: 1000, //TODO: set to window width\n        height: 300,\n        margin: {\n          top: 30,\n          right: 25,\n          bottom: 0 ,\n          left: 40\n        }\n      },\n    }\n  },\n\n  computed: {\n    events: { //get additional information from store\n      cache: true,\n      get: function() {\n        let parseTime = d3.timeParse(\"%d-%m-%Y\");\n        /*let events = this.$store.state.events.map(event => {\n          event.x = this.scales.x(parseTime(event.date)) //translate date to position\n          return event\n        })*/\n\n        let events = []\n        this.$store.state.events.forEach(event => {\n          let index = events.findIndex(element => element.date == event.date)\n          if(index === -1) {\n            events.push({\n              date: event.date,\n              x: this.scales.x(parseTime(event.date)),\n              filters: [event.filter], //redundant, but easier to use in template\n              content: [{\n                  filter: event.filter,\n                  text: event.text\n              }]\n            })\n          } else {\n            events[index].content.push({\n                filter: event.filter,\n                text: event.text\n            })\n            events[index].filters.push(event.filter)\n          }\n        })\n        return events\n      }\n    },\n\n\n    activeMetric: function() {return this.$store.getters.getActiveMetric},\n\n    //get data from store (this is the computed property \"data\", not vue's data property)\n    data: {\n      cache: true,\n      get: function() {\n        return this.$store.getters.getLines.map(line => {\n          line.touched = 0 //add counter for reactivity when using brush function\n\n          //create string of active filters for legend display\n          let legend = Object.keys(line.query)\n            .filter(key => key.startsWith(\"filter\"))\n            .map(key => line.query[key])\n            .join(\", \")\n          line.legend = (legend != \"\") ? legend : \"All data showing, no filters selected\"\n          return line\n        })\n      }\n    },\n\n    activeFilters: function() { //array of all active filters to determine what event-lines to display\n        let foo = this.lines.map(line => {\n          if (line.legend != \"All data showing, no filters selected\") return line.legend\n        })\n        return foo\n    },\n\n    //check if every line we received also has data values before we render\n    dataState: function() {\n      let state = false //asume that condition is not met\n      let hasData = this.data.map(line => (line.values) ? true : false) //check if value array exists\n      if(hasData.length > 0 && hasData.every(bool => bool)) state = true //check if all lines have data (and if we have lines at all, otherwise condition for every() would be true)\n      return state\n    },\n\n    //compute scales based on values of all passed lines\n    scales: {\n      cache: true,\n      get() {\n        let parseTime = d3.timeParse(this.$store.state.granularity);\n        let style = this.style\n\n        //set range vor all scales on main chart\n        const x = d3.scaleTime().range([style.margin.left,style.width - style.margin.left - style.margin.right]);\n        const y = d3.scaleLinear().range([\n          style.height - style.margin.top - style.margin.bottom,\n          style.margin.bottom\n        ]);\n        const confidence = d3.scaleLinear().range(this.lineThickness)\n\n        //set range vor all scales on brushable micro chart\n        const microX = d3.scaleLinear().range([style.margin.left,style.width - style.margin.left - style.margin.right]);\n        const microY = d3.scaleLinear().range([45,5]);\n\n        //bind scales to axes\n        d3.axisLeft().scale(x);\n        d3.axisBottom().scale(y);\n\n        //get minimum and maximum values for each line (i know, it's not elegant :)\n        if(this.dataState) {\n          let arr = []\n          this.data.forEach(line => {\n            line.values.forEach(value => {\n              arr.push(value)\n            })\n          })\n\n          //if this is the first time, get a the xDomain from data, otherwise it has been set by the brush\n          let domain = (this.xDomain.length > 0) ? this.xDomain : d3.extent(arr, d => parseTime(d.d))\n\n\n          let yDomain = d3.extent(arr, d => +d.r)\n          if(this.activeMetric.metric_low_end) yDomain[0] = this.activeMetric.metric_low_end\n          if(this.activeMetric.metric_high_end) yDomain[1] = this.activeMetric.metric_high_end\n\n          //set domain of all sccales\n          x.domain(domain);\n          microX.domain(d3.extent(arr, d => parseTime(d.d))); //definitely set this to the maximum data domain so we can push it to the limit\n          y.domain(yDomain).nice();\n          microY.domain(yDomain);\n          confidence.domain(d3.extent(arr, d => +d.c))\n        }\n\n        return { x, y, microX, microY, confidence };\n      }\n    },\n\n    //for each line, compute the actual plot\n    lines: {\n      cache: false,\n      get: function() {\n        let parseTime = d3.timeParse(this.$store.state.granularity);\n\n        //generator for area for main visualization\n         const path = d3.area()\n         .curve(d3.curveBasis) //make curve smooth\n         .x(d => this.scales.x(parseTime(d.d)))\n         //compute two y-values based on confidence() --> number of reviews that produce the average value\n         .y0(d => this.scales.y(d.r)-this.scales.confidence(d.c))\n         .y1(d => this.scales.y(d.r)+this.scales.confidence(d.c));\n\n         //generator line for brushable micro visualzation\n         const micro = d3.line()\n         .curve(d3.curveBasis)\n         .x(d => this.scales.microX(parseTime(d.d)))\n         .y(d => this.scales.microY(d.r));\n\n\n         return this.data.map(line => {\n           if(line.values) {\n             //compute paths based on line values\n             line.path = path(line.values)\n             line.micro = micro(line.values)\n           }\n           return line\n         })\n      }\n    },\n\n    description: function() {\n      if(!this.$store.state.text.description) return null\n      return this.$store.state.text.description\n    }\n  },\n\n\n\n  directives: {\n    axis(el, binding) {//dynamically call and update axis\n      const axis = binding.arg;\n      const axisMethod = { x: \"axisBottom\", y: \"axisLeft\" }[axis];\n      const methodArg = binding.value[axis];\n      d3.select(el).transition().call(d3[axisMethod](methodArg).ticks(5));\n    },\n  },\n\n  watch: {\n    dataState: function(newState) {\n      //TODO: Brush is not initialized when the size is initially loaded. No idea why.\n      if(newState) this.initBrush() //initialize brush as soon as you have data\n    },\n\n    scales: function() {\n      this.datePicker = this.scales.x.domain()\n    }\n  },\n\n\n\n  mounted () {\n    this.getWidth()\n    this.$nextTick(function() {\n      window.addEventListener('resize', this.getWidth);\n    })\n  },\n\n  methods: {\n    pickDate: function(i) {\n      let parseTime = d3.timeParse(\"%Y-%m-%d\"); //using different timeformats, redo when this is ever refactored\n      this.datePicker[i] = parseTime(this.datePicker[i]) //make sure dates from the picker are Dates and not strings (why the hell does this give ma strings anyway)\n\n      this.$set(this.xDomain,i,this.datePicker[i]) //set x axis for big vis\n\n      d3.select(\"g.brush\")\n        .call(this.brush)\n        .call(this.brush.move, this.datePicker.map(date => this.scales.microX(date)))\n    },\n\n    writeDatestoURL: function(dates) {\n      let formatTime = d3.timeFormat(\"%Y-%m-%d\");\n      let route = this.$route.query //get current url parameters as object\n\n      route.period = dates.map(date => formatTime(date)).join(\",\")\n\n      let routeString = Object.entries(route).map(e => encodeURIComponent(e[0]) + \"=\" + encodeURIComponent(e[1])).join(\"&\") //parse a string from that object\n      history.pushState({},null,this.$route.path + 'nokiatwin/#/?' + routeString) //write that to URL (CAUTION: vueX store and URL might be inconsistent)\n\n    },\n\n    savePNG: function() {\n\n      png.saveSvgAsPng(document.getElementById('chart'), 'chart.png')\n    },\n\n    /*changeGranularity: function(granularity) {\n\n    }*/\n\n\n    //initialize brush (dragable selector for x-axis) and add it to DOM\n    initBrush: function() {\n      this.brush = d3.brushX()\n        .extent(this.scales.microX.range().map((e,i) => [e,i*50])) //brush width is range of scale, height is fixed at 50\n        .on(\"end\", this.updateX)\n        //.on(\"brush end\", this.updateX) //update continously while moving (this may result in crap performance)\n\n        //if url has a timeperiod, use it\n        let parseTime = d3.timeParse(\"%Y-%m-%d\")\n        let brushPreset = this.$route.query.period\n          ? this.$route.query.period.split(\",\") //split string into two seperate dates\n              .map(date => this.scales.microX( //scale them according to the maximum scale defined in the brush\n                parseTime(date) //parse string to date\n              ))\n          : this.scales.x.range() //if period is not set, just use the max range\n      d3.select(\"g.brush\")\n        .call(this.brush)\n        .call(this.brush.move, brushPreset)\n    },\n\n    //scale x-axis of visualization to fit boundaries of brush\n    updateX: function() {\n      let domain = d3.event.selection.map(value => this.scales.microX.invert(value)) //get new domain by getting edges of overlay and translate them to dates\n      domain.forEach((value,i) => {\n        this.$set(this.xDomain,i,value) //iterate over this array to trigger reactivity\n      })\n\n      d3.select(\".xAxes\").transition().call(d3.axisBottom(this.scales.x)) //update Axis\n      this.writeDatestoURL(this.scales.x.domain())\n\n      d3.select(\"g.brush .leftHandle\").attr(\"transform\",\"translate(\"+d3.select(\".handle--w\").attr(\"x\")  +\",20)\")//.attr(\"cx\",)\n      d3.select(\"g.brush .rightHandle\").attr(\"transform\",\"translate(\"+d3.select(\".handle--e\").attr(\"x\")  +\",20)\")//.attr(\"cx\",)\n    },\n\n    getWidth: function() {\n      if(this.$refs.vis) {\n        this.style.width = this.$refs.vis.clientWidth\n        if(this.dataState) {\n          this.initBrush()\n        }\n      }\n    },\n    showText: function(active,event,index) {\n      this.currentEvent = event\n      if(active) {\n        d3.select(\".event-\"+index+\" line\").transition().attr(\"stroke-width\",8).attr(\"x\",-4)\n      } else {\n        d3.selectAll(\".events line\").transition().attr(\"stroke-width\",2).attr(\"x\",0)\n      }\n\n    }\n  }\n}\n</script>\n\n<style scoped>\n\nsvg.lines {\n  background-color: white;\n}\npath {\n  transition: d .3s\n}\n\n.legend {\n  font-size: 6pt;\n}\n\n.visWrapper {\n  margin: 0 10px;\n}\n\n.currentEvent span.date {\n  font-size: .8em;\n  font-weight: bold;\n}\n\n.pickDescription {\n  float: left;\n  padding: 3px 0;\n  width: 50px;\n}\n\n.currentEvent text {\n  font-size: 10px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}