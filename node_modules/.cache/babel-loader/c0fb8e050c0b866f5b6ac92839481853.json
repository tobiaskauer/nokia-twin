{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue","mtime":1607076672620},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAA,SAAA,MAAA,iBAAA;AACA,OAAA,OAAA,MAAA,eAAA;AAEA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,cAAA,EAAA,SADA;AAEA,MAAA,KAAA,EAAA;AAFA,KAAA;AAIA,GANA;AAQA,EAAA,QAAA,EAAA;AACA;;;;;;AAOA,IAAA,OAAA,EAAA,mBAAA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,OAAA;AACA,KAVA;AAYA,IAAA,aAAA,EAAA,yBAAA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,aAAA;AACA;AAdA,GARA;AA2BA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA,iBAAA,UAAA,EAAA;AACA,UAAA,UAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,SAAA;AACA;AACA,KALA;AAOA,IAAA,aAAA,EAAA,uBAAA,gBAAA,EAAA;AACA,UAAA,gBAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,QAAA;AACA;AACA;AAEA;;;;;;;;AAbA,GA5BA;AAkDA,EAAA,OAlDA,qBAkDA,CAEA,CApDA;AAsDA,EAAA,OAAA,EAAA;AACA,IAAA,SAAA,EAAA,qBAAA;AAEA;AACA,UAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA,IAAA,KAAA,OAAA,CAAA,GAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,GAAA;AAAA,OAAA,EAAA,OAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA,MAAA,CAAA,CAAA,EAAA;AACA;AACA,aAAA,cAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA;AAEA,OAJA,MAIA;AACA;AACA,aAAA,cAAA,GAAA,KAAA,OAAA,CAAA,CAAA,EAAA,GAAA;AACA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,cAAA,EAXA,CAYA;AACA,KAdA;AAgBA,IAAA,QAAA,EAAA,oBAAA;AAAA;;AAEA;AACA,UAAA,UAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,GAAA,CAAA;;AAHA,iCAIA,CAJA;AAOA;AACA,YAAA,KAAA,GAAA;AAAA,UAAA,MAAA,EAAA,KAAA,CAAA;AAAA,SAAA;;AACA,QAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,aAAA,CAAA,OAAA,CAAA,UAAA,YAAA,EAAA;AACA,UAAA,YAAA,CAAA,UAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,EAAA;AACA,kBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,EAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA;AAAA;AACA,gBAAA,KAAA,CAAA,MAAA,CAAA,GAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,EAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACA;AACA;AACA,WANA;AAOA,SARA;;AASA,QAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,SAAA,EAAA,KAAA;AAlBA;;AAIA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,UAAA,EAAA,CAAA,EAAA,EAAA;AAAA,cAAA,CAAA;AAeA;;AACA,WAAA,KAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,QAAA;AACA,KArCA;;AAuCA;;;;;;;;;;;;;;;;;;;;;AAwBA;;AACA;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA,IAAA,OAAA,EAAA,mBAAA;AACA;AACA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,SAAA;AAEA,UAAA,KAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CALA,CAKA;;AACA,MAAA,KAAA,CAAA,KAAA,GAAA,KAAA,KAAA,CAAA,MAAA;AACA,UAAA,WAAA,GAAA,MAAA,CAAA,OAAA,CAAA,KAAA,EAAA,GAAA,CAAA,UAAA,CAAA;AAAA,eAAA,kBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,GAAA,GAAA,kBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAAA,EAAA,IAAA,CAAA,GAAA,CAAA,CAPA,CAOA;;AACA,MAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,IAAA,EAAA,KAAA,MAAA,CAAA,IAAA,GAAA,eAAA,GAAA,WAAA,EARA,CAQA;AACA;AAzGA,GAtDA;AAkKA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA,SADA;AACA,IAAA,OAAA,EAAA;AADA,GAlKA;AAsKA,EAAA,OAtKA,qBAsKA,CAEA;AAxKA,CAAA","sourcesContent":["<template>\n  <div class=\"col-4 sidebar hidden-md-down\">\n    <h1>Twin DB</h1>\n    <metrics v-if=\"selectedMetric\" ref=\"metrics\" :selected=\"selectedMetric\"/>\n    <ul>\n      <!-- display filterRow for every lines that is displayed -->\n      <filterRow\n        v-for=\"(line, index) in lines\"\n        :ref=\"'filterRow-'+line.identifier\"\n        :key=\"index\"\n        :line=\"line\"\n      />\n    </ul>\n    <div class=\"addLine\">\n      <button v-on:click=\"addLine\">Add Line</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport filterRow from './filterRow.vue'\nimport metrics from './metrics.vue'\n\nexport default {\n  data() {\n    return {\n      selectedMetric: undefined,\n      lines: undefined\n    }\n  },\n\n  computed: {\n    /*//get lines (incl. color, identifier, filters, and selections) from store\n    lines: {\n      get: function(){\n        return this.$store.state.lines\n      }\n    },*/\n\n    metrics: function() {\n      return this.$store.state.metrics\n    },\n\n    filterColumns: function() {\n      return  this.$store.state.filterColumns\n    }\n\n\n  },\n\n  //if there are no lines on store when page is mounted, add one to always have one line available\n  watch: {\n    metrics: function(newMetrics) {\n      if(newMetrics.length > 0) {\n        this.setMetric()\n      }\n    },\n\n    filterColumns: function(newFilterColumns){\n      if(newFilterColumns.length > 0) {\n        this.setLines();\n      }\n    }\n\n    /*//set filters from URL\n    lines: function(newLines){\n      if(newLines) {\n        //console.log(this.$refs['filterRow-'+newLines[0].identifier])\n        this.setFiltersFromURL(this.$route.query)\n      }\n    }*/\n  },\n\n  mounted() {\n\n  },\n\n  methods: {\n    setMetric: function() {\n\n      //check if URL has a metric (and whether that metric is actually in the current table)\n      if(this.$route.query.metric && this.metrics.map(e=>e.key).indexOf(this.$route.query.metric) !== -1) {\n        //if so, pass that metric to the component as property\n        this.selectedMetric = this.$route.query.metric\n\n      } else {\n        //if not passed or not found, just take the first element\n        this.selectedMetric = this.metrics[0].key\n      }\n      console.log(this.selectedMetric)\n      //this.$store.commit('setActiveMetric', item) //set query\n    },\n\n    setLines: function() {\n\n      //for each line we need, set some queries\n      let linesCount = (this.$route.query.lines) ? this.$route.query.lines : 1\n      for(let i=0;i<linesCount;i++) {\n\n\n        //search for filters in the url that match the ones we have in the database\n        let query = {metric: this.selectedMetric}\n        this.$store.state.filterColumns.forEach(filterColumn => {\n          filterColumn.db_columns.forEach(column => {\n            if(this.$route.query[column]) {\n              if(this.$route.query[column].split(\",\")[i]) { //do not consider empty values\n                query[column] = this.$route.query[column].split(\",\")[i]\n              }\n            }\n          })\n        })\n        this.$store.dispatch('addLine',query)\n      }\n      this.lines = this.$store.getters.getLines;\n    },\n\n    /*initializeFromURL: function(param) {\n      if(param.lines) {\n        while (param.lines > 0){\n          this.$store.dispatch('addLine')\n          param.lines--\n        }\n      } else {\n        this.$store.dispatch('addLine')\n      }\n\n\n      let metric\n      // if a metric is set in url parameters\n      if(param.metric) {\n        //look for this metric in current metric storage, if you find sth set it, otherwise set the first one\n        metric = this.$store.state.metrics.find(item => item.key ==  param.metric) ? this.$store.state.metrics.find(item => item.key ==  param.metric) : metric = this.$store.state.metrics[0]\n      } else {\n        //if none is passed, just take the first one\n        metric = this.$store.state.metrics[0]\n      }\n      //set the metric\n      this.$refs.metrics.select(metric)\n    },*/\n\n    //please dont hate me, but this gets triggered three times as oten as necessary....\n    /*setFiltersFromURL: function(param) {\n\n      //find filters\n      let filters = []\n      this.$store.state.filterColumns.forEach(filterColumn => {\n        //console.log(filterColumn) //this is the display name of the columns (e.g. \"Location\")\n        filterColumn.db_columns.forEach(column => {\n          if(param[column]) {\n            //you can have as many values for a given parameter as you have lines (eg. filtering three lines by three different companes. i corresponds to the line count)\n            param[column].split(\",\").forEach((value,lineCount) => {\n              filters[lineCount] = {display: filterColumn.display, element: {filter: column, key: value}}\n            })\n          }\n        })\n      })\n\n\n\n      //iterate over existing lines (in sidebar) and apply filters from URL\n      this.$store.getters.getLines.forEach((line,lineCount) => {\n        if(this.$refs['filterRow-'+line.identifier]) {\n\n          let filter = filters[lineCount]\n          console.log(filter)\n          this.$refs['filterRow-'+line.identifier][0].select(filter.display,filter.element,\"initialize\")\n        }\n      })\n\n\n\n    },*/\n    //add new lines\n    addLine: function() {\n      //let previousQuery = this.lines[this.lines.length-1] == undefined ? {} : this.lines[this.lines.length-1].query\n      //duplicating the previous query to add it to the next technically works, but the two instances seem dependent on another (which is not expected behavior)\n      this.$store.dispatch('addLine')\n\n      let route = this.$route.query //get current url parameters as object\n      route.lines = this.lines.length\n      let routeString = Object.entries(route).map(e => encodeURIComponent(e[0]) + \"=\" + encodeURIComponent(e[1])).join(\"&\") //parse a string from that object\n      history.pushState({},null,this.$route.path + 'nokiatwin/#/?' + routeString) //write that to URL (CAUTION: vueX store and URL might be inconsistent)\n    },\n  },\n\n  components: {\n    filterRow, metrics\n  },\n\n  created() {\n\n  },\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n.sidebar {\n  background-color: #39393B;\n  color: white;\n  min-width: 300px;\n  padding: 0px !important;\n  min-height: 100%;\n}\n\nul {\n  margin: 0;\n  padding: 0\n}\n\n.addLine {\n  margin: 10px 30px;\n}\n.addLine button {\n  background: none;\n  border: 1px solid white;\n  border-radius: 5px;\n  padding: 10px;\n  color: white;\n  width: 100%;\n}\n\n.addLine button:hover {\n  font-weight: bold;\n}\n\n</style>\n"],"sourceRoot":"src/components"}]}