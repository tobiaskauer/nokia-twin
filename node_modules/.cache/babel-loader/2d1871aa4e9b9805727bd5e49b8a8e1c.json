{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/thread-loader/dist/cjs.js!/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/nokiatwin/node_modules/eslint-loader/index.js??ref--13-0!/Users/tk/GitHub/nokiatwin/src/store/store.js","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/store/store.js","mtime":1607082925474},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/tk/GitHub/nokiatwin/src/store/store.js"],"names":["Vue","Vuex","axios","uniqid","use","server","Store","state","error","table","lines","metrics","granularity","activeMetric","filterColumns","colors","hex","used","addedFilters","events","getters","getFilterColumns","map","col","visible","elements","slice","added","filter","x","db_columns","includes","concat","display","filters","autocomplete","key","getLines","getContext","context","getActiveMetric","mutations","setTable","payload","setActiveMetric","removeLine","identifier","set","find","length","splice","findIndex","writeQuery","query","Object","entries","selector","delete","forEach","line","i","writeValues","index","values","addFilter","actions","addLine","dispatch","metric","time","colorIndex","element","color","getData","callAPI","commit","type","post","headers","then","response","data","catch","console","log","debugAPI","filter_company","filter_country","filter_employee_title","split","getMetricsAndFilters","startsWith","item","getEvents","getFilters","exists","push","column","listSelector","count","sort","a","b"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\nimport uniqid from 'uniqid';\n\nVue.use(Vuex)\n\n//let server = \"http://localhost:8080/nokiatwin/api.php\" //development\nlet server = \"https://social-dynamics.net/nokiatwin/api.php\" // production\n\nexport default new Vuex.Store({\n  state: {\n    error: \"\",\n    table: \"\",\n    lines: [], //empty array, filled by addLine() and removeLine(), triggered via sidebar.vue\n    metrics:[], //metrics to display (metric_ columns in db)\n    granularity: \"%Y-%m\",\n    activeMetric: \"\",\n    filterColumns: [], //filters to apply (filter_ columns in db)\n    colors: [\n      {hex: \"#20C5A0\", used: false},\n      {hex: \"#BD10E0\", used: false},\n      {hex: \"#F5A623\", used: false},\n      {hex: \"#4A90E2\", used: false},\n      {hex: \"#ACC000\", used: false}\n    ],\n    addedFilters: [], //initialize array for filters the user added via typeahead\n    events: []\n  },\n\n\n\n  getters: {\n    //get reduced list of possible values to display\n    getFilterColumns: state => {\n      return state.filterColumns.map(col => {\n        let visible = col.elements.slice(0,5) //select five most frequent labels\n        //identify filters that were added for the current column\n        let added = state.addedFilters.filter(x=>col.db_columns.includes(x.filter)) //select added filters that match any of the given db columns\n        visible = visible.concat(added)\n\n        return {\n          display: col.display,\n          filters: col.db_columns,\n          elements: visible,\n          autocomplete: col.elements.filter(x=>x.key != null)\n        }\n      })\n    },\n\n    //get Lines (triggered via sidebar and )\n    getLines: (state) => state.lines,\n    getContext: (state) => state.context,\n    getActiveMetric: (state) => state.activeMetric\n  },\n\n  mutations: {\n    setTable(state,payload) {\n      if(payload) {\n        state.table = payload\n      } else {\n        state.error = \"No Table.\"\n      }\n    },\n    setActiveMetric(state,payload) {\n      if(payload) state.activeMetric = payload\n    },\n      //remove line from sidebar\n    removeLine(state, identifier) {\n      //make used color available again\n      Vue.set(state.colors.find(x=>x.used == identifier),'used',false)\n      //delete line from state\n      if(state.lines.length > 1) state.lines.splice(state.lines.findIndex(x=>x.identifier == identifier),1)\n    },\n\n    //write query to lines\n    writeQuery(state, payload) {\n      if(payload.identifier) { //if payload just applies to a single line\n\n        let query = Object.entries(payload.query)\n        let selector = query[0][0]\n        let key = query[0][1]\n\n        if(key != null)  {\n          Vue.set(state.lines.find(x=>x.identifier == payload.identifier).query, selector, key)\n        } else {\n          Vue.delete(state.lines.find(x=>x.identifier == payload.identifier).query, selector)\n        }\n\n\n        /*commit('writeQuery',{\n          index: state.lines.findIndex(x=>x.identifier == payload.identifier),\n          filter: payload.query.filter,\n          key: payload.query.key\n        })\n        dispatch('callAPI',payload.identifier)*/\n      } else { //if it affects all lines (e.g. when a metric is changed)\n\n        let query = Object.entries(payload.query)\n        let selector = query[0][0]\n        let key = query[0][1]\n\n        state.lines.forEach((line, i) => {\n\n          /*commit('writeQuery',{\n            index: i,\n            filter: 'metric',\n            key: payload.query.key\n          })\n          dispatch('callAPI',line.identifier)*/\n          Vue.set(state.lines[i].query, selector, key)\n          //dispatch('debugAPI')*/\n        })\n      }\n    },\n\n    //write A PI return to lines (gotten from callAPI())\n    writeValues(state, payload) {\n      //console.log(\"writeData called\", payload)\n      Vue.set(state.lines[payload.index], \"values\", payload.values)\n    },\n\n    //add filter via typeahead\n    addFilter(state, payload) {\n      Vue.set(state.addedFilters,state.addedFilters.length,payload)\n    },\n  },\n\n\n\n  actions: {\n    //initialize a new line (incl. filters in sidebar and actual line in graph), triggered from sidebar\n    addLine({state, dispatch},payload) {\n      //console.log(payload)\n      let line = {} //create empty object\n      line.query = payload ? payload : {metric: state.lines[0].query.metric} //if payload is passed, use it, otherwise use the metric of previous lines\n      line.identifier = uniqid.time()       //unique identifier to update query or delete line\n\n      //assign an unused color and mark it used\n      let colorIndex = state.colors.findIndex(element  => !element.used)\n      line.color = state.colors[colorIndex].hex\n      Vue.set(state.colors[colorIndex],'used',line.identifier)\n      Vue.set(state.lines, state.lines.length, line) //push new line at end of lines array\n\n      dispatch('getData', {identifier: line.identifier}) //get data and let reactivtity take over\n    },\n\n\n    //update queries and get data for them\n    getData({dispatch, state}, payload) {\n\n      if(payload.identifier) { //if payload just applies to a single line\n        dispatch('callAPI',payload.identifier)\n      } else { //if it affects all lines (e.g. when a metric is changed)\n        state.lines.forEach(line => {\n          dispatch('callAPI',line.identifier)\n        })\n      }\n    },\n\n    //get data from API\n    callAPI( {commit,state}, identifier) {\n      //get query for line based on its identifier\n      let query = state.lines.find(x=>x.identifier == identifier).query\n\n      query.type = 'result' //set query end (quasi endpoint) for api.php\n      query.table = state.table\n      query.granularity = state.granularity\n      //axios.post( \"https://social-dynamics.net/nokiatwin/api.php\",query,\n      axios.post( server,query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        commit('writeValues',{\n          index: state.lines.findIndex(x=>x.identifier == identifier),\n          values: response.data\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n    debugAPI() {\n      let query = {\n        type: 'debug',\n        metric: 'metric_rating_overall',\n        filter_company: 'starbucks',\n        filter_country: 'United Kingdom',\n        filter_employee_title: 'Barista'\n      }\n      axios.post( server,query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        console.log(response.data.split(\"end_output\")[0])\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n\n    //get Metrics and Filters once to write them to storage\n    getMetricsAndFilters({dispatch, state}) {\n      let query = {type: 'metrics', table: state.table}\n      axios.post( server,query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n\n        //filter response by metric_ and write it to store\n        let metrics = response.data.filter(x=>x.key.startsWith('metric_')).map(item => {\n          //if no display name given, use db column\n          if(!item.display) item.display = item.key\n          return item\n        })\n        Vue.set(state,'metrics',metrics)\n\n\n        //filter by filter_ and hand to getFilters() (which can get values for each filter)\n        dispatch('getFilters', response.data.filter(x=>x.key.startsWith('filter_')))\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n    getEvents({state}) {\n      let query = {type: 'events', table: state.table}\n      axios.post( server,query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        Vue.set(state,'events',response.data)\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n    getFilters({state}, payload) {\n      //transform filters with the same name into a group with multiple db_columns\n      let filters = []\n      payload.forEach(filter => {\n        let exists = filters.find(x=>x.display == filter.display)\n        if(exists) {\n          exists.db_columns.push(filter.key)\n        } else {\n          filters.push({display: filter.display, db_columns: [filter.key]})\n        }\n      })\n\n      //generate lists of columns, then fill them with filters\n      filters = filters.map(filter => {\n        filter.elements = [] //bucket to fill\n        filter.db_columns.forEach(column => {\n          let query = {\n            type: 'selectors',\n            listSelector: column,\n            table: state.table\n          }\n          axios.post( server,query,  //for development, this is overwritten in vue.config.js\n            {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n          })\n          .then(response => {\n            response.data.forEach(element => { //for each item in the list, create a unique object to pass on\n              let item = {\n                key: element[column],\n                filter: column,\n                count: element.count\n              }\n              filter.elements.push(item) //fill the bucket\n            })\n            filter.elements.sort((a,b) => b.count - a.count)\n          })\n        })\n        return filter\n      })\n      Vue.set(state,'filterColumns',filters)\n    }\n  }\n})\n"]}]}