{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/thread-loader/dist/cjs.js!/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue","mtime":1614680761347},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgZmlsdGVyUm93IGZyb20gJy4vZmlsdGVyUm93LnZ1ZSc7CmltcG9ydCBtZXRyaWNzIGZyb20gJy4vbWV0cmljcy52dWUnOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNlbGVjdGVkTWV0cmljOiB1bmRlZmluZWQsCiAgICAgIGxpbmVzOiB1bmRlZmluZWQKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgbWV0cmljczogZnVuY3Rpb24gbWV0cmljcygpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm1ldHJpY3M7CiAgICB9LAogICAgZmlsdGVyQ29sdW1uczogZnVuY3Rpb24gZmlsdGVyQ29sdW1ucygpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmZpbHRlckNvbHVtbnM7CiAgICB9LAogICAgaW50cm86IGZ1bmN0aW9uIGludHJvKCkgewogICAgICBpZiAoIXRoaXMuJHN0b3JlLnN0YXRlLnRleHQuaW50cm8pIHJldHVybiBudWxsOwogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUudGV4dC5pbnRybzsKICAgIH0sCiAgICB0aXRsZTogZnVuY3Rpb24gdGl0bGUoKSB7CiAgICAgIGlmICghdGhpcy4kc3RvcmUuc3RhdGUudGV4dC50aXRsZSkgcmV0dXJuICJPcGVuIEluYyI7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS50ZXh0LnRpdGxlOwogICAgfQogIH0sCiAgLy9pZiB0aGVyZSBhcmUgbm8gbGluZXMgb24gc3RvcmUgd2hlbiBwYWdlIGlzIG1vdW50ZWQsIGFkZCBvbmUgdG8gYWx3YXlzIGhhdmUgb25lIGxpbmUgYXZhaWxhYmxlCiAgd2F0Y2g6IHsKICAgIG1ldHJpY3M6IGZ1bmN0aW9uIG1ldHJpY3MobmV3TWV0cmljcykgewogICAgICBpZiAobmV3TWV0cmljcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5zZXRNZXRyaWMoKTsKICAgICAgfQogICAgfSwKICAgIGZpbHRlckNvbHVtbnM6IGZ1bmN0aW9uIGZpbHRlckNvbHVtbnMobmV3RmlsdGVyQ29sdW1ucykgewogICAgICBpZiAobmV3RmlsdGVyQ29sdW1ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5zZXRMaW5lcygpOwogICAgICB9CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge30sCiAgbWV0aG9kczogewogICAgc2V0TWV0cmljOiBmdW5jdGlvbiBzZXRNZXRyaWMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2NoZWNrIGlmIFVSTCBoYXMgYSBtZXRyaWMgKGFuZCB3aGV0aGVyIHRoYXQgbWV0cmljIGlzIGFjdHVhbGx5IGluIHRoZSBjdXJyZW50IHRhYmxlKQogICAgICBpZiAodGhpcy4kcm91dGUucXVlcnkubWV0cmljICYmIHRoaXMubWV0cmljcy5tYXAoZnVuY3Rpb24gKGUpIHsKICAgICAgICByZXR1cm4gZS5rZXk7CiAgICAgIH0pLmluZGV4T2YodGhpcy4kcm91dGUucXVlcnkubWV0cmljKSAhPT0gLTEpIHsKICAgICAgICAvL2lmIHNvLCBwYXNzIHRoYXQgbWV0cmljIHRvIHRoZSBjb21wb25lbnQgYXMgcHJvcGVydHkKICAgICAgICB0aGlzLnNlbGVjdGVkTWV0cmljID0gdGhpcy4kcm91dGUucXVlcnkubWV0cmljOwogICAgICB9IGVsc2UgewogICAgICAgIC8vaWYgbm90IHBhc3NlZCBvciBub3QgZm91bmQsIGp1c3QgdGFrZSB0aGUgZmlyc3QgZWxlbWVudAogICAgICAgIHRoaXMuc2VsZWN0ZWRNZXRyaWMgPSB0aGlzLm1ldHJpY3NbMF0ua2V5OwogICAgICB9CgogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3NldEFjdGl2ZU1ldHJpYycsIHRoaXMubWV0cmljcy5maW5kKGZ1bmN0aW9uIChtZXRyaWMpIHsKICAgICAgICByZXR1cm4gbWV0cmljLmtleSA9PSBfdGhpcy5zZWxlY3RlZE1ldHJpYzsKICAgICAgfSkpOyAvL21ha2UgYWN0aXZlIChzbyB0aGF0IHdlIG5vdyB0aGUgc2NhbGUgYW5kIGNhbiBkaXNwbGF5IGFzIGxhYmVsIG9uIHlheGlzKQogICAgfSwKICAgIHNldExpbmVzOiBmdW5jdGlvbiBzZXRMaW5lcygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAvL2ZvciBlYWNoIGxpbmUgd2UgbmVlZCwgc2V0IHNvbWUgcXVlcmllcwogICAgICB2YXIgbGluZXNDb3VudCA9IHRoaXMuJHJvdXRlLnF1ZXJ5LmxpbmVzID8gdGhpcy4kcm91dGUucXVlcnkubGluZXMgOiAxOwoKICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkgewogICAgICAgIC8vc2VhcmNoIGZvciBmaWx0ZXJzIGluIHRoZSB1cmwgdGhhdCBtYXRjaCB0aGUgb25lcyB3ZSBoYXZlIGluIHRoZSBkYXRhYmFzZQogICAgICAgIHZhciBxdWVyeSA9IHsKICAgICAgICAgIG1ldHJpYzogX3RoaXMyLnNlbGVjdGVkTWV0cmljCiAgICAgICAgfTsKCiAgICAgICAgX3RoaXMyLiRzdG9yZS5zdGF0ZS5maWx0ZXJDb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGZpbHRlckNvbHVtbikgewogICAgICAgICAgZmlsdGVyQ29sdW1uLmRiX2NvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uKSB7CiAgICAgICAgICAgIGlmIChfdGhpczIuJHJvdXRlLnF1ZXJ5W2NvbHVtbl0pIHsKICAgICAgICAgICAgICBpZiAoX3RoaXMyLiRyb3V0ZS5xdWVyeVtjb2x1bW5dLnNwbGl0KCIsIilbaV0pIHsKICAgICAgICAgICAgICAgIC8vZG8gbm90IGNvbnNpZGVyIGVtcHR5IHZhbHVlcwogICAgICAgICAgICAgICAgcXVlcnlbY29sdW1uXSA9IF90aGlzMi4kcm91dGUucXVlcnlbY29sdW1uXS5zcGxpdCgiLCIpW2ldOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMi4kc3RvcmUuZGlzcGF0Y2goJ2FkZExpbmUnLCBxdWVyeSk7CiAgICAgIH07CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzQ291bnQ7IGkrKykgewogICAgICAgIF9sb29wKGkpOwogICAgICB9CgogICAgICB0aGlzLmxpbmVzID0gdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXRMaW5lczsKICAgIH0sCiAgICAvL2FkZCBuZXcgbGluZXMKICAgIGFkZExpbmU6IGZ1bmN0aW9uIGFkZExpbmUoKSB7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhZGRMaW5lJyk7CiAgICAgIHZhciByb3V0ZSA9IHRoaXMuJHJvdXRlLnF1ZXJ5OyAvL2dldCBjdXJyZW50IHVybCBwYXJhbWV0ZXJzIGFzIG9iamVjdAoKICAgICAgcm91dGUubGluZXMgPSB0aGlzLmxpbmVzLmxlbmd0aDsKICAgICAgdmFyIHJvdXRlU3RyaW5nID0gT2JqZWN0LmVudHJpZXMocm91dGUpLm1hcChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoZVswXSkgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQoZVsxXSk7CiAgICAgIH0pLmpvaW4oIiYiKTsgLy9wYXJzZSBhIHN0cmluZyBmcm9tIHRoYXQgb2JqZWN0CgogICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7fSwgbnVsbCwgdGhpcy4kcm91dGUucGF0aCArICdub2tpYXR3aW4vIy8/JyArIHJvdXRlU3RyaW5nKTsgLy93cml0ZSB0aGF0IHRvIFVSTCAoQ0FVVElPTjogdnVlWCBzdG9yZSBhbmQgVVJMIG1pZ2h0IGJlIGluY29uc2lzdGVudCkKICAgIH0KICB9LAogIGNvbXBvbmVudHM6IHsKICAgIGZpbHRlclJvdzogZmlsdGVyUm93LAogICAgbWV0cmljczogbWV0cmljcwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHt9Cn07"},{"version":3,"sources":["sidebar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"sidebar flex-fill\">\n    <h1>{{title}}</h1>\n    <p class=\"intro\" v-if=\"intro\" v-html=\"intro\" />\n    <metrics v-if=\"selectedMetric\" ref=\"metrics\" :selected=\"selectedMetric\"/>\n    <div class=\"flex-fill\" style=\"overflow: scroll\">\n      <div class=\"addLine\">\n        <button v-on:click=\"addLine\">Add Line</button>\n      </div>\n      <p style=\"padding: 0px 30px\">Select filter to change visualization:</p>\n      <ul>\n        <!-- display filterRow for every lines that is displayed -->\n        <filterRow\n          v-for=\"(line, index) in lines\"\n          :ref=\"'filterRow-'+line.identifier\"\n          :key=\"index\"\n          :line=\"line\"\n        />\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport filterRow from './filterRow.vue'\nimport metrics from './metrics.vue'\n\nexport default {\n  data() {\n    return {\n      selectedMetric: undefined,\n      lines: undefined,\n    }\n  },\n\n  computed: {\n    metrics: function() {\n      return this.$store.state.metrics\n    },\n\n    filterColumns: function() {\n      return  this.$store.state.filterColumns\n    },\n\n    intro: function() {\n      if(!this.$store.state.text.intro) return null\n      return this.$store.state.text.intro\n    },\n\n    title: function() {\n      if(!this.$store.state.text.title) return \"Open Inc\"\n      return this.$store.state.text.title\n    }\n  },\n\n  //if there are no lines on store when page is mounted, add one to always have one line available\n  watch: {\n    metrics: function(newMetrics) {\n      if(newMetrics.length > 0) {\n        this.setMetric()\n      }\n    },\n\n    filterColumns: function(newFilterColumns){\n      if(newFilterColumns.length > 0) {\n        this.setLines();\n      }\n    }\n  },\n\n  mounted() {\n\n  },\n\n  methods: {\n    setMetric: function() {\n\n      //check if URL has a metric (and whether that metric is actually in the current table)\n      if(this.$route.query.metric && this.metrics.map(e=>e.key).indexOf(this.$route.query.metric) !== -1) {\n        //if so, pass that metric to the component as property\n        this.selectedMetric = this.$route.query.metric\n\n      } else {\n        //if not passed or not found, just take the first element\n        this.selectedMetric = this.metrics[0].key\n      }\n      this.$store.commit('setActiveMetric', this.metrics.find(metric => metric.key == this.selectedMetric)) //make active (so that we now the scale and can display as label on yaxis)\n    },\n\n    setLines: function() {\n\n      //for each line we need, set some queries\n      let linesCount = (this.$route.query.lines) ? this.$route.query.lines : 1\n      for(let i=0;i<linesCount;i++) {\n\n\n        //search for filters in the url that match the ones we have in the database\n        let query = {metric: this.selectedMetric}\n        this.$store.state.filterColumns.forEach(filterColumn => {\n          filterColumn.db_columns.forEach(column => {\n            if(this.$route.query[column]) {\n              if(this.$route.query[column].split(\",\")[i]) { //do not consider empty values\n                query[column] = this.$route.query[column].split(\",\")[i]\n              }\n            }\n          })\n        })\n        this.$store.dispatch('addLine',query)\n      }\n      this.lines = this.$store.getters.getLines;\n    },\n\n    //add new lines\n    addLine: function() {\n      this.$store.dispatch('addLine')\n\n      let route = this.$route.query //get current url parameters as object\n      route.lines = this.lines.length\n      let routeString = Object.entries(route).map(e => encodeURIComponent(e[0]) + \"=\" + encodeURIComponent(e[1])).join(\"&\") //parse a string from that object\n      history.pushState({},null,this.$route.path + 'nokiatwin/#/?' + routeString) //write that to URL (CAUTION: vueX store and URL might be inconsistent)\n    },\n  },\n\n  components: {\n    filterRow, metrics\n  },\n\n  created() {\n\n  },\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n.sidebar {\n  background-color: #39393B;\n  color: white;\n  min-width: 350px;\n  padding: 0px !important;\n  //min-height: 100%;\n}\n\nul {\n  margin: 0;\n  padding: 0\n}\n\np.intro {\n  margin: 10px 30px;\n  font-size: .8em;\n  text-align: center;\n}\n\np.intro a {\n  color: white !important;\n  text-decoration: underline;\n}\n\n.addLine {\n  margin: 10px 30px;\n}\n.addLine button {\n  background: none;\n  border: 1px solid white;\n  border-radius: 5px;\n  padding: 10px;\n  color: white;\n  width: 100%;\n}\n\n.addLine button:hover {\n  font-weight: bold;\n}\n\n</style>\n"],"sourceRoot":"src/components"}]}