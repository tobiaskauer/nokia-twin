{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/components/sidebar.vue","mtime":1605271445234},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGZpbHRlclJvdyBmcm9tICcuL2ZpbHRlclJvdy52dWUnOwppbXBvcnQgbWV0cmljcyBmcm9tICcuL21ldHJpY3MudnVlJzsKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiB7CiAgICBjb21wYW55OiBTdHJpbmcKICB9LAogIGNvbXB1dGVkOiB7CiAgICAvL2dldCBsaW5lcyAoaW5jbC4gY29sb3IsIGlkZW50aWZpZXIsIGZpbHRlcnMsIGFuZCBzZWxlY3Rpb25zKSBmcm9tIHN0b3JlCiAgICBsaW5lczogewogICAgICBjYWNoZTogZmFsc2UsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5saW5lczsKICAgICAgfQogICAgfSwKICAgIGhhc01ldHJpY3M6IHsKICAgICAgY2FjaGU6IGZhbHNlLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUubWV0cmljcy5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwKICAvL2lmIHRoZXJlIGFyZSBubyBsaW5lcyBvbiBzdG9yZSB3aGVuIHBhZ2UgaXMgbW91bnRlZCwgYWRkIG9uZSB0byBhbHdheXMgaGF2ZSBvbmUgbGluZSBhdmFpbGFibGUKICB3YXRjaDogewogICAgaGFzTWV0cmljczogZnVuY3Rpb24gaGFzTWV0cmljcyhuZXdCb29sKSB7CiAgICAgIGlmIChuZXdCb29sKSB7CiAgICAgICAgdGhpcy5pbml0aWFsaXplRnJvbVVSTCh0aGlzLiRyb3V0ZS5xdWVyeSk7CiAgICAgIH0KICAgIH0gLy9zZXQgZmlsdGVycyBmcm9tIFVSTAoKICAgIC8qbGluZXM6IGZ1bmN0aW9uKG5ld0xpbmVzKXsKICAgICAgaWYobmV3TGluZXMpIHsKICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMuJHJlZnNbJ2ZpbHRlclJvdy0nK25ld0xpbmVzWzBdLmlkZW50aWZpZXJdKQogICAgICAgIHRoaXMuc2V0RmlsdGVyc0Zyb21VUkwodGhpcy4kcm91dGUucXVlcnkpCiAgICAgIH0KICAgIH0qLwoKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7fSwKICBtZXRob2RzOiB7CiAgICBpbml0aWFsaXplRnJvbVVSTDogZnVuY3Rpb24gaW5pdGlhbGl6ZUZyb21VUkwocGFyYW0pIHsKICAgICAgaWYgKHBhcmFtLmxpbmVzKSB7CiAgICAgICAgd2hpbGUgKHBhcmFtLmxpbmVzID4gMCkgewogICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2FkZExpbmUnKTsKICAgICAgICAgIHBhcmFtLmxpbmVzLS07CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdhZGRMaW5lJyk7CiAgICAgIH0KCiAgICAgIHZhciBtZXRyaWM7IC8vIGlmIGEgbWV0cmljIGlzIHNldCBpbiB1cmwgcGFyYW1ldGVycwoKICAgICAgaWYgKHBhcmFtLm1ldHJpYykgewogICAgICAgIC8vbG9vayBmb3IgdGhpcyBtZXRyaWMgaW4gY3VycmVudCBtZXRyaWMgc3RvcmFnZSwgaWYgeW91IGZpbmQgc3RoIHNldCBpdCwgb3RoZXJ3aXNlIHNldCB0aGUgZmlyc3Qgb25lCiAgICAgICAgbWV0cmljID0gdGhpcy4kc3RvcmUuc3RhdGUubWV0cmljcy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICByZXR1cm4gaXRlbS5rZXkgPT0gcGFyYW0ubWV0cmljOwogICAgICAgIH0pID8gdGhpcy4kc3RvcmUuc3RhdGUubWV0cmljcy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICByZXR1cm4gaXRlbS5rZXkgPT0gcGFyYW0ubWV0cmljOwogICAgICAgIH0pIDogbWV0cmljID0gdGhpcy4kc3RvcmUuc3RhdGUubWV0cmljc1swXTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvL2lmIG5vbmUgaXMgcGFzc2VkLCBqdXN0IHRha2UgdGhlIGZpcnN0IG9uZQogICAgICAgIG1ldHJpYyA9IHRoaXMuJHN0b3JlLnN0YXRlLm1ldHJpY3NbMF07CiAgICAgIH0gLy9zZXQgdGhlIG1ldHJpYwoKCiAgICAgIHRoaXMuJHJlZnMubWV0cmljcy5zZWxlY3QobWV0cmljKTsKICAgIH0sCiAgICAvL3BsZWFzZSBkb250IGhhdGUgbWUsIGJ1dCB0aGlzIGdldHMgdHJpZ2dlcmVkIHRocmVlIHRpbWVzIGFzIG90ZW4gYXMgbmVjZXNzYXJ5Li4uLgogICAgc2V0RmlsdGVyc0Zyb21VUkw6IGZ1bmN0aW9uIHNldEZpbHRlcnNGcm9tVVJMKHBhcmFtKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2ZpbmQgZmlsdGVycwogICAgICB2YXIgZmlsdGVycyA9IFtdOwogICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5maWx0ZXJDb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGZpbHRlckNvbHVtbikgewogICAgICAgIC8vY29uc29sZS5sb2coZmlsdGVyQ29sdW1uKSAvL3RoaXMgaXMgdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgY29sdW1ucyAoZS5nLiAiTG9jYXRpb24iKQogICAgICAgIGZpbHRlckNvbHVtbi5kYl9jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbikgewogICAgICAgICAgaWYgKHBhcmFtW2NvbHVtbl0pIHsKICAgICAgICAgICAgLy95b3UgY2FuIGhhdmUgYXMgbWFueSB2YWx1ZXMgZm9yIGEgZ2l2ZW4gcGFyYW1ldGVyIGFzIHlvdSBoYXZlIGxpbmVzIChlZy4gZmlsdGVyaW5nIHRocmVlIGxpbmVzIGJ5IHRocmVlIGRpZmZlcmVudCBjb21wYW5lcy4gaSBjb3JyZXNwb25kcyB0byB0aGUgbGluZSBjb3VudCkKICAgICAgICAgICAgcGFyYW1bY29sdW1uXS5zcGxpdCgiLCIpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBsaW5lQ291bnQpIHsKICAgICAgICAgICAgICBmaWx0ZXJzW2xpbmVDb3VudF0gPSB7CiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmaWx0ZXJDb2x1bW4uZGlzcGxheSwKICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHsKICAgICAgICAgICAgICAgICAgZmlsdGVyOiBjb2x1bW4sCiAgICAgICAgICAgICAgICAgIGtleTogdmFsdWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7IC8vaXRlcmF0ZSBvdmVyIGV4aXN0aW5nIGxpbmVzIChpbiBzaWRlYmFyKSBhbmQgYXBwbHkgZmlsdGVycyBmcm9tIFVSTAoKICAgICAgdGhpcy4kc3RvcmUuZ2V0dGVycy5nZXRMaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lLCBsaW5lQ291bnQpIHsKICAgICAgICBpZiAoX3RoaXMuJHJlZnNbJ2ZpbHRlclJvdy0nICsgbGluZS5pZGVudGlmaWVyXSkgewogICAgICAgICAgdmFyIGZpbHRlciA9IGZpbHRlcnNbbGluZUNvdW50XTsKICAgICAgICAgIGNvbnNvbGUubG9nKGZpbHRlcik7CgogICAgICAgICAgX3RoaXMuJHJlZnNbJ2ZpbHRlclJvdy0nICsgbGluZS5pZGVudGlmaWVyXVswXS5zZWxlY3QoZmlsdGVyLmRpc3BsYXksIGZpbHRlci5lbGVtZW50LCAiaW5pdGlhbGl6ZSIpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy9hZGQgbmV3IGxpbmVzCiAgICBhZGRMaW5lOiBmdW5jdGlvbiBhZGRMaW5lKCkgewogICAgICB2YXIgcHJldmlvdXNRdWVyeSA9IHRoaXMubGluZXNbdGhpcy5saW5lcy5sZW5ndGggLSAxXSA9PSB1bmRlZmluZWQgPyB7fSA6IHRoaXMubGluZXNbdGhpcy5saW5lcy5sZW5ndGggLSAxXS5xdWVyeTsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2FkZExpbmUnLCBwcmV2aW91c1F1ZXJ5KTsKICAgIH0KICB9LAogIGNvbXBvbmVudHM6IHsKICAgIGZpbHRlclJvdzogZmlsdGVyUm93LAogICAgbWV0cmljczogbWV0cmljcwogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7fTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7fQp9Ow=="},{"version":3,"sources":["sidebar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"col-4 sidebar hidden-md-down\">\n    <h1>Twin DB</h1>\n    <metrics ref=\"metrics\" />\n    <ul>\n      <!-- display filterRow for every lines that is displayed -->\n      <filterRow\n        v-for=\"(line, index) in lines\"\n        :ref=\"'filterRow-'+line.identifier\"\n        :key=\"index\"\n        :line=\"line\"\n      />\n    </ul>\n    <div class=\"addLine\">\n      <button v-on:click=\"addLine\">Add Line</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport filterRow from './filterRow.vue'\nimport metrics from './metrics.vue'\n\nexport default {\n  props: {\n    company: String\n  },\n  computed: {\n    //get lines (incl. color, identifier, filters, and selections) from store\n    lines: {\n      cache: false,\n      get: function(){\n        return this.$store.state.lines\n      }\n    },\n    hasMetrics: {\n      cache: false,\n      get: function() {\n        return this.$store.state.metrics.length > 0 ? true : false\n      }\n    }\n  },\n\n  //if there are no lines on store when page is mounted, add one to always have one line available\n  watch: {\n    hasMetrics: function(newBool) {\n      if(newBool) {\n        this.initializeFromURL(this.$route.query)\n      }\n    },\n    //set filters from URL\n    /*lines: function(newLines){\n      if(newLines) {\n        //console.log(this.$refs['filterRow-'+newLines[0].identifier])\n        this.setFiltersFromURL(this.$route.query)\n      }\n    }*/\n  },\n\n  mounted() {\n\n  },\n\n  methods: {\n    initializeFromURL: function(param) {\n      if(param.lines) {\n        while (param.lines > 0){\n          this.$store.dispatch('addLine')\n          param.lines--\n        }\n      } else {\n        this.$store.dispatch('addLine')\n      }\n\n\n      let metric\n      // if a metric is set in url parameters\n      if(param.metric) {\n        //look for this metric in current metric storage, if you find sth set it, otherwise set the first one\n        metric = this.$store.state.metrics.find(item => item.key ==  param.metric) ? this.$store.state.metrics.find(item => item.key ==  param.metric) : metric = this.$store.state.metrics[0]\n      } else {\n        //if none is passed, just take the first one\n        metric = this.$store.state.metrics[0]\n      }\n      //set the metric\n      this.$refs.metrics.select(metric)\n    },\n\n    //please dont hate me, but this gets triggered three times as oten as necessary....\n    setFiltersFromURL: function(param) {\n\n      //find filters\n      let filters = []\n      this.$store.state.filterColumns.forEach(filterColumn => {\n        //console.log(filterColumn) //this is the display name of the columns (e.g. \"Location\")\n        filterColumn.db_columns.forEach(column => {\n          if(param[column]) {\n            //you can have as many values for a given parameter as you have lines (eg. filtering three lines by three different companes. i corresponds to the line count)\n            param[column].split(\",\").forEach((value,lineCount) => {\n              filters[lineCount] = {display: filterColumn.display, element: {filter: column, key: value}}\n            })\n          }\n        })\n      })\n\n\n\n      //iterate over existing lines (in sidebar) and apply filters from URL\n      this.$store.getters.getLines.forEach((line,lineCount) => {\n        if(this.$refs['filterRow-'+line.identifier]) {\n\n          let filter = filters[lineCount]\n          console.log(filter)\n          this.$refs['filterRow-'+line.identifier][0].select(filter.display,filter.element,\"initialize\")\n        }\n      })\n\n\n\n    },\n    //add new lines\n    addLine: function() {\n      let previousQuery = this.lines[this.lines.length-1] == undefined ? {} : this.lines[this.lines.length-1].query\n      this.$store.dispatch('addLine',previousQuery)\n    },\n  },\n\n  components: {\n    filterRow, metrics\n  },\n\n  data() {\n    return {\n    }\n  },\n\n  created() {\n\n  },\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n.sidebar {\n  background-color: #39393B;\n  color: white;\n  min-width: 300px;\n  padding: 0px !important;\n  min-height: 100%;\n}\n\nul {\n  margin: 0;\n  padding: 0\n}\n\n.addLine {\n  margin: 10px 30px;\n}\n.addLine button {\n  background: none;\n  border: 1px solid white;\n  border-radius: 5px;\n  padding: 10px;\n  color: white;\n  width: 100%;\n}\n\n.addLine button:hover {\n  font-weight: bold;\n}\n\n</style>\n"],"sourceRoot":"src/components"}]}