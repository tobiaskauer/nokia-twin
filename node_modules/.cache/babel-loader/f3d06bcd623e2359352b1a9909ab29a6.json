{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/nokiatwin/node_modules/eslint-loader/index.js??ref--13-0!/Users/tk/GitHub/nokiatwin/src/store/store.js","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/store/store.js","mtime":1602254206676},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/tk/GitHub/nokiatwin/src/store/store.js"],"names":["Vue","Vuex","axios","uniqid","use","server","Store","state","lines","metrics","filterColumns","colors","hex","used","addedFilters","events","getters","getFilterColumns","map","col","visible","elements","slice","added","filter","x","db_columns","includes","concat","display","filters","autocomplete","key","getLines","getContext","context","mutations","removeLine","identifier","set","find","length","splice","findIndex","writeQuery","payload","index","query","writeValues","values","addFilter","actions","addLine","dispatch","line","time","colorIndex","element","color","getData","commit","forEach","i","callAPI","type","post","headers","then","response","data","catch","error","console","log","debugAPI","metric","filter_company","filter_country","filter_employee_title","split","getMetricsAndFilters","startsWith","item","getEvents","getFilters","exists","push","column","listSelector","count","sort","a","b"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\nimport uniqid from 'uniqid';\n\nVue.use(Vuex)\n\nlet server = \"http://localhost:8080/nokiatwin/api.php\" //development\n//let server = \"https://social-dynamics.net/nokiatwin/api.php\" // production\n\nexport default new Vuex.Store({\n  state: {\n    lines: [], //empty array, filled by addLine() and removeLine(), triggered via sidebar.vue\n    metrics:[], //metrics to display (metric_ columns in db)\n    filterColumns: [], //filters to apply (filter_ columns in db)\n    colors: [\n      {hex: \"#20C5A0\", used: false},\n      {hex: \"#BD10E0\", used: false},\n      {hex: \"#F5A623\", used: false},\n      {hex: \"#4A90E2\", used: false},\n      {hex: \"#ACC000\", used: false}\n    ],\n    addedFilters: [], //initialize array for filters the user added via typeahead\n    events: []\n  },\n\n\n\n  getters: {\n    //get reduced list of possible values to display\n    getFilterColumns: state => {\n      return state.filterColumns.map(col => {\n        let visible = col.elements.slice(0,5) //select five most frequent labels\n        //identify filters that were added for the current column\n        let added = state.addedFilters.filter(x=>col.db_columns.includes(x.filter)) //select added filters that match any of the given db columns\n        visible = visible.concat(added)\n\n        return {\n          display: col.display,\n          filters: col.db_columns,\n          elements: visible,\n          autocomplete: col.elements.filter(x=>x.key != null)\n        }\n      })\n    },\n\n    //get Lines (triggered via sidebar and )\n    getLines: (state) => state.lines,\n    getContext: (state) => state.context\n  },\n\n\n  mutations: {\n      //remove line from sidebar\n    removeLine(state, identifier) {\n      //make used color available again\n      Vue.set(state.colors.find(x=>x.used == identifier),'used',false)\n      //delete line from state\n      if(state.lines.length > 1) state.lines.splice(state.lines.findIndex(x=>x.identifier == identifier),1)\n    },\n\n    //write query to lines\n    writeQuery(state, payload) {\n      //console.log(\"writeQuery() called\", payload)\n      Vue.set(state.lines[payload.index].query, payload.filter, payload.key)\n    },\n\n    //write A PI return to lines (gotten from callAPI())\n    writeValues(state, payload) {\n      //console.log(\"writeData called\", payload)\n      Vue.set(state.lines[payload.index], \"values\", payload.values)\n    },\n\n    //add filter via typeahead\n    addFilter(state, payload) {\n      Vue.set(state.addedFilters,state.addedFilters.length,payload)\n    },\n  },\n\n\n\n  actions: {\n    //initialize a new line (incl. filters in sidebar and actual line in graph), triggered from sidebar\n    addLine(\n      {state, dispatch},\n      //query //query is provided as payload in sidebar.vue\n    ) {\n      let line = {}\n\n      //TODO: hand over previous query to newly created line\n      line.query = {}\n\n      //unique identifier to update query or delete line\n      line.identifier = uniqid.time()\n\n      //assign an unused color and mark it used\n      let colorIndex = state.colors.findIndex(element  => !element.used)\n      line.color = state.colors[colorIndex].hex\n      Vue.set(state.colors[colorIndex],'used',line.identifier)\n      Vue.set(state.lines, state.lines.length, line) //push new line at end of lines array\n\n      dispatch('getData', {\n        identifier: false,\n        filter: \"metric\",\n        query: {key: state.metrics[0].key} //TODO replace with first metric (as soon as its initialized)\n      })\n    },\n\n\n    //update queries and get data for them\n    getData({dispatch, commit, state}, payload) {\n      //console.log(\"getData() called\", payload)\n\n      if(payload.identifier) { //if payload just applies to a single line\n        commit('writeQuery',{\n          index: state.lines.findIndex(x=>x.identifier == payload.identifier),\n          filter: payload.query.filter,\n          key: payload.query.key\n        })\n        dispatch('callAPI',payload.identifier)\n      } else { //if it affects all lines (e.g. when a metric is changed)\n        state.lines.forEach((line, i) => {\n          commit('writeQuery',{\n            index: i,\n            filter: 'metric',\n            key: payload.query.key\n          })\n          dispatch('callAPI',line.identifier)\n          //dispatch('debugAPI')\n        })\n      }\n    },\n\n    //get data from API\n    callAPI( {commit,state}, identifier) {\n      //get query for line based on its identifier\n      let query = state.lines.find(x=>x.identifier == identifier).query\n      query.type = 'result' //set query end (quasi endpoint) for api.php\n\n      //axios.post( \"https://social-dynamics.net/nokiatwin/api.php\",query,\n      axios.post( server,query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        commit('writeValues',{\n          index: state.lines.findIndex(x=>x.identifier == identifier),\n          values: response.data\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n    debugAPI() {\n      let query = {\n        type: 'debug',\n        metric: 'metric_rating_overall',\n        filter_company: 'starbucks',\n        filter_country: 'United Kingdom',\n        filter_employee_title: 'Barista'\n      }\n      axios.post( server,query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        console.log(response.data.split(\"end_output\")[0])\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n\n    //get Metrics and Filters once to write them to storage\n    getMetricsAndFilters({dispatch, state}) {\n      let query = {type: 'metrics'}\n      axios.post( server,query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        //filter response by metric_ and write it to store\n        let metrics = response.data.filter(x=>x.key.startsWith('metric_')).map(item => {\n          //if no display name given, use db column\n          if(!item.display) item.display = item.key\n          return item\n        })\n        Vue.set(state,'metrics',metrics)\n\n\n        //filter by filter_ and hand to getFilters() (which can get values for each filter)\n        dispatch('getFilters', response.data.filter(x=>x.key.startsWith('filter_')))\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n    getEvents({state}) {\n      let query = {type: 'events'}\n      axios.post( server,query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        Vue.set(state,'events',response.data)\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n    getFilters({state}, payload) {\n      //transform filters with the same name into a group with multiple db_columns\n      let filters = []\n      payload.forEach(filter => {\n        let exists = filters.find(x=>x.display == filter.display)\n        if(exists) {\n          exists.db_columns.push(filter.key)\n        } else {\n          filters.push({display: filter.display, db_columns: [filter.key]})\n        }\n      })\n\n      //generate lists of columns, then fill them with filters\n      filters = filters.map(filter => {\n        filter.elements = [] //bucket to fill\n        filter.db_columns.forEach(column => {\n          let query = {\n            type: 'selectors',\n            listSelector: column\n          }\n          axios.post( server,query,  //for development, this is overwritten in vue.config.js\n            {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n          })\n          .then(response => {\n            response.data.forEach(element => { //for each item in the list, create a unique object to pass on\n              let item = {\n                key: element[column],\n                filter: column,\n                count: element.count\n              }\n              filter.elements.push(item) //fill the bucket\n            })\n            filter.elements.sort((a,b) => b.count - a.count)\n          })\n        })\n        return filter\n      })\n      Vue.set(state,'filterColumns',filters)\n    }\n  }\n})\n"]}]}