{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/thread-loader/dist/cjs.js!/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/nokiatwin/node_modules/eslint-loader/index.js??ref--13-0!/Users/tk/GitHub/nokiatwin/src/store/store.js","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/store/store.js","mtime":1597231691752},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/tk/GitHub/nokiatwin/src/store/store.js"],"names":["Vue","Vuex","axios","uniqid","use","Store","state","lines","metrics","filterColumns","addedFilters","context","date","text","getters","getFilterColumns","map","col","visible","elements","slice","added","filter","x","toLowerCase","display","concat","autocomplete","getLines","getContext","mutations","addLine","line","colors","color","length","query","filters","forEach","db_columns","dbcol","push","undefined","identifier","time","set","removeLine","splice","findIndex","writeQuery","payload","index","key","writeValues","values","addFilter","actions","getData","dispatch","commit","i","callAPI","find","type","post","headers","then","response","data","catch","error","console","log","debugAPI","metric","filter_company","filter_country","filter_employee_title","split","getMetricsAndFilters","startsWith","item","getFilters","exists","column","listSelector","element","count","sort","a","b"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\nimport uniqid from 'uniqid';\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    lines: [], //empty array, filled by addLine() and removeLine(), triggered via sidebar.vue\n    metrics:[], //metrics to display (metric_ columns in db)\n    filterColumns: [], //filters to apply (filter_ columns in db)\n\n     //initialize array for filters the user added via typeahead\n    addedFilters: [],\n\n    //time-based annotations\n    context: [\n      {date: \"2009-11\", text:\"Barrack Obama elected president\"},\n      {date: \"2017-06\", text:\"Tobi starts at Bell Labs\"}\n    ]\n  },\n\n\n\n  getters: {\n    //get reduced list of possible values to display\n    getFilterColumns: state => {\n      return state.filterColumns.map(col => {\n        let visible = col.elements.slice(0,5) //select five most frequent labels\n        //identify filters that were added for the current column\n        let added = state.addedFilters.filter(x=>x.filter.toLowerCase() == col.display.toLowerCase()) //select added filters that match the column\n        visible = visible.concat(added)\n        return {\n          display: col.display,\n          elements: visible,\n          autocomplete: col.elements\n        }\n      })\n    },\n\n    //get Lines (triggered via sidebar and )\n    getLines: (state) => state.lines,\n    getContext: (state) => state.context\n  },\n\n\n  mutations: {\n    //initialize a new line (incl. filters in sidebar and actual line in graph), triggered from sidebar\n    addLine(state) {\n      let line = {}\n      //set a color for to identify the line\n      //TODO Does not select last two colors for some reason\n      let colors = [\"#20C5A0\",\"#BD10E0\",\"#F5A623\",\"4A90E2\",\"ACC000\"]\n      line.color = colors[state.lines.length]\n\n      //TODO: FIX! adding a new line flushes queries of existing lines\n      //check if any parameters were passed, if so, take them, if not initialize empty query for db with all possible filters\n      //line.query = (Object.keys(query).length !== 0) ? query : {}\n      line.query = {}\n\n      let filters = []\n      state.filterColumns.forEach(col => {\n        col.db_columns.forEach(dbcol => {\n          filters.push(dbcol)\n        })\n      })\n      filters.push(\"metric\")\n      filters.forEach(filter => line.query[filter] = undefined)\n      line.identifier = uniqid.time() //unique identifier to update query or delete line\n      Vue.set(state.lines, state.lines.length, line) //push new line at end of lines array\n    },\n\n    //remove line from sidebar\n    removeLine(state, identifier) {\n      if(state.lines.length > 1)\n      state.lines.splice(state.lines.findIndex(x=>x.identifier == identifier),1)\n    },\n\n    //write query to lines\n    writeQuery(state, payload) {\n      //console.log(\"writeQuery() called\", payload)\n      Vue.set(state.lines[payload.index].query, payload.filter, payload.key)\n    },\n\n    //write A PI return to lines (gotten from callAPI())\n    writeValues(state, payload) {\n      //console.log(\"writeData called\", payload)\n      Vue.set(state.lines[payload.index], \"values\", payload.values)\n    },\n\n    //add filter via typeahead\n    addFilter(state, payload) {\n      Vue.set(state.addedFilters,state.addedFilters.length,payload)\n    },\n\n  /*  writeMetrics(state, payload) {\n\n      //Vue.set(state.metrics,payload)\n    }*/\n  },\n\n\n\n  actions: {\n    //update queries and get data for them\n    getData({dispatch, commit, state}, payload) {\n      //console.log(\"getData() called\", payload)\n      if(payload.identifier) { //if payload just applies to a single line\n\n        commit('writeQuery',{\n          index: state.lines.findIndex(x=>x.identifier == payload.identifier),\n          filter: payload.query.filter,\n          key: payload.query.key\n        })\n        dispatch('callAPI',payload.identifier)\n      } else { //if it affects all lines (e.g. when a metric is changed)\n        state.lines.forEach((line, i) => {\n          commit('writeQuery',{\n            index: i,\n            filter: 'metric',\n            key: payload.query.key\n          })\n          dispatch('callAPI',line.identifier)\n          //dispatch('debugAPI')\n        })\n      }\n    },\n\n    //get data from API\n    callAPI( {commit,state}, identifier) {\n      //get query for line based on its identifier\n      let query = state.lines.find(x=>x.identifier == identifier).query\n      query.type = 'result' //set query end (quasi endpoint) for api.php\n\n      axios.post( \"https://social-dynamics.net/nokiatwin/api.php\",query,\n      //axios.post( \"http://localhost:8080/nokiatwin/api.php\",query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        commit('writeValues',{\n          index: state.lines.findIndex(x=>x.identifier == identifier),\n          values: response.data\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n    debugAPI() {\n      let query = {\n        type: 'debug',\n        metric: 'metric_rating_overall',\n        filter_company: 'starbucks',\n        filter_country: 'United Kingdom',\n        filter_employee_title: 'Barista'\n      }\n      axios.post( \"http://localhost:8080/nokiatwin/api.php\",query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        console.log(response.data.split(\"end_output\")[0])\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n\n    //get\n    getMetricsAndFilters({dispatch, state}) {\n      let query = {type: 'metrics'}\n      axios.post( \"https://social-dynamics.net/nokiatwin/api.php\",query, //for development, this is overwritten in vue.config.js\n      //axios.post( \"http://localhost:8080/nokiatwin/api.php\",query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        //filter response by metric_ and write it to store\n        let metrics = response.data.filter(x=>x.key.startsWith('metric_')).map(item => {\n          //if no display name given, use db column\n          if(!item.display) item.display = item.key\n          return item\n        })\n        Vue.set(state,'metrics',metrics)\n\n        //filter by filter_ and hand to getFilters() (which can get values for each filter)\n        dispatch('getFilters', response.data.filter(x=>x.key.startsWith('filter_')))\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n    getFilters({state}, payload) {\n      //transform filters with the same name into a group with multiple db_columns\n      let filters = []\n      payload.forEach(filter => {\n        let exists = filters.find(x=>x.display == filter.display)\n        if(exists) {\n          exists.db_columns.push(filter.key)\n        } else {\n          filters.push({display: filter.display, db_columns: [filter.key]})\n        }\n      })\n\n      //generate lists of columns, then fill them with filters\n      filters = filters.map(filter => {\n        filter.elements = [] //bucket to fill\n        filter.db_columns.forEach(column => {\n          let query = {\n            type: 'selectors',\n            listSelector: column\n          }\n          axios.post( \"https://social-dynamics.net/nokiatwin/api.php\",query,\n          //axios.post( \"http://localhost:8080/nokiatwin/api.php\",query,  //for development, this is overwritten in vue.config.js\n            {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n          })\n          .then(response => {\n            response.data.forEach(element => { //for each item in the list, create a unique object to pass on\n              let item = {\n                key: element[column],\n                filter: column,\n                count: element.count\n              }\n              filter.elements.push(item) //fill the bucket\n            })\n            filter.elements.sort((a,b) => b.count - a.count)\n          })\n        })\n        return filter\n      })\n      Vue.set(state,'filterColumns',filters)\n    }\n  }\n})\n"]}]}