{"remainingRequest":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js!/Users/tk/GitHub/nokiatwin/node_modules/eslint-loader/index.js??ref--13-0!/Users/tk/GitHub/nokiatwin/src/store/store.js","dependencies":[{"path":"/Users/tk/GitHub/nokiatwin/src/store/store.js","mtime":1597159183591},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tk/GitHub/nokiatwin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yIjsKaW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHVuaXFpZCBmcm9tICd1bmlxaWQnOwpWdWUudXNlKFZ1ZXgpOwpleHBvcnQgZGVmYXVsdCBuZXcgVnVleC5TdG9yZSh7CiAgc3RhdGU6IHsKICAgIGxpbmVzOiBbXSwKICAgIC8vZW1wdHkgYXJyYXksIGZpbGxlZCBieSBhZGRMaW5lKCkgYW5kIHJlbW92ZUxpbmUoKSwgdHJpZ2dlcmVkIHZpYSBzaWRlYmFyLnZ1ZQogICAgbWV0cmljczogW10sCiAgICAvL21ldHJpY3MgdG8gZGlzcGxheSAobWV0cmljXyBjb2x1bW5zIGluIGRiKQogICAgZmlsdGVyQ29sdW1uczogW10sCiAgICAvL2ZpbHRlcnMgdG8gYXBwbHkgKGZpbHRlcl8gY29sdW1ucyBpbiBkYikKICAgIC8vaW5pdGlhbGl6ZSBhcnJheSBmb3IgZmlsdGVycyB0aGUgdXNlciBhZGRlZCB2aWEgdHlwZWFoZWFkCiAgICBhZGRlZEZpbHRlcnM6IFtdLAogICAgLy90aW1lLWJhc2VkIGFubm90YXRpb25zCiAgICBjb250ZXh0OiBbewogICAgICBkYXRlOiAiMjAwOS0xMSIsCiAgICAgIHRleHQ6ICJCYXJyYWNrIE9iYW1hIGVsZWN0ZWQgcHJlc2lkZW50IgogICAgfSwgewogICAgICBkYXRlOiAiMjAxNy0wNiIsCiAgICAgIHRleHQ6ICJUb2JpIHN0YXJ0cyBhdCBCZWxsIExhYnMiCiAgICB9XQogIH0sCiAgZ2V0dGVyczogewogICAgLy9nZXQgcmVkdWNlZCBsaXN0IG9mIHBvc3NpYmxlIHZhbHVlcyB0byBkaXNwbGF5CiAgICBnZXRGaWx0ZXJDb2x1bW5zOiBmdW5jdGlvbiBnZXRGaWx0ZXJDb2x1bW5zKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5maWx0ZXJDb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sKSB7CiAgICAgICAgdmFyIHZpc2libGUgPSBjb2wuZWxlbWVudHMuc2xpY2UoMCwgNSk7IC8vc2VsZWN0IGZpdmUgbW9zdCBmcmVxdWVudCBsYWJlbHMKICAgICAgICAvL2lkZW50aWZ5IGZpbHRlcnMgdGhhdCB3ZXJlIGFkZGVkIGZvciB0aGUgY3VycmVudCBjb2x1bW4KCiAgICAgICAgdmFyIGFkZGVkID0gc3RhdGUuYWRkZWRGaWx0ZXJzLmZpbHRlcihmdW5jdGlvbiAoeCkgewogICAgICAgICAgcmV0dXJuIHguZmlsdGVyLnRvTG93ZXJDYXNlKCkgPT0gY29sLmRpc3BsYXkudG9Mb3dlckNhc2UoKTsKICAgICAgICB9KTsgLy9zZWxlY3QgYWRkZWQgZmlsdGVycyB0aGF0IG1hdGNoIHRoZSBjb2x1bW4KCiAgICAgICAgdmlzaWJsZSA9IHZpc2libGUuY29uY2F0KGFkZGVkKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgZGlzcGxheTogY29sLmRpc3BsYXksCiAgICAgICAgICBlbGVtZW50czogdmlzaWJsZSwKICAgICAgICAgIGF1dG9jb21wbGV0ZTogY29sLmVsZW1lbnRzCiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9LAogICAgLy9nZXQgTGluZXMgKHRyaWdnZXJlZCB2aWEgc2lkZWJhciBhbmQgKQogICAgZ2V0TGluZXM6IGZ1bmN0aW9uIGdldExpbmVzKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5saW5lczsKICAgIH0sCiAgICBnZXRDb250ZXh0OiBmdW5jdGlvbiBnZXRDb250ZXh0KHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5jb250ZXh0OwogICAgfQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICAvL2luaXRpYWxpemUgYSBuZXcgbGluZSAoaW5jbC4gZmlsdGVycyBpbiBzaWRlYmFyIGFuZCBhY3R1YWwgbGluZSBpbiBncmFwaCksIHRyaWdnZXJlZCBmcm9tIHNpZGViYXIKICAgIGFkZExpbmU6IGZ1bmN0aW9uIGFkZExpbmUoc3RhdGUpIHsKICAgICAgdmFyIGxpbmUgPSB7fTsgLy9zZXQgYSBjb2xvciBmb3IgdG8gaWRlbnRpZnkgdGhlIGxpbmUKICAgICAgLy9UT0RPIERvZXMgbm90IHNlbGVjdCBsYXN0IHR3byBjb2xvcnMgZm9yIHNvbWUgcmVhc29uCgogICAgICB2YXIgY29sb3JzID0gWyIjMjBDNUEwIiwgIiNCRDEwRTAiLCAiI0Y1QTYyMyIsICI0QTkwRTIiLCAiQUNDMDAwIl07CiAgICAgIGxpbmUuY29sb3IgPSBjb2xvcnNbc3RhdGUubGluZXMubGVuZ3RoXTsgLy9UT0RPOiBGSVghIGFkZGluZyBhIG5ldyBsaW5lIGZsdXNoZXMgcXVlcmllcyBvZiBleGlzdGluZyBsaW5lcwogICAgICAvL2NoZWNrIGlmIGFueSBwYXJhbWV0ZXJzIHdlcmUgcGFzc2VkLCBpZiBzbywgdGFrZSB0aGVtLCBpZiBub3QgaW5pdGlhbGl6ZSBlbXB0eSBxdWVyeSBmb3IgZGIgd2l0aCBhbGwgcG9zc2libGUgZmlsdGVycwogICAgICAvL2xpbmUucXVlcnkgPSAoT2JqZWN0LmtleXMocXVlcnkpLmxlbmd0aCAhPT0gMCkgPyBxdWVyeSA6IHt9CgogICAgICBsaW5lLnF1ZXJ5ID0ge307CiAgICAgIHZhciBmaWx0ZXJzID0gW107CiAgICAgIHN0YXRlLmZpbHRlckNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoY29sKSB7CiAgICAgICAgY29sLmRiX2NvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoZGJjb2wpIHsKICAgICAgICAgIGZpbHRlcnMucHVzaChkYmNvbCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICBmaWx0ZXJzLnB1c2goIm1ldHJpYyIpOwogICAgICBmaWx0ZXJzLmZvckVhY2goZnVuY3Rpb24gKGZpbHRlcikgewogICAgICAgIHJldHVybiBsaW5lLnF1ZXJ5W2ZpbHRlcl0gPSB1bmRlZmluZWQ7CiAgICAgIH0pOwogICAgICBsaW5lLmlkZW50aWZpZXIgPSB1bmlxaWQudGltZSgpOyAvL3VuaXF1ZSBpZGVudGlmaWVyIHRvIHVwZGF0ZSBxdWVyeSBvciBkZWxldGUgbGluZQoKICAgICAgVnVlLnNldChzdGF0ZS5saW5lcywgc3RhdGUubGluZXMubGVuZ3RoLCBsaW5lKTsgLy9wdXNoIG5ldyBsaW5lIGF0IGVuZCBvZiBsaW5lcyBhcnJheQogICAgfSwKICAgIC8vcmVtb3ZlIGxpbmUgZnJvbSBzaWRlYmFyCiAgICByZW1vdmVMaW5lOiBmdW5jdGlvbiByZW1vdmVMaW5lKHN0YXRlLCBpZGVudGlmaWVyKSB7CiAgICAgIGlmIChzdGF0ZS5saW5lcy5sZW5ndGggPiAxKSBzdGF0ZS5saW5lcy5zcGxpY2Uoc3RhdGUubGluZXMuZmluZEluZGV4KGZ1bmN0aW9uICh4KSB7CiAgICAgICAgcmV0dXJuIHguaWRlbnRpZmllciA9PSBpZGVudGlmaWVyOwogICAgICB9KSwgMSk7CiAgICB9LAogICAgLy93cml0ZSBxdWVyeSB0byBsaW5lcwogICAgd3JpdGVRdWVyeTogZnVuY3Rpb24gd3JpdGVRdWVyeShzdGF0ZSwgcGF5bG9hZCkgewogICAgICAvL2NvbnNvbGUubG9nKCJ3cml0ZVF1ZXJ5KCkgY2FsbGVkIiwgcGF5bG9hZCkKICAgICAgVnVlLnNldChzdGF0ZS5saW5lc1twYXlsb2FkLmluZGV4XS5xdWVyeSwgcGF5bG9hZC5maWx0ZXIsIHBheWxvYWQua2V5KTsKICAgIH0sCiAgICAvL3dyaXRlIEEgUEkgcmV0dXJuIHRvIGxpbmVzIChnb3R0ZW4gZnJvbSBjYWxsQVBJKCkpCiAgICB3cml0ZVZhbHVlczogZnVuY3Rpb24gd3JpdGVWYWx1ZXMoc3RhdGUsIHBheWxvYWQpIHsKICAgICAgLy9jb25zb2xlLmxvZygid3JpdGVEYXRhIGNhbGxlZCIsIHBheWxvYWQpCiAgICAgIFZ1ZS5zZXQoc3RhdGUubGluZXNbcGF5bG9hZC5pbmRleF0sICJ2YWx1ZXMiLCBwYXlsb2FkLnZhbHVlcyk7CiAgICB9LAogICAgLy9hZGQgZmlsdGVyIHZpYSB0eXBlYWhlYWQKICAgIGFkZEZpbHRlcjogZnVuY3Rpb24gYWRkRmlsdGVyKHN0YXRlLCBwYXlsb2FkKSB7CiAgICAgIFZ1ZS5zZXQoc3RhdGUuYWRkZWRGaWx0ZXJzLCBzdGF0ZS5hZGRlZEZpbHRlcnMubGVuZ3RoLCBwYXlsb2FkKTsKICAgIH0KICAgIC8qICB3cml0ZU1ldHJpY3Moc3RhdGUsIHBheWxvYWQpIHsKICAgICAgICAgLy9WdWUuc2V0KHN0YXRlLm1ldHJpY3MscGF5bG9hZCkKICAgICAgfSovCgogIH0sCiAgYWN0aW9uczogewogICAgLy91cGRhdGUgcXVlcmllcyBhbmQgZ2V0IGRhdGEgZm9yIHRoZW0KICAgIGdldERhdGE6IGZ1bmN0aW9uIGdldERhdGEoX3JlZiwgcGF5bG9hZCkgewogICAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLAogICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQsCiAgICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7CgogICAgICAvL2NvbnNvbGUubG9nKCJnZXREYXRhKCkgY2FsbGVkIiwgcGF5bG9hZCkKICAgICAgaWYgKHBheWxvYWQuaWRlbnRpZmllcikgewogICAgICAgIC8vaWYgcGF5bG9hZCBqdXN0IGFwcGxpZXMgdG8gYSBzaW5nbGUgbGluZQogICAgICAgIGNvbW1pdCgnd3JpdGVRdWVyeScsIHsKICAgICAgICAgIGluZGV4OiBzdGF0ZS5saW5lcy5maW5kSW5kZXgoZnVuY3Rpb24gKHgpIHsKICAgICAgICAgICAgcmV0dXJuIHguaWRlbnRpZmllciA9PSBwYXlsb2FkLmlkZW50aWZpZXI7CiAgICAgICAgICB9KSwKICAgICAgICAgIGZpbHRlcjogcGF5bG9hZC5xdWVyeS5maWx0ZXIsCiAgICAgICAgICBrZXk6IHBheWxvYWQucXVlcnkua2V5CiAgICAgICAgfSk7CiAgICAgICAgZGlzcGF0Y2goJ2NhbGxBUEknLCBwYXlsb2FkLmlkZW50aWZpZXIpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vaWYgaXQgYWZmZWN0cyBhbGwgbGluZXMgKGUuZy4gd2hlbiBhIG1ldHJpYyBpcyBjaGFuZ2VkKQogICAgICAgIHN0YXRlLmxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUsIGkpIHsKICAgICAgICAgIGNvbW1pdCgnd3JpdGVRdWVyeScsIHsKICAgICAgICAgICAgaW5kZXg6IGksCiAgICAgICAgICAgIGZpbHRlcjogJ21ldHJpYycsCiAgICAgICAgICAgIGtleTogcGF5bG9hZC5xdWVyeS5rZXkKICAgICAgICAgIH0pOwogICAgICAgICAgZGlzcGF0Y2goJ2NhbGxBUEknLCBsaW5lLmlkZW50aWZpZXIpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgLy9nZXQgZGF0YSBmcm9tIEFQSQogICAgY2FsbEFQSTogZnVuY3Rpb24gY2FsbEFQSShfcmVmMiwgaWRlbnRpZmllcikgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjIuY29tbWl0LAogICAgICAgICAgc3RhdGUgPSBfcmVmMi5zdGF0ZTsKICAgICAgdmFyIHF1ZXJ5ID0gc3RhdGUubGluZXMuZmluZChmdW5jdGlvbiAoeCkgewogICAgICAgIHJldHVybiB4LmlkZW50aWZpZXIgPT0gaWRlbnRpZmllcjsKICAgICAgfSkucXVlcnk7CiAgICAgIGlmICghcXVlcnkubWV0cmljKSBxdWVyeS5tZXRyaWMgPSAibWV0cmljX3JhdGluZ19vdmVyYWxsIjsgLy9hdm9pZCBjcmFzaCBiZWNhdXNlIGluaXRpYWwgbWV0cmljIGhhcyBub3QgYmVlbiBkZWZpbmVkCgogICAgICBxdWVyeS50eXBlID0gJ3Jlc3VsdCc7IC8vc2V0IHF1ZXJ5IGVuZCAocXVhc2kgZW5kcG9pbnQpIGZvciBhcGkucGhwCiAgICAgIC8vYXhpb3MucG9zdCggImh0dHA6Ly9zb2NpYWwtZHluYW1pY3MubmV0L25va2lhdHdpbi9hcGkucGhwIixxdWVyeSwKCiAgICAgIGF4aW9zLnBvc3QoImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9ub2tpYXR3aW4vYXBpX25ldy5waHAiLCBxdWVyeSwgLy9mb3IgZGV2ZWxvcG1lbnQsIHRoaXMgaXMgb3ZlcndyaXR0ZW4gaW4gdnVlLmNvbmZpZy5qcwogICAgICB7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnCiAgICAgICAgfQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoeCkgewogICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKHguZCk7CiAgICAgICAgfSk7CiAgICAgICAgY29tbWl0KCd3cml0ZVZhbHVlcycsIHsKICAgICAgICAgIGluZGV4OiBzdGF0ZS5saW5lcy5maW5kSW5kZXgoZnVuY3Rpb24gKHgpIHsKICAgICAgICAgICAgcmV0dXJuIHguaWRlbnRpZmllciA9PSBpZGVudGlmaWVyOwogICAgICAgICAgfSksCiAgICAgICAgICB2YWx1ZXM6IHJlc3BvbnNlLmRhdGEKICAgICAgICB9KTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICB9KTsKICAgIH0sCiAgICAvL2dldAogICAgZ2V0TWV0cmljc0FuZEZpbHRlcnM6IGZ1bmN0aW9uIGdldE1ldHJpY3NBbmRGaWx0ZXJzKF9yZWYzKSB7CiAgICAgIHZhciBkaXNwYXRjaCA9IF9yZWYzLmRpc3BhdGNoLAogICAgICAgICAgc3RhdGUgPSBfcmVmMy5zdGF0ZTsKICAgICAgdmFyIHF1ZXJ5ID0gewogICAgICAgIHR5cGU6ICdtZXRyaWNzJwogICAgICB9OwogICAgICBheGlvcy5wb3N0KCJodHRwOi8vbG9jYWxob3N0OjgwODAvbm9raWF0d2luL2FwaV9uZXcucGhwIiwgcXVlcnksIC8vZm9yIGRldmVsb3BtZW50LCB0aGlzIGlzIG92ZXJ3cml0dGVuIGluIHZ1ZS5jb25maWcuanMKICAgICAgewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04JwogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAvL2ZpbHRlciByZXNwb25zZSBieSBtZXRyaWNfIGFuZCB3cml0ZSBpdCB0byBzdG9yZQogICAgICAgIHZhciBtZXRyaWNzID0gcmVzcG9uc2UuZGF0YS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsKICAgICAgICAgIHJldHVybiB4LmtleS5zdGFydHNXaXRoKCdtZXRyaWNfJyk7CiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAvL2lmIG5vIGRpc3BsYXkgbmFtZSBnaXZlbiwgdXNlIGRiIGNvbHVtbgogICAgICAgICAgaWYgKCFpdGVtLmRpc3BsYXkpIGl0ZW0uZGlzcGxheSA9IGl0ZW0ua2V5OwogICAgICAgICAgcmV0dXJuIGl0ZW07CiAgICAgICAgfSk7CiAgICAgICAgVnVlLnNldChzdGF0ZSwgJ21ldHJpY3MnLCBtZXRyaWNzKTsgLy9maWx0ZXIgYnkgZmlsdGVyXyBhbmQgaGFuZCB0byBnZXRGaWx0ZXJzKCkgKHdoaWNoIGNhbiBnZXQgdmFsdWVzIGZvciBlYWNoIGZpbHRlcikKCiAgICAgICAgZGlzcGF0Y2goJ2dldEZpbHRlcnMnLCByZXNwb25zZS5kYXRhLmZpbHRlcihmdW5jdGlvbiAoeCkgewogICAgICAgICAgcmV0dXJuIHgua2V5LnN0YXJ0c1dpdGgoJ2ZpbHRlcl8nKTsKICAgICAgICB9KSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0RmlsdGVyczogZnVuY3Rpb24gZ2V0RmlsdGVycyhfcmVmNCwgcGF5bG9hZCkgewogICAgICB2YXIgc3RhdGUgPSBfcmVmNC5zdGF0ZTsKICAgICAgLy90cmFuc2Zvcm0gZmlsdGVycyB3aXRoIHRoZSBzYW1lIG5hbWUgaW50byBhIGdyb3VwIHdpdGggbXVsdGlwbGUgZGJfY29sdW1ucwogICAgICB2YXIgZmlsdGVycyA9IFtdOwogICAgICBwYXlsb2FkLmZvckVhY2goZnVuY3Rpb24gKGZpbHRlcikgewogICAgICAgIHZhciBleGlzdHMgPSBmaWx0ZXJzLmZpbmQoZnVuY3Rpb24gKHgpIHsKICAgICAgICAgIHJldHVybiB4LmRpc3BsYXkgPT0gZmlsdGVyLmRpc3BsYXk7CiAgICAgICAgfSk7CgogICAgICAgIGlmIChleGlzdHMpIHsKICAgICAgICAgIGV4aXN0cy5kYl9jb2x1bW5zLnB1c2goZmlsdGVyLmtleSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGZpbHRlcnMucHVzaCh7CiAgICAgICAgICAgIGRpc3BsYXk6IGZpbHRlci5kaXNwbGF5LAogICAgICAgICAgICBkYl9jb2x1bW5zOiBbZmlsdGVyLmtleV0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7IC8vZ2VuZXJhdGUgbGlzdHMgb2YgY29sdW1ucywgdGhlbiBmaWxsIHRoZW0gd2l0aCBmaWx0ZXJzCgogICAgICBmaWx0ZXJzID0gZmlsdGVycy5tYXAoZnVuY3Rpb24gKGZpbHRlcikgewogICAgICAgIGZpbHRlci5lbGVtZW50cyA9IFtdOyAvL2J1Y2tldCB0byBmaWxsCgogICAgICAgIGZpbHRlci5kYl9jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbikgewogICAgICAgICAgdmFyIHF1ZXJ5ID0gewogICAgICAgICAgICB0eXBlOiAnc2VsZWN0b3JzJywKICAgICAgICAgICAgbGlzdFNlbGVjdG9yOiBjb2x1bW4KICAgICAgICAgIH07IC8vYXhpb3MucG9zdCggImh0dHBzOi8vc29jaWFsLWR5bmFtaWNzLm5ldC9ub2tpYXR3aW4vYXBpLnBocCIscXVlcnksCgogICAgICAgICAgYXhpb3MucG9zdCgiaHR0cDovL2xvY2FsaG9zdDo4MDgwL25va2lhdHdpbi9hcGlfbmV3LnBocCIsIHF1ZXJ5LCAvL2ZvciBkZXZlbG9wbWVudCwgdGhpcyBpcyBvdmVyd3JpdHRlbiBpbiB2dWUuY29uZmlnLmpzCiAgICAgICAgICB7CiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCcKICAgICAgICAgICAgfQogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgICAgICAgICAgLy9mb3IgZWFjaCBpdGVtIGluIHRoZSBsaXN0LCBjcmVhdGUgYSB1bmlxdWUgb2JqZWN0IHRvIHBhc3Mgb24KICAgICAgICAgICAgICB2YXIgaXRlbSA9IHsKICAgICAgICAgICAgICAgIGtleTogZWxlbWVudFtjb2x1bW5dLAogICAgICAgICAgICAgICAgZmlsdGVyOiBjb2x1bW4sCiAgICAgICAgICAgICAgICBjb3VudDogZWxlbWVudC5jb3VudAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgZmlsdGVyLmVsZW1lbnRzLnB1c2goaXRlbSk7IC8vZmlsbCB0aGUgYnVja2V0CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmaWx0ZXIuZWxlbWVudHMuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgIHJldHVybiBiLmNvdW50IC0gYS5jb3VudDsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZmlsdGVyOwogICAgICB9KTsKICAgICAgVnVlLnNldChzdGF0ZSwgJ2ZpbHRlckNvbHVtbnMnLCBmaWx0ZXJzKTsKICAgIH0KICB9Cn0pOw=="},{"version":3,"sources":["/Users/tk/GitHub/nokiatwin/src/store/store.js"],"names":["Vue","Vuex","axios","uniqid","use","Store","state","lines","metrics","filterColumns","addedFilters","context","date","text","getters","getFilterColumns","map","col","visible","elements","slice","added","filter","x","toLowerCase","display","concat","autocomplete","getLines","getContext","mutations","addLine","line","colors","color","length","query","filters","forEach","db_columns","dbcol","push","undefined","identifier","time","set","removeLine","splice","findIndex","writeQuery","payload","index","key","writeValues","values","addFilter","actions","getData","dispatch","commit","i","callAPI","find","metric","type","post","headers","then","response","data","console","log","d","catch","error","getMetricsAndFilters","startsWith","item","getFilters","exists","column","listSelector","element","count","sort","a","b"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\nimport uniqid from 'uniqid';\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    lines: [], //empty array, filled by addLine() and removeLine(), triggered via sidebar.vue\n    metrics:[], //metrics to display (metric_ columns in db)\n    filterColumns: [], //filters to apply (filter_ columns in db)\n\n     //initialize array for filters the user added via typeahead\n    addedFilters: [],\n\n    //time-based annotations\n    context: [\n      {date: \"2009-11\", text:\"Barrack Obama elected president\"},\n      {date: \"2017-06\", text:\"Tobi starts at Bell Labs\"}\n    ]\n  },\n\n\n\n  getters: {\n    //get reduced list of possible values to display\n    getFilterColumns: state => {\n      return state.filterColumns.map(col => {\n        let visible = col.elements.slice(0,5) //select five most frequent labels\n        //identify filters that were added for the current column\n        let added = state.addedFilters.filter(x=>x.filter.toLowerCase() == col.display.toLowerCase()) //select added filters that match the column\n        visible = visible.concat(added)\n        return {\n          display: col.display,\n          elements: visible,\n          autocomplete: col.elements\n        }\n      })\n    },\n\n    //get Lines (triggered via sidebar and )\n    getLines: (state) => state.lines,\n    getContext: (state) => state.context\n  },\n\n\n  mutations: {\n    //initialize a new line (incl. filters in sidebar and actual line in graph), triggered from sidebar\n    addLine(state) {\n      let line = {}\n      //set a color for to identify the line\n      //TODO Does not select last two colors for some reason\n      let colors = [\"#20C5A0\",\"#BD10E0\",\"#F5A623\",\"4A90E2\",\"ACC000\"]\n      line.color = colors[state.lines.length]\n\n      //TODO: FIX! adding a new line flushes queries of existing lines\n      //check if any parameters were passed, if so, take them, if not initialize empty query for db with all possible filters\n      //line.query = (Object.keys(query).length !== 0) ? query : {}\n      line.query = {}\n\n      let filters = []\n      state.filterColumns.forEach(col => {\n        col.db_columns.forEach(dbcol => {\n          filters.push(dbcol)\n        })\n      })\n      filters.push(\"metric\")\n      filters.forEach(filter => line.query[filter] = undefined)\n      line.identifier = uniqid.time() //unique identifier to update query or delete line\n      Vue.set(state.lines, state.lines.length, line) //push new line at end of lines array\n    },\n\n    //remove line from sidebar\n    removeLine(state, identifier) {\n      if(state.lines.length > 1)\n      state.lines.splice(state.lines.findIndex(x=>x.identifier == identifier),1)\n    },\n\n    //write query to lines\n    writeQuery(state, payload) {\n      //console.log(\"writeQuery() called\", payload)\n      Vue.set(state.lines[payload.index].query, payload.filter, payload.key)\n    },\n\n    //write A PI return to lines (gotten from callAPI())\n    writeValues(state, payload) {\n      //console.log(\"writeData called\", payload)\n      Vue.set(state.lines[payload.index], \"values\", payload.values)\n    },\n\n    //add filter via typeahead\n    addFilter(state, payload) {\n      Vue.set(state.addedFilters,state.addedFilters.length,payload)\n    },\n\n  /*  writeMetrics(state, payload) {\n\n      //Vue.set(state.metrics,payload)\n    }*/\n  },\n\n\n\n  actions: {\n    //update queries and get data for them\n    getData({dispatch, commit, state}, payload) {\n      //console.log(\"getData() called\", payload)\n      if(payload.identifier) { //if payload just applies to a single line\n\n        commit('writeQuery',{\n          index: state.lines.findIndex(x=>x.identifier == payload.identifier),\n          filter: payload.query.filter,\n          key: payload.query.key\n        })\n        dispatch('callAPI',payload.identifier)\n      } else { //if it affects all lines (e.g. when a metric is changed)\n        state.lines.forEach((line, i) => {\n          commit('writeQuery',{\n            index: i,\n            filter: 'metric',\n            key: payload.query.key\n          })\n          dispatch('callAPI',line.identifier)\n        })\n      }\n    },\n\n    //get data from API\n    callAPI( {commit,state}, identifier) {\n      let query = state.lines.find(x=>x.identifier == identifier).query\n      if(!query.metric) query.metric = \"metric_rating_overall\" //avoid crash because initial metric has not been defined\n      query.type = 'result' //set query end (quasi endpoint) for api.php\n\n      //axios.post( \"http://social-dynamics.net/nokiatwin/api.php\",query,\n      axios.post( \"http://localhost:8080/nokiatwin/api_new.php\",query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        response.data.forEach(x => console.log(x.d))\n        commit('writeValues',{\n          index: state.lines.findIndex(x=>x.identifier == identifier),\n          values: response.data\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n\n    //get\n    getMetricsAndFilters({dispatch, state}) {\n      let query = {type: 'metrics'}\n      axios.post( \"http://localhost:8080/nokiatwin/api_new.php\",query, //for development, this is overwritten in vue.config.js\n        {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n      })\n      .then(response => {\n        //filter response by metric_ and write it to store\n        let metrics = response.data.filter(x=>x.key.startsWith('metric_')).map(item => {\n          //if no display name given, use db column\n          if(!item.display) item.display = item.key\n          return item\n        })\n        Vue.set(state,'metrics',metrics)\n\n        //filter by filter_ and hand to getFilters() (which can get values for each filter)\n        dispatch('getFilters', response.data.filter(x=>x.key.startsWith('filter_')))\n      })\n      .catch(error => {\n        console.log(error)\n      });\n    },\n\n    getFilters({state}, payload) {\n      //transform filters with the same name into a group with multiple db_columns\n      let filters = []\n      payload.forEach(filter => {\n        let exists = filters.find(x=>x.display == filter.display)\n        if(exists) {\n          exists.db_columns.push(filter.key)\n        } else {\n          filters.push({display: filter.display, db_columns: [filter.key]})\n        }\n      })\n\n      //generate lists of columns, then fill them with filters\n      filters = filters.map(filter => {\n        filter.elements = [] //bucket to fill\n        filter.db_columns.forEach(column => {\n          let query = {\n            type: 'selectors',\n            listSelector: column\n          }\n          //axios.post( \"https://social-dynamics.net/nokiatwin/api.php\",query,\n          axios.post( \"http://localhost:8080/nokiatwin/api_new.php\",query,  //for development, this is overwritten in vue.config.js\n            {headers: {'Content-Type': 'application/json;charset=UTF-8'}\n          })\n          .then(response => {\n            response.data.forEach(element => { //for each item in the list, create a unique object to pass on\n              let item = {\n                key: element[column],\n                filter: column,\n                count: element.count\n              }\n              filter.elements.push(item) //fill the bucket\n            })\n            filter.elements.sort((a,b) => b.count - a.count)\n          })\n        })\n        return filter\n      })\n      Vue.set(state,'filterColumns',filters)\n    }\n  }\n})\n"]}]}